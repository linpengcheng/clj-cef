{
    "_cef_accessibility_handler_t": {
        "name": "cef_accessibility_handler_t",
        "path": "include/capi/cef_accessibility_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_accessibility_location_change": {
                "args": [
                    [
                        "_cef_accessibility_handler_t"
                    ],
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "void (*on_accessibility_location_change) (struct _cef_accessibility_handler_t *, struct _cef_value_t *)",
                "name": "on_accessibility_location_change",
                "ret": "void",
                "type": "fptr"
            },
            "on_accessibility_tree_change": {
                "args": [
                    [
                        "_cef_accessibility_handler_t"
                    ],
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "void (*on_accessibility_tree_change) (struct _cef_accessibility_handler_t *, struct _cef_value_t *)",
                "name": "on_accessibility_tree_change",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_app_t": {
        "name": "cef_app_t",
        "path": "include/capi/cef_app_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_browser_process_handler": {
                "args": [
                    [
                        "_cef_app_t"
                    ]
                ],
                "decl": "struct _cef_browser_process_handler_t * (*get_browser_process_handler) (struct _cef_app_t *)",
                "name": "get_browser_process_handler",
                "ret": [
                    "_cef_browser_process_handler_t"
                ],
                "type": "fptr"
            },
            "get_render_process_handler": {
                "args": [
                    [
                        "_cef_app_t"
                    ]
                ],
                "decl": "struct _cef_render_process_handler_t * (*get_render_process_handler) (struct _cef_app_t *)",
                "name": "get_render_process_handler",
                "ret": [
                    "_cef_render_process_handler_t"
                ],
                "type": "fptr"
            },
            "get_resource_bundle_handler": {
                "args": [
                    [
                        "_cef_app_t"
                    ]
                ],
                "decl": "struct _cef_resource_bundle_handler_t * (*get_resource_bundle_handler) (struct _cef_app_t *)",
                "name": "get_resource_bundle_handler",
                "ret": [
                    "_cef_resource_bundle_handler_t"
                ],
                "type": "fptr"
            },
            "on_before_command_line_processing": {
                "args": [
                    [
                        "_cef_app_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "void (*on_before_command_line_processing) (struct _cef_app_t *, const cef_string_t *, struct _cef_command_line_t *)",
                "name": "on_before_command_line_processing",
                "ret": "void",
                "type": "fptr"
            },
            "on_register_custom_schemes": {
                "args": [
                    [
                        "_cef_app_t"
                    ],
                    [
                        "_cef_scheme_registrar_t"
                    ]
                ],
                "decl": "void (*on_register_custom_schemes) (struct _cef_app_t *, struct _cef_scheme_registrar_t *)",
                "name": "on_register_custom_schemes",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_audio_handler_t": {
        "name": "cef_audio_handler_t",
        "path": "include/capi/cef_audio_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_audio_parameters": {
                "args": [
                    [
                        "_cef_audio_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "cef_audio_parameters_t"
                    ]
                ],
                "decl": "int (*get_audio_parameters) (struct _cef_audio_handler_t *, struct _cef_browser_t *, cef_audio_parameters_t *)",
                "name": "get_audio_parameters",
                "ret": "int",
                "type": "fptr"
            },
            "on_audio_stream_error": {
                "args": [
                    [
                        "_cef_audio_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_audio_stream_error) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_audio_stream_error",
                "ret": "void",
                "type": "fptr"
            },
            "on_audio_stream_packet": {
                "args": [
                    [
                        "_cef_audio_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        [
                            "const float"
                        ]
                    ],
                    "int",
                    "int64"
                ],
                "decl": "void (*on_audio_stream_packet) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const float **, int, int64)",
                "name": "on_audio_stream_packet",
                "ret": "void",
                "type": "fptr"
            },
            "on_audio_stream_started": {
                "args": [
                    [
                        "_cef_audio_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_audio_parameters_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_audio_stream_started) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const cef_audio_parameters_t *, int)",
                "name": "on_audio_stream_started",
                "ret": "void",
                "type": "fptr"
            },
            "on_audio_stream_stopped": {
                "args": [
                    [
                        "_cef_audio_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_audio_stream_stopped) (struct _cef_audio_handler_t *, struct _cef_browser_t *)",
                "name": "on_audio_stream_stopped",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_audio_parameters_t": {
        "name": "cef_audio_parameters_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "channel_layout": "cef_channel_layout_t",
            "frames_per_buffer": "int",
            "sample_rate": "int"
        }
    },
    "_cef_auth_callback_t": {
        "name": "cef_auth_callback_t",
        "path": "include/capi/cef_auth_callback_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_auth_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_auth_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_auth_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_auth_callback_t *, const cef_string_t *, const cef_string_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_base_ref_counted_t": {
        "name": "cef_base_ref_counted_t",
        "path": "include/capi/cef_base_capi.h",
        "props": {
            "add_ref": {
                "args": [
                    [
                        "_cef_base_ref_counted_t"
                    ]
                ],
                "decl": "void (*add_ref) (struct _cef_base_ref_counted_t *)",
                "name": "add_ref",
                "ret": "void",
                "type": "fptr"
            },
            "has_at_least_one_ref": {
                "args": [
                    [
                        "_cef_base_ref_counted_t"
                    ]
                ],
                "decl": "int (*has_at_least_one_ref) (struct _cef_base_ref_counted_t *)",
                "name": "has_at_least_one_ref",
                "ret": "int",
                "type": "fptr"
            },
            "has_one_ref": {
                "args": [
                    [
                        "_cef_base_ref_counted_t"
                    ]
                ],
                "decl": "int (*has_one_ref) (struct _cef_base_ref_counted_t *)",
                "name": "has_one_ref",
                "ret": "int",
                "type": "fptr"
            },
            "release": {
                "args": [
                    [
                        "_cef_base_ref_counted_t"
                    ]
                ],
                "decl": "int (*release) (struct _cef_base_ref_counted_t *)",
                "name": "release",
                "ret": "int",
                "type": "fptr"
            },
            "size": "size_t"
        }
    },
    "_cef_base_scoped_t": {
        "name": "cef_base_scoped_t",
        "path": "include/capi/cef_base_capi.h",
        "props": {
            "del": {
                "args": [
                    [
                        "_cef_base_scoped_t"
                    ]
                ],
                "decl": "void (*del) (struct _cef_base_scoped_t *)",
                "name": "del",
                "ret": "void",
                "type": "fptr"
            },
            "size": "size_t"
        }
    },
    "_cef_before_download_callback_t": {
        "name": "cef_before_download_callback_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cont": {
                "args": [
                    [
                        "_cef_before_download_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "void (*cont) (struct _cef_before_download_callback_t *, const cef_string_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_binary_value_t": {
        "name": "cef_binary_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "copy": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*copy) (struct _cef_binary_value_t *)",
                "name": "copy",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_data": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "decl": "size_t (*get_data) (struct _cef_binary_value_t *, void *, size_t, size_t)",
                "name": "get_data",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_size": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "size_t (*get_size) (struct _cef_binary_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            "is_equal": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ],
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*is_equal) (struct _cef_binary_value_t *, struct _cef_binary_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            "is_owned": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*is_owned) (struct _cef_binary_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ],
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_binary_value_t *, struct _cef_binary_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_binary_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_box_layout_settings_t": {
        "name": "cef_box_layout_settings_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "between_child_spacing": "int",
            "cross_axis_alignment": "cef_cross_axis_alignment_t",
            "default_flex": "int",
            "horizontal": "int",
            "inside_border_horizontal_spacing": "int",
            "inside_border_insets": "cef_insets_t",
            "inside_border_vertical_spacing": "int",
            "main_axis_alignment": "cef_main_axis_alignment_t",
            "minimum_cross_axis_size": "int"
        }
    },
    "_cef_browser_process_handler_t": {
        "name": "cef_browser_process_handler_t",
        "path": "include/capi/cef_browser_process_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_cookieable_schemes": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ],
                    "cef_string_list_t",
                    [
                        "int"
                    ]
                ],
                "decl": "void (*get_cookieable_schemes) (struct _cef_browser_process_handler_t *, cef_string_list_t, int *)",
                "name": "get_cookieable_schemes",
                "ret": "void",
                "type": "fptr"
            },
            "get_default_client": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ]
                ],
                "decl": "struct _cef_client_t * (*get_default_client) (struct _cef_browser_process_handler_t *)",
                "name": "get_default_client",
                "ret": [
                    "_cef_client_t"
                ],
                "type": "fptr"
            },
            "get_print_handler": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ]
                ],
                "decl": "struct _cef_print_handler_t * (*get_print_handler) (struct _cef_browser_process_handler_t *)",
                "name": "get_print_handler",
                "ret": [
                    "_cef_print_handler_t"
                ],
                "type": "fptr"
            },
            "on_before_child_process_launch": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ],
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "void (*on_before_child_process_launch) (struct _cef_browser_process_handler_t *, struct _cef_command_line_t *)",
                "name": "on_before_child_process_launch",
                "ret": "void",
                "type": "fptr"
            },
            "on_context_initialized": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ]
                ],
                "decl": "void (*on_context_initialized) (struct _cef_browser_process_handler_t *)",
                "name": "on_context_initialized",
                "ret": "void",
                "type": "fptr"
            },
            "on_schedule_message_pump_work": {
                "args": [
                    [
                        "_cef_browser_process_handler_t"
                    ],
                    "int64"
                ],
                "decl": "void (*on_schedule_message_pump_work) (struct _cef_browser_process_handler_t *, int64)",
                "name": "on_schedule_message_pump_work",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_browser_settings_t": {
        "name": "cef_browser_settings_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "accept_language_list": "cef_string_t",
            "application_cache": "cef_state_t",
            "background_color": "cef_color_t",
            "cursive_font_family": "cef_string_t",
            "databases": "cef_state_t",
            "default_encoding": "cef_string_t",
            "default_fixed_font_size": "int",
            "default_font_size": "int",
            "fantasy_font_family": "cef_string_t",
            "file_access_from_file_urls": "cef_state_t",
            "fixed_font_family": "cef_string_t",
            "image_loading": "cef_state_t",
            "image_shrink_standalone_to_fit": "cef_state_t",
            "javascript": "cef_state_t",
            "javascript_access_clipboard": "cef_state_t",
            "javascript_close_windows": "cef_state_t",
            "javascript_dom_paste": "cef_state_t",
            "local_storage": "cef_state_t",
            "minimum_font_size": "int",
            "minimum_logical_font_size": "int",
            "plugins": "cef_state_t",
            "remote_fonts": "cef_state_t",
            "sans_serif_font_family": "cef_string_t",
            "serif_font_family": "cef_string_t",
            "size": "size_t",
            "standard_font_family": "cef_string_t",
            "tab_to_links": "cef_state_t",
            "text_area_resize": "cef_state_t",
            "universal_access_from_file_urls": "cef_state_t",
            "web_security": "cef_state_t",
            "webgl": "cef_state_t",
            "windowless_frame_rate": "int"
        }
    },
    "_cef_callback_t": {
        "name": "cef_callback_t",
        "path": "include/capi/cef_callback_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_callback_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_callback_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_client_t": {
        "name": "cef_client_t",
        "path": "include/capi/cef_client_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_audio_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_audio_handler_t * (*get_audio_handler) (struct _cef_client_t *)",
                "name": "get_audio_handler",
                "ret": [
                    "_cef_audio_handler_t"
                ],
                "type": "fptr"
            },
            "get_context_menu_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_context_menu_handler_t * (*get_context_menu_handler) (struct _cef_client_t *)",
                "name": "get_context_menu_handler",
                "ret": [
                    "_cef_context_menu_handler_t"
                ],
                "type": "fptr"
            },
            "get_dialog_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_dialog_handler_t * (*get_dialog_handler) (struct _cef_client_t *)",
                "name": "get_dialog_handler",
                "ret": [
                    "_cef_dialog_handler_t"
                ],
                "type": "fptr"
            },
            "get_display_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_display_handler_t * (*get_display_handler) (struct _cef_client_t *)",
                "name": "get_display_handler",
                "ret": [
                    "_cef_display_handler_t"
                ],
                "type": "fptr"
            },
            "get_download_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_download_handler_t * (*get_download_handler) (struct _cef_client_t *)",
                "name": "get_download_handler",
                "ret": [
                    "_cef_download_handler_t"
                ],
                "type": "fptr"
            },
            "get_drag_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_drag_handler_t * (*get_drag_handler) (struct _cef_client_t *)",
                "name": "get_drag_handler",
                "ret": [
                    "_cef_drag_handler_t"
                ],
                "type": "fptr"
            },
            "get_find_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_find_handler_t * (*get_find_handler) (struct _cef_client_t *)",
                "name": "get_find_handler",
                "ret": [
                    "_cef_find_handler_t"
                ],
                "type": "fptr"
            },
            "get_focus_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_focus_handler_t * (*get_focus_handler) (struct _cef_client_t *)",
                "name": "get_focus_handler",
                "ret": [
                    "_cef_focus_handler_t"
                ],
                "type": "fptr"
            },
            "get_jsdialog_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_jsdialog_handler_t * (*get_jsdialog_handler) (struct _cef_client_t *)",
                "name": "get_jsdialog_handler",
                "ret": [
                    "_cef_jsdialog_handler_t"
                ],
                "type": "fptr"
            },
            "get_keyboard_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_keyboard_handler_t * (*get_keyboard_handler) (struct _cef_client_t *)",
                "name": "get_keyboard_handler",
                "ret": [
                    "_cef_keyboard_handler_t"
                ],
                "type": "fptr"
            },
            "get_life_span_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_life_span_handler_t * (*get_life_span_handler) (struct _cef_client_t *)",
                "name": "get_life_span_handler",
                "ret": [
                    "_cef_life_span_handler_t"
                ],
                "type": "fptr"
            },
            "get_load_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_load_handler_t * (*get_load_handler) (struct _cef_client_t *)",
                "name": "get_load_handler",
                "ret": [
                    "_cef_load_handler_t"
                ],
                "type": "fptr"
            },
            "get_render_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_render_handler_t * (*get_render_handler) (struct _cef_client_t *)",
                "name": "get_render_handler",
                "ret": [
                    "_cef_render_handler_t"
                ],
                "type": "fptr"
            },
            "get_request_handler": {
                "args": [
                    [
                        "_cef_client_t"
                    ]
                ],
                "decl": "struct _cef_request_handler_t * (*get_request_handler) (struct _cef_client_t *)",
                "name": "get_request_handler",
                "ret": [
                    "_cef_request_handler_t"
                ],
                "type": "fptr"
            },
            "on_process_message_received": {
                "args": [
                    [
                        "_cef_client_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "int (*on_process_message_received) (struct _cef_client_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "on_process_message_received",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_command_line_t": {
        "name": "cef_command_line_t",
        "path": "include/capi/cef_command_line_capi.h",
        "props": {
            "append_argument": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*append_argument) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "append_argument",
                "ret": "void",
                "type": "fptr"
            },
            "append_switch": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*append_switch) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "append_switch",
                "ret": "void",
                "type": "fptr"
            },
            "append_switch_with_value": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*append_switch_with_value) (struct _cef_command_line_t *, const cef_string_t *, const cef_string_t *)",
                "name": "append_switch_with_value",
                "ret": "void",
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "copy": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "struct _cef_command_line_t * (*copy) (struct _cef_command_line_t *)",
                "name": "copy",
                "ret": [
                    "_cef_command_line_t"
                ],
                "type": "fptr"
            },
            "get_arguments": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_arguments) (struct _cef_command_line_t *, cef_string_list_t)",
                "name": "get_arguments",
                "ret": "void",
                "type": "fptr"
            },
            "get_argv": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_argv) (struct _cef_command_line_t *, cef_string_list_t)",
                "name": "get_argv",
                "ret": "void",
                "type": "fptr"
            },
            "get_command_line_string": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_command_line_string) (struct _cef_command_line_t *)",
                "name": "get_command_line_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_program": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_program) (struct _cef_command_line_t *)",
                "name": "get_program",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_switch_value": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_switch_value) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "get_switch_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_switches": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    "cef_string_map_t"
                ],
                "decl": "void (*get_switches) (struct _cef_command_line_t *, cef_string_map_t)",
                "name": "get_switches",
                "ret": "void",
                "type": "fptr"
            },
            "has_arguments": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "int (*has_arguments) (struct _cef_command_line_t *)",
                "name": "has_arguments",
                "ret": "int",
                "type": "fptr"
            },
            "has_switch": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_switch) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "has_switch",
                "ret": "int",
                "type": "fptr"
            },
            "has_switches": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "int (*has_switches) (struct _cef_command_line_t *)",
                "name": "has_switches",
                "ret": "int",
                "type": "fptr"
            },
            "init_from_argv": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    "int",
                    [
                        [
                            "const char"
                        ]
                    ]
                ],
                "decl": "void (*init_from_argv) (struct _cef_command_line_t *, int, const char *const *)",
                "name": "init_from_argv",
                "ret": "void",
                "type": "fptr"
            },
            "init_from_string": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*init_from_string) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "init_from_string",
                "ret": "void",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_command_line_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_command_line_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "prepend_wrapper": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*prepend_wrapper) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "prepend_wrapper",
                "ret": "void",
                "type": "fptr"
            },
            "reset": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ]
                ],
                "decl": "void (*reset) (struct _cef_command_line_t *)",
                "name": "reset",
                "ret": "void",
                "type": "fptr"
            },
            "set_program": {
                "args": [
                    [
                        "_cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_program) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "set_program",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_completion_callback_t": {
        "name": "cef_completion_callback_t",
        "path": "include/capi/cef_callback_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_complete": {
                "args": [
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "void (*on_complete) (struct _cef_completion_callback_t *)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_composition_underline_t": {
        "name": "cef_composition_underline_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "background_color": "cef_color_t",
            "color": "cef_color_t",
            "range": "cef_range_t",
            "style": "cef_composition_underline_style_t",
            "thick": "int"
        }
    },
    "_cef_context_menu_handler_t": {
        "name": "cef_context_menu_handler_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_before_context_menu": {
                "args": [
                    [
                        "_cef_context_menu_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_context_menu_params_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "void (*on_before_context_menu) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, struct _cef_menu_model_t *)",
                "name": "on_before_context_menu",
                "ret": "void",
                "type": "fptr"
            },
            "on_context_menu_command": {
                "args": [
                    [
                        "_cef_context_menu_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_context_menu_params_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "decl": "int (*on_context_menu_command) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, int, cef_event_flags_t)",
                "name": "on_context_menu_command",
                "ret": "int",
                "type": "fptr"
            },
            "on_context_menu_dismissed": {
                "args": [
                    [
                        "_cef_context_menu_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*on_context_menu_dismissed) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *)",
                "name": "on_context_menu_dismissed",
                "ret": "void",
                "type": "fptr"
            },
            "run_context_menu": {
                "args": [
                    [
                        "_cef_context_menu_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_context_menu_params_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    [
                        "_cef_run_context_menu_callback_t"
                    ]
                ],
                "decl": "int (*run_context_menu) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, struct _cef_menu_model_t *, struct _cef_run_context_menu_callback_t *)",
                "name": "run_context_menu",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_context_menu_params_t": {
        "name": "cef_context_menu_params_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_dictionary_suggestions": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "int (*get_dictionary_suggestions) (struct _cef_context_menu_params_t *, cef_string_list_t)",
                "name": "get_dictionary_suggestions",
                "ret": "int",
                "type": "fptr"
            },
            "get_edit_state_flags": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_context_menu_edit_state_flags_t (*get_edit_state_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_edit_state_flags",
                "ret": "cef_context_menu_edit_state_flags_t",
                "type": "fptr"
            },
            "get_frame_charset": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_frame_charset) (struct _cef_context_menu_params_t *)",
                "name": "get_frame_charset",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_frame_url": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_frame_url) (struct _cef_context_menu_params_t *)",
                "name": "get_frame_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_link_url": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_link_url) (struct _cef_context_menu_params_t *)",
                "name": "get_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_media_state_flags": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_context_menu_media_state_flags_t (*get_media_state_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_media_state_flags",
                "ret": "cef_context_menu_media_state_flags_t",
                "type": "fptr"
            },
            "get_media_type": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_context_menu_media_type_t (*get_media_type) (struct _cef_context_menu_params_t *)",
                "name": "get_media_type",
                "ret": "cef_context_menu_media_type_t",
                "type": "fptr"
            },
            "get_misspelled_word": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_misspelled_word) (struct _cef_context_menu_params_t *)",
                "name": "get_misspelled_word",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_page_url": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_page_url) (struct _cef_context_menu_params_t *)",
                "name": "get_page_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_selection_text": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_selection_text) (struct _cef_context_menu_params_t *)",
                "name": "get_selection_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_source_url": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_source_url) (struct _cef_context_menu_params_t *)",
                "name": "get_source_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_title_text": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_title_text) (struct _cef_context_menu_params_t *)",
                "name": "get_title_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type_flags": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_context_menu_type_flags_t (*get_type_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_type_flags",
                "ret": "cef_context_menu_type_flags_t",
                "type": "fptr"
            },
            "get_unfiltered_link_url": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_unfiltered_link_url) (struct _cef_context_menu_params_t *)",
                "name": "get_unfiltered_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_xcoord": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*get_xcoord) (struct _cef_context_menu_params_t *)",
                "name": "get_xcoord",
                "ret": "int",
                "type": "fptr"
            },
            "get_ycoord": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*get_ycoord) (struct _cef_context_menu_params_t *)",
                "name": "get_ycoord",
                "ret": "int",
                "type": "fptr"
            },
            "has_image_contents": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*has_image_contents) (struct _cef_context_menu_params_t *)",
                "name": "has_image_contents",
                "ret": "int",
                "type": "fptr"
            },
            "is_custom_menu": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*is_custom_menu) (struct _cef_context_menu_params_t *)",
                "name": "is_custom_menu",
                "ret": "int",
                "type": "fptr"
            },
            "is_editable": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*is_editable) (struct _cef_context_menu_params_t *)",
                "name": "is_editable",
                "ret": "int",
                "type": "fptr"
            },
            "is_pepper_menu": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*is_pepper_menu) (struct _cef_context_menu_params_t *)",
                "name": "is_pepper_menu",
                "ret": "int",
                "type": "fptr"
            },
            "is_spell_check_enabled": {
                "args": [
                    [
                        "_cef_context_menu_params_t"
                    ]
                ],
                "decl": "int (*is_spell_check_enabled) (struct _cef_context_menu_params_t *)",
                "name": "is_spell_check_enabled",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_cookie_access_filter_t": {
        "name": "cef_cookie_access_filter_t",
        "path": "include/capi/cef_resource_request_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "can_save_cookie": {
                "args": [
                    [
                        "_cef_cookie_access_filter_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_response_t"
                    ],
                    [
                        "_cef_cookie_t"
                    ]
                ],
                "decl": "int (*can_save_cookie) (struct _cef_cookie_access_filter_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, const struct _cef_cookie_t *)",
                "name": "can_save_cookie",
                "ret": "int",
                "type": "fptr"
            },
            "can_send_cookie": {
                "args": [
                    [
                        "_cef_cookie_access_filter_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_cookie_t"
                    ]
                ],
                "decl": "int (*can_send_cookie) (struct _cef_cookie_access_filter_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, const struct _cef_cookie_t *)",
                "name": "can_send_cookie",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_cookie_manager_t": {
        "name": "cef_cookie_manager_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "delete_cookies": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_delete_cookies_callback_t"
                    ]
                ],
                "decl": "int (*delete_cookies) (struct _cef_cookie_manager_t *, const cef_string_t *, const cef_string_t *, struct _cef_delete_cookies_callback_t *)",
                "name": "delete_cookies",
                "ret": "int",
                "type": "fptr"
            },
            "flush_store": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "int (*flush_store) (struct _cef_cookie_manager_t *, struct _cef_completion_callback_t *)",
                "name": "flush_store",
                "ret": "int",
                "type": "fptr"
            },
            "set_cookie": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_cookie_t"
                    ],
                    [
                        "_cef_set_cookie_callback_t"
                    ]
                ],
                "decl": "int (*set_cookie) (struct _cef_cookie_manager_t *, const cef_string_t *, const struct _cef_cookie_t *, struct _cef_set_cookie_callback_t *)",
                "name": "set_cookie",
                "ret": "int",
                "type": "fptr"
            },
            "set_supported_schemes": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    "cef_string_list_t",
                    "int",
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "void (*set_supported_schemes) (struct _cef_cookie_manager_t *, cef_string_list_t, int, struct _cef_completion_callback_t *)",
                "name": "set_supported_schemes",
                "ret": "void",
                "type": "fptr"
            },
            "visit_all_cookies": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    [
                        "_cef_cookie_visitor_t"
                    ]
                ],
                "decl": "int (*visit_all_cookies) (struct _cef_cookie_manager_t *, struct _cef_cookie_visitor_t *)",
                "name": "visit_all_cookies",
                "ret": "int",
                "type": "fptr"
            },
            "visit_url_cookies": {
                "args": [
                    [
                        "_cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "_cef_cookie_visitor_t"
                    ]
                ],
                "decl": "int (*visit_url_cookies) (struct _cef_cookie_manager_t *, const cef_string_t *, int, struct _cef_cookie_visitor_t *)",
                "name": "visit_url_cookies",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_cookie_t": {
        "name": "cef_cookie_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "creation": "cef_time_t",
            "domain": "cef_string_t",
            "expires": "cef_time_t",
            "has_expires": "int",
            "httponly": "int",
            "last_access": "cef_time_t",
            "name": "cef_string_t",
            "path": "cef_string_t",
            "priority": "cef_cookie_priority_t",
            "same_site": "cef_cookie_same_site_t",
            "secure": "int",
            "value": "cef_string_t"
        }
    },
    "_cef_cookie_visitor_t": {
        "name": "cef_cookie_visitor_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "visit": {
                "args": [
                    [
                        "_cef_cookie_visitor_t"
                    ],
                    [
                        "_cef_cookie_t"
                    ],
                    "int",
                    "int",
                    [
                        "int"
                    ]
                ],
                "decl": "int (*visit) (struct _cef_cookie_visitor_t *, const struct _cef_cookie_t *, int, int, int *)",
                "name": "visit",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_cursor_info_t": {
        "name": "cef_cursor_info_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "buffer": [
                "void"
            ],
            "hotspot": "cef_point_t",
            "image_scale_factor": "float",
            "size": "cef_size_t"
        }
    },
    "_cef_delete_cookies_callback_t": {
        "name": "cef_delete_cookies_callback_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_complete": {
                "args": [
                    [
                        "_cef_delete_cookies_callback_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_complete) (struct _cef_delete_cookies_callback_t *, int)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_dev_tools_message_observer_t": {
        "name": "cef_dev_tools_message_observer_t",
        "path": "include/capi/cef_devtools_message_observer_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_dev_tools_agent_attached": {
                "args": [
                    [
                        "_cef_dev_tools_message_observer_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_dev_tools_agent_attached) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *)",
                "name": "on_dev_tools_agent_attached",
                "ret": "void",
                "type": "fptr"
            },
            "on_dev_tools_agent_detached": {
                "args": [
                    [
                        "_cef_dev_tools_message_observer_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_dev_tools_agent_detached) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *)",
                "name": "on_dev_tools_agent_detached",
                "ret": "void",
                "type": "fptr"
            },
            "on_dev_tools_event": {
                "args": [
                    [
                        "_cef_dev_tools_message_observer_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "void (*on_dev_tools_event) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, const cef_string_t *, const void *, size_t)",
                "name": "on_dev_tools_event",
                "ret": "void",
                "type": "fptr"
            },
            "on_dev_tools_message": {
                "args": [
                    [
                        "_cef_dev_tools_message_observer_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "int (*on_dev_tools_message) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, const void *, size_t)",
                "name": "on_dev_tools_message",
                "ret": "int",
                "type": "fptr"
            },
            "on_dev_tools_method_result": {
                "args": [
                    [
                        "_cef_dev_tools_message_observer_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "void (*on_dev_tools_method_result) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, int, int, const void *, size_t)",
                "name": "on_dev_tools_method_result",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_dialog_handler_t": {
        "name": "cef_dialog_handler_t",
        "path": "include/capi/cef_dialog_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_file_dialog": {
                "args": [
                    [
                        "_cef_dialog_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_file_dialog_mode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_string_list_t",
                    "int",
                    [
                        "_cef_file_dialog_callback_t"
                    ]
                ],
                "decl": "int (*on_file_dialog) (struct _cef_dialog_handler_t *, struct _cef_browser_t *, cef_file_dialog_mode_t, const cef_string_t *, const cef_string_t *, cef_string_list_t, int, struct _cef_file_dialog_callback_t *)",
                "name": "on_file_dialog",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_dictionary_value_t": {
        "name": "cef_dictionary_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "clear": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*clear) (struct _cef_dictionary_value_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            "copy": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_dictionary_value_t * (*copy) (struct _cef_dictionary_value_t *, int)",
                "name": "copy",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_binary": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_binary",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_bool": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*get_bool) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            "get_dictionary": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_dictionary",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_double": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "double (*get_double) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            "get_int": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*get_int) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            "get_keys": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "int (*get_keys) (struct _cef_dictionary_value_t *, cef_string_list_t)",
                "name": "get_keys",
                "ret": "int",
                "type": "fptr"
            },
            "get_list": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_list",
                "ret": [
                    "_cef_list_value_t"
                ],
                "type": "fptr"
            },
            "get_size": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "size_t (*get_size) (struct _cef_dictionary_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_string": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            "get_value": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_value_t * (*get_value) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_value",
                "ret": [
                    "_cef_value_t"
                ],
                "type": "fptr"
            },
            "has_key": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_key) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "has_key",
                "ret": "int",
                "type": "fptr"
            },
            "is_equal": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*is_equal) (struct _cef_dictionary_value_t *, struct _cef_dictionary_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            "is_owned": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*is_owned) (struct _cef_dictionary_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_dictionary_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_dictionary_value_t *, struct _cef_dictionary_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_dictionary_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "remove": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*remove) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            "set_binary": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*set_binary) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            "set_bool": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*set_bool) (struct _cef_dictionary_value_t *, const cef_string_t *, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            "set_dictionary": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*set_dictionary) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            "set_double": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "double"
                ],
                "decl": "int (*set_double) (struct _cef_dictionary_value_t *, const cef_string_t *, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            "set_int": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*set_int) (struct _cef_dictionary_value_t *, const cef_string_t *, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            "set_list": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*set_list) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            },
            "set_null": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_null) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            "set_string": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_string) (struct _cef_dictionary_value_t *, const cef_string_t *, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            },
            "set_value": {
                "args": [
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*set_value) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_value_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_display_handler_t": {
        "name": "cef_display_handler_t",
        "path": "include/capi/cef_display_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_address_change": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_address_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *)",
                "name": "on_address_change",
                "ret": "void",
                "type": "fptr"
            },
            "on_auto_resize": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_size_t"
                    ]
                ],
                "decl": "int (*on_auto_resize) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_size_t *)",
                "name": "on_auto_resize",
                "ret": "int",
                "type": "fptr"
            },
            "on_console_message": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_log_severity_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*on_console_message) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_log_severity_t, const cef_string_t *, const cef_string_t *, int)",
                "name": "on_console_message",
                "ret": "int",
                "type": "fptr"
            },
            "on_cursor_change": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "void"
                    ],
                    "cef_cursor_type_t",
                    [
                        "_cef_cursor_info_t"
                    ]
                ],
                "decl": "int (*on_cursor_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, void *, cef_cursor_type_t, const struct _cef_cursor_info_t *)",
                "name": "on_cursor_change",
                "ret": "int",
                "type": "fptr"
            },
            "on_favicon_urlchange": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*on_favicon_urlchange) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_string_list_t)",
                "name": "on_favicon_urlchange",
                "ret": "void",
                "type": "fptr"
            },
            "on_fullscreen_mode_change": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_fullscreen_mode_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_fullscreen_mode_change",
                "ret": "void",
                "type": "fptr"
            },
            "on_loading_progress_change": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "double"
                ],
                "decl": "void (*on_loading_progress_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, double)",
                "name": "on_loading_progress_change",
                "ret": "void",
                "type": "fptr"
            },
            "on_status_message": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_status_message) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_status_message",
                "ret": "void",
                "type": "fptr"
            },
            "on_title_change": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_title_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_title_change",
                "ret": "void",
                "type": "fptr"
            },
            "on_tooltip": {
                "args": [
                    [
                        "_cef_display_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*on_tooltip) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_string_t *)",
                "name": "on_tooltip",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_domdocument_t": {
        "name": "cef_domdocument_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_base_url": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_base_url) (struct _cef_domdocument_t *)",
                "name": "get_base_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_body": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_body) (struct _cef_domdocument_t *)",
                "name": "get_body",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_complete_url": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_complete_url) (struct _cef_domdocument_t *, const cef_string_t *)",
                "name": "get_complete_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_document": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_document) (struct _cef_domdocument_t *)",
                "name": "get_document",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_element_by_id": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_element_by_id) (struct _cef_domdocument_t *, const cef_string_t *)",
                "name": "get_element_by_id",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_focused_node": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_focused_node) (struct _cef_domdocument_t *)",
                "name": "get_focused_node",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_head": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_head) (struct _cef_domdocument_t *)",
                "name": "get_head",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_selection_as_markup": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_selection_as_markup) (struct _cef_domdocument_t *)",
                "name": "get_selection_as_markup",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_selection_as_text": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_selection_as_text) (struct _cef_domdocument_t *)",
                "name": "get_selection_as_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_selection_end_offset": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "int (*get_selection_end_offset) (struct _cef_domdocument_t *)",
                "name": "get_selection_end_offset",
                "ret": "int",
                "type": "fptr"
            },
            "get_selection_start_offset": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "int (*get_selection_start_offset) (struct _cef_domdocument_t *)",
                "name": "get_selection_start_offset",
                "ret": "int",
                "type": "fptr"
            },
            "get_title": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_title) (struct _cef_domdocument_t *)",
                "name": "get_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "cef_dom_document_type_t (*get_type) (struct _cef_domdocument_t *)",
                "name": "get_type",
                "ret": "cef_dom_document_type_t",
                "type": "fptr"
            },
            "has_selection": {
                "args": [
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "int (*has_selection) (struct _cef_domdocument_t *)",
                "name": "has_selection",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_domnode_t": {
        "name": "cef_domnode_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_as_markup": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_as_markup) (struct _cef_domnode_t *)",
                "name": "get_as_markup",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_document": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domdocument_t * (*get_document) (struct _cef_domnode_t *)",
                "name": "get_document",
                "ret": [
                    "_cef_domdocument_t"
                ],
                "type": "fptr"
            },
            "get_element_attribute": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_element_attribute) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "get_element_attribute",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_element_attributes": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    "cef_string_map_t"
                ],
                "decl": "void (*get_element_attributes) (struct _cef_domnode_t *, cef_string_map_t)",
                "name": "get_element_attributes",
                "ret": "void",
                "type": "fptr"
            },
            "get_element_bounds": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_rect_t (*get_element_bounds) (struct _cef_domnode_t *)",
                "name": "get_element_bounds",
                "ret": "cef_rect_t",
                "type": "fptr"
            },
            "get_element_inner_text": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_element_inner_text) (struct _cef_domnode_t *)",
                "name": "get_element_inner_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_element_tag_name": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_element_tag_name) (struct _cef_domnode_t *)",
                "name": "get_element_tag_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_first_child": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_first_child) (struct _cef_domnode_t *)",
                "name": "get_first_child",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_form_control_element_type": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_form_control_element_type) (struct _cef_domnode_t *)",
                "name": "get_form_control_element_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_last_child": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_last_child) (struct _cef_domnode_t *)",
                "name": "get_last_child",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_name": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_domnode_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_next_sibling": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_next_sibling) (struct _cef_domnode_t *)",
                "name": "get_next_sibling",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_parent": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_parent) (struct _cef_domnode_t *)",
                "name": "get_parent",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_previous_sibling": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "struct _cef_domnode_t * (*get_previous_sibling) (struct _cef_domnode_t *)",
                "name": "get_previous_sibling",
                "ret": [
                    "_cef_domnode_t"
                ],
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_dom_node_type_t (*get_type) (struct _cef_domnode_t *)",
                "name": "get_type",
                "ret": "cef_dom_node_type_t",
                "type": "fptr"
            },
            "get_value": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_value) (struct _cef_domnode_t *)",
                "name": "get_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "has_children": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*has_children) (struct _cef_domnode_t *)",
                "name": "has_children",
                "ret": "int",
                "type": "fptr"
            },
            "has_element_attribute": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_element_attribute) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "has_element_attribute",
                "ret": "int",
                "type": "fptr"
            },
            "has_element_attributes": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*has_element_attributes) (struct _cef_domnode_t *)",
                "name": "has_element_attributes",
                "ret": "int",
                "type": "fptr"
            },
            "is_editable": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*is_editable) (struct _cef_domnode_t *)",
                "name": "is_editable",
                "ret": "int",
                "type": "fptr"
            },
            "is_element": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*is_element) (struct _cef_domnode_t *)",
                "name": "is_element",
                "ret": "int",
                "type": "fptr"
            },
            "is_form_control_element": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*is_form_control_element) (struct _cef_domnode_t *)",
                "name": "is_form_control_element",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_domnode_t *, struct _cef_domnode_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_text": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "int (*is_text) (struct _cef_domnode_t *)",
                "name": "is_text",
                "ret": "int",
                "type": "fptr"
            },
            "set_element_attribute": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_element_attribute) (struct _cef_domnode_t *, const cef_string_t *, const cef_string_t *)",
                "name": "set_element_attribute",
                "ret": "int",
                "type": "fptr"
            },
            "set_value": {
                "args": [
                    [
                        "_cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_value) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_domvisitor_t": {
        "name": "cef_domvisitor_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "visit": {
                "args": [
                    [
                        "_cef_domvisitor_t"
                    ],
                    [
                        "_cef_domdocument_t"
                    ]
                ],
                "decl": "void (*visit) (struct _cef_domvisitor_t *, struct _cef_domdocument_t *)",
                "name": "visit",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_download_handler_t": {
        "name": "cef_download_handler_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_before_download": {
                "args": [
                    [
                        "_cef_download_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_download_item_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_before_download_callback_t"
                    ]
                ],
                "decl": "void (*on_before_download) (struct _cef_download_handler_t *, struct _cef_browser_t *, struct _cef_download_item_t *, const cef_string_t *, struct _cef_before_download_callback_t *)",
                "name": "on_before_download",
                "ret": "void",
                "type": "fptr"
            },
            "on_download_updated": {
                "args": [
                    [
                        "_cef_download_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_download_item_t"
                    ],
                    [
                        "_cef_download_item_callback_t"
                    ]
                ],
                "decl": "void (*on_download_updated) (struct _cef_download_handler_t *, struct _cef_browser_t *, struct _cef_download_item_t *, struct _cef_download_item_callback_t *)",
                "name": "on_download_updated",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_download_item_callback_t": {
        "name": "cef_download_item_callback_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_download_item_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_download_item_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "pause": {
                "args": [
                    [
                        "_cef_download_item_callback_t"
                    ]
                ],
                "decl": "void (*pause) (struct _cef_download_item_callback_t *)",
                "name": "pause",
                "ret": "void",
                "type": "fptr"
            },
            "resume": {
                "args": [
                    [
                        "_cef_download_item_callback_t"
                    ]
                ],
                "decl": "void (*resume) (struct _cef_download_item_callback_t *)",
                "name": "resume",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_download_item_t": {
        "name": "cef_download_item_t",
        "path": "include/capi/cef_download_item_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_content_disposition": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_content_disposition) (struct _cef_download_item_t *)",
                "name": "get_content_disposition",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_current_speed": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int64 (*get_current_speed) (struct _cef_download_item_t *)",
                "name": "get_current_speed",
                "ret": "int64",
                "type": "fptr"
            },
            "get_end_time": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_time_t (*get_end_time) (struct _cef_download_item_t *)",
                "name": "get_end_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            "get_full_path": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_full_path) (struct _cef_download_item_t *)",
                "name": "get_full_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_id": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "uint32 (*get_id) (struct _cef_download_item_t *)",
                "name": "get_id",
                "ret": "uint32",
                "type": "fptr"
            },
            "get_mime_type": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_mime_type) (struct _cef_download_item_t *)",
                "name": "get_mime_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_original_url": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_original_url) (struct _cef_download_item_t *)",
                "name": "get_original_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_percent_complete": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int (*get_percent_complete) (struct _cef_download_item_t *)",
                "name": "get_percent_complete",
                "ret": "int",
                "type": "fptr"
            },
            "get_received_bytes": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int64 (*get_received_bytes) (struct _cef_download_item_t *)",
                "name": "get_received_bytes",
                "ret": "int64",
                "type": "fptr"
            },
            "get_start_time": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_time_t (*get_start_time) (struct _cef_download_item_t *)",
                "name": "get_start_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            "get_suggested_file_name": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_suggested_file_name) (struct _cef_download_item_t *)",
                "name": "get_suggested_file_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_total_bytes": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int64 (*get_total_bytes) (struct _cef_download_item_t *)",
                "name": "get_total_bytes",
                "ret": "int64",
                "type": "fptr"
            },
            "get_url": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_download_item_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_canceled": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int (*is_canceled) (struct _cef_download_item_t *)",
                "name": "is_canceled",
                "ret": "int",
                "type": "fptr"
            },
            "is_complete": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int (*is_complete) (struct _cef_download_item_t *)",
                "name": "is_complete",
                "ret": "int",
                "type": "fptr"
            },
            "is_in_progress": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int (*is_in_progress) (struct _cef_download_item_t *)",
                "name": "is_in_progress",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_download_item_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_download_item_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_drag_data_t": {
        "name": "cef_drag_data_t",
        "path": "include/capi/cef_drag_data_capi.h",
        "props": {
            "add_file": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*add_file) (struct _cef_drag_data_t *, const cef_string_t *, const cef_string_t *)",
                "name": "add_file",
                "ret": "void",
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "clone": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "struct _cef_drag_data_t * (*clone) (struct _cef_drag_data_t *)",
                "name": "clone",
                "ret": [
                    "_cef_drag_data_t"
                ],
                "type": "fptr"
            },
            "get_file_contents": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "_cef_stream_writer_t"
                    ]
                ],
                "decl": "size_t (*get_file_contents) (struct _cef_drag_data_t *, struct _cef_stream_writer_t *)",
                "name": "get_file_contents",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_file_name": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_file_name) (struct _cef_drag_data_t *)",
                "name": "get_file_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_file_names": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "int (*get_file_names) (struct _cef_drag_data_t *, cef_string_list_t)",
                "name": "get_file_names",
                "ret": "int",
                "type": "fptr"
            },
            "get_fragment_base_url": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_fragment_base_url) (struct _cef_drag_data_t *)",
                "name": "get_fragment_base_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_fragment_html": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_fragment_html) (struct _cef_drag_data_t *)",
                "name": "get_fragment_html",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_fragment_text": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_fragment_text) (struct _cef_drag_data_t *)",
                "name": "get_fragment_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_image": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "struct _cef_image_t * (*get_image) (struct _cef_drag_data_t *)",
                "name": "get_image",
                "ret": [
                    "_cef_image_t"
                ],
                "type": "fptr"
            },
            "get_image_hotspot": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_point_t (*get_image_hotspot) (struct _cef_drag_data_t *)",
                "name": "get_image_hotspot",
                "ret": "cef_point_t",
                "type": "fptr"
            },
            "get_link_metadata": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_link_metadata) (struct _cef_drag_data_t *)",
                "name": "get_link_metadata",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_link_title": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_link_title) (struct _cef_drag_data_t *)",
                "name": "get_link_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_link_url": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_link_url) (struct _cef_drag_data_t *)",
                "name": "get_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "has_image": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "int (*has_image) (struct _cef_drag_data_t *)",
                "name": "has_image",
                "ret": "int",
                "type": "fptr"
            },
            "is_file": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "int (*is_file) (struct _cef_drag_data_t *)",
                "name": "is_file",
                "ret": "int",
                "type": "fptr"
            },
            "is_fragment": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "int (*is_fragment) (struct _cef_drag_data_t *)",
                "name": "is_fragment",
                "ret": "int",
                "type": "fptr"
            },
            "is_link": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "int (*is_link) (struct _cef_drag_data_t *)",
                "name": "is_link",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_drag_data_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "reset_file_contents": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ]
                ],
                "decl": "void (*reset_file_contents) (struct _cef_drag_data_t *)",
                "name": "reset_file_contents",
                "ret": "void",
                "type": "fptr"
            },
            "set_fragment_base_url": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_fragment_base_url) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_base_url",
                "ret": "void",
                "type": "fptr"
            },
            "set_fragment_html": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_fragment_html) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_html",
                "ret": "void",
                "type": "fptr"
            },
            "set_fragment_text": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_fragment_text) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_text",
                "ret": "void",
                "type": "fptr"
            },
            "set_link_metadata": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_link_metadata) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_metadata",
                "ret": "void",
                "type": "fptr"
            },
            "set_link_title": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_link_title) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_title",
                "ret": "void",
                "type": "fptr"
            },
            "set_link_url": {
                "args": [
                    [
                        "_cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_link_url) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_url",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_drag_handler_t": {
        "name": "cef_drag_handler_t",
        "path": "include/capi/cef_drag_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_drag_enter": {
                "args": [
                    [
                        "_cef_drag_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_drag_data_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "decl": "int (*on_drag_enter) (struct _cef_drag_handler_t *, struct _cef_browser_t *, struct _cef_drag_data_t *, cef_drag_operations_mask_t)",
                "name": "on_drag_enter",
                "ret": "int",
                "type": "fptr"
            },
            "on_draggable_regions_changed": {
                "args": [
                    [
                        "_cef_drag_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "size_t",
                    [
                        "const cef_draggable_region_t"
                    ]
                ],
                "decl": "void (*on_draggable_regions_changed) (struct _cef_drag_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, size_t, const cef_draggable_region_t *)",
                "name": "on_draggable_regions_changed",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_draggable_region_t": {
        "name": "cef_draggable_region_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "bounds": "cef_rect_t",
            "draggable": "int"
        }
    },
    "_cef_extension_handler_t": {
        "name": "cef_extension_handler_t",
        "path": "include/capi/cef_extension_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "can_access_browser": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "int (*can_access_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, int, struct _cef_browser_t *)",
                "name": "can_access_browser",
                "ret": "int",
                "type": "fptr"
            },
            "get_active_browser": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_browser_t * (*get_active_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, int)",
                "name": "get_active_browser",
                "ret": [
                    "_cef_browser_t"
                ],
                "type": "fptr"
            },
            "get_extension_resource": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_get_extension_resource_callback_t"
                    ]
                ],
                "decl": "int (*get_extension_resource) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, const cef_string_t *, struct _cef_get_extension_resource_callback_t *)",
                "name": "get_extension_resource",
                "ret": "int",
                "type": "fptr"
            },
            "on_before_background_browser": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        [
                            "_cef_client_t"
                        ]
                    ],
                    [
                        "_cef_browser_settings_t"
                    ]
                ],
                "decl": "int (*on_before_background_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, const cef_string_t *, struct _cef_client_t **, struct _cef_browser_settings_t *)",
                "name": "on_before_background_browser",
                "ret": "int",
                "type": "fptr"
            },
            "on_before_browser": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "_cef_window_info_t"
                    ],
                    [
                        [
                            "_cef_client_t"
                        ]
                    ],
                    [
                        "_cef_browser_settings_t"
                    ]
                ],
                "decl": "int (*on_before_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, struct _cef_browser_t *, int, const cef_string_t *, int, struct _cef_window_info_t *, struct _cef_client_t **, struct _cef_browser_settings_t *)",
                "name": "on_before_browser",
                "ret": "int",
                "type": "fptr"
            },
            "on_extension_load_failed": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    "cef_errorcode_t"
                ],
                "decl": "void (*on_extension_load_failed) (struct _cef_extension_handler_t *, cef_errorcode_t)",
                "name": "on_extension_load_failed",
                "ret": "void",
                "type": "fptr"
            },
            "on_extension_loaded": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "void (*on_extension_loaded) (struct _cef_extension_handler_t *, struct _cef_extension_t *)",
                "name": "on_extension_loaded",
                "ret": "void",
                "type": "fptr"
            },
            "on_extension_unloaded": {
                "args": [
                    [
                        "_cef_extension_handler_t"
                    ],
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "void (*on_extension_unloaded) (struct _cef_extension_handler_t *, struct _cef_extension_t *)",
                "name": "on_extension_unloaded",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_extension_t": {
        "name": "cef_extension_t",
        "path": "include/capi/cef_extension_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_handler": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "struct _cef_extension_handler_t * (*get_handler) (struct _cef_extension_t *)",
                "name": "get_handler",
                "ret": [
                    "_cef_extension_handler_t"
                ],
                "type": "fptr"
            },
            "get_identifier": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_identifier) (struct _cef_extension_t *)",
                "name": "get_identifier",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_loader_context": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "struct _cef_request_context_t * (*get_loader_context) (struct _cef_extension_t *)",
                "name": "get_loader_context",
                "ret": [
                    "_cef_request_context_t"
                ],
                "type": "fptr"
            },
            "get_manifest": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_manifest) (struct _cef_extension_t *)",
                "name": "get_manifest",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_path": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_path) (struct _cef_extension_t *)",
                "name": "get_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_loaded": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "int (*is_loaded) (struct _cef_extension_t *)",
                "name": "is_loaded",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_extension_t"
                    ],
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_extension_t *, struct _cef_extension_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "unload": {
                "args": [
                    [
                        "_cef_extension_t"
                    ]
                ],
                "decl": "void (*unload) (struct _cef_extension_t *)",
                "name": "unload",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_file_dialog_callback_t": {
        "name": "cef_file_dialog_callback_t",
        "path": "include/capi/cef_dialog_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_file_dialog_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_file_dialog_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_file_dialog_callback_t"
                    ],
                    "int",
                    "cef_string_list_t"
                ],
                "decl": "void (*cont) (struct _cef_file_dialog_callback_t *, int, cef_string_list_t)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_find_handler_t": {
        "name": "cef_find_handler_t",
        "path": "include/capi/cef_find_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_find_result": {
                "args": [
                    [
                        "_cef_find_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_rect_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "void (*on_find_result) (struct _cef_find_handler_t *, struct _cef_browser_t *, int, int, const cef_rect_t *, int, int)",
                "name": "on_find_result",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_focus_handler_t": {
        "name": "cef_focus_handler_t",
        "path": "include/capi/cef_focus_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_got_focus": {
                "args": [
                    [
                        "_cef_focus_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_got_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *)",
                "name": "on_got_focus",
                "ret": "void",
                "type": "fptr"
            },
            "on_set_focus": {
                "args": [
                    [
                        "_cef_focus_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_focus_source_t"
                ],
                "decl": "int (*on_set_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *, cef_focus_source_t)",
                "name": "on_set_focus",
                "ret": "int",
                "type": "fptr"
            },
            "on_take_focus": {
                "args": [
                    [
                        "_cef_focus_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_take_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_take_focus",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_frame_t": {
        "name": "cef_frame_t",
        "path": "include/capi/cef_frame_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "copy": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*copy) (struct _cef_frame_t *)",
                "name": "copy",
                "ret": "void",
                "type": "fptr"
            },
            "create_urlrequest": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_urlrequest_client_t"
                    ]
                ],
                "decl": "struct _cef_urlrequest_t * (*create_urlrequest) (struct _cef_frame_t *, struct _cef_request_t *, struct _cef_urlrequest_client_t *)",
                "name": "create_urlrequest",
                "ret": [
                    "_cef_urlrequest_t"
                ],
                "type": "fptr"
            },
            "cut": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*cut) (struct _cef_frame_t *)",
                "name": "cut",
                "ret": "void",
                "type": "fptr"
            },
            "del": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*del) (struct _cef_frame_t *)",
                "name": "del",
                "ret": "void",
                "type": "fptr"
            },
            "execute_java_script": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "void (*execute_java_script) (struct _cef_frame_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "execute_java_script",
                "ret": "void",
                "type": "fptr"
            },
            "get_browser": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "struct _cef_browser_t * (*get_browser) (struct _cef_frame_t *)",
                "name": "get_browser",
                "ret": [
                    "_cef_browser_t"
                ],
                "type": "fptr"
            },
            "get_identifier": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "int64 (*get_identifier) (struct _cef_frame_t *)",
                "name": "get_identifier",
                "ret": "int64",
                "type": "fptr"
            },
            "get_name": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_frame_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_parent": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "struct _cef_frame_t * (*get_parent) (struct _cef_frame_t *)",
                "name": "get_parent",
                "ret": [
                    "_cef_frame_t"
                ],
                "type": "fptr"
            },
            "get_source": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_string_visitor_t"
                    ]
                ],
                "decl": "void (*get_source) (struct _cef_frame_t *, struct _cef_string_visitor_t *)",
                "name": "get_source",
                "ret": "void",
                "type": "fptr"
            },
            "get_text": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_string_visitor_t"
                    ]
                ],
                "decl": "void (*get_text) (struct _cef_frame_t *, struct _cef_string_visitor_t *)",
                "name": "get_text",
                "ret": "void",
                "type": "fptr"
            },
            "get_url": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_frame_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_v8context": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "struct _cef_v8context_t * (*get_v8context) (struct _cef_frame_t *)",
                "name": "get_v8context",
                "ret": [
                    "_cef_v8context_t"
                ],
                "type": "fptr"
            },
            "is_focused": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "int (*is_focused) (struct _cef_frame_t *)",
                "name": "is_focused",
                "ret": "int",
                "type": "fptr"
            },
            "is_main": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "int (*is_main) (struct _cef_frame_t *)",
                "name": "is_main",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_frame_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "load_request": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "void (*load_request) (struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "load_request",
                "ret": "void",
                "type": "fptr"
            },
            "load_url": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*load_url) (struct _cef_frame_t *, const cef_string_t *)",
                "name": "load_url",
                "ret": "void",
                "type": "fptr"
            },
            "paste": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*paste) (struct _cef_frame_t *)",
                "name": "paste",
                "ret": "void",
                "type": "fptr"
            },
            "redo": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*redo) (struct _cef_frame_t *)",
                "name": "redo",
                "ret": "void",
                "type": "fptr"
            },
            "select_all": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*select_all) (struct _cef_frame_t *)",
                "name": "select_all",
                "ret": "void",
                "type": "fptr"
            },
            "send_process_message": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "void (*send_process_message) (struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "send_process_message",
                "ret": "void",
                "type": "fptr"
            },
            "undo": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*undo) (struct _cef_frame_t *)",
                "name": "undo",
                "ret": "void",
                "type": "fptr"
            },
            "view_source": {
                "args": [
                    [
                        "_cef_frame_t"
                    ]
                ],
                "decl": "void (*view_source) (struct _cef_frame_t *)",
                "name": "view_source",
                "ret": "void",
                "type": "fptr"
            },
            "visit_dom": {
                "args": [
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_domvisitor_t"
                    ]
                ],
                "decl": "void (*visit_dom) (struct _cef_frame_t *, struct _cef_domvisitor_t *)",
                "name": "visit_dom",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_get_extension_resource_callback_t": {
        "name": "cef_get_extension_resource_callback_t",
        "path": "include/capi/cef_extension_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_get_extension_resource_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_get_extension_resource_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_get_extension_resource_callback_t"
                    ],
                    [
                        "_cef_stream_reader_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_get_extension_resource_callback_t *, struct _cef_stream_reader_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_image_t": {
        "name": "cef_image_t",
        "path": "include/capi/cef_image_capi.h",
        "props": {
            "add_bitmap": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    "int",
                    "int",
                    "cef_color_type_t",
                    "cef_alpha_type_t",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "int (*add_bitmap) (struct _cef_image_t *, float, int, int, cef_color_type_t, cef_alpha_type_t, const void *, size_t)",
                "name": "add_bitmap",
                "ret": "int",
                "type": "fptr"
            },
            "add_jpeg": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "int (*add_jpeg) (struct _cef_image_t *, float, const void *, size_t)",
                "name": "add_jpeg",
                "ret": "int",
                "type": "fptr"
            },
            "add_png": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "int (*add_png) (struct _cef_image_t *, float, const void *, size_t)",
                "name": "add_png",
                "ret": "int",
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "get_as_bitmap": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    "cef_color_type_t",
                    "cef_alpha_type_t",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_bitmap) (struct _cef_image_t *, float, cef_color_type_t, cef_alpha_type_t, int *, int *)",
                "name": "get_as_bitmap",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_as_jpeg": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_jpeg) (struct _cef_image_t *, float, int, int *, int *)",
                "name": "get_as_jpeg",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_as_png": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_png) (struct _cef_image_t *, float, int, int *, int *)",
                "name": "get_as_png",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_height": {
                "args": [
                    [
                        "_cef_image_t"
                    ]
                ],
                "decl": "size_t (*get_height) (struct _cef_image_t *)",
                "name": "get_height",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_representation_info": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float",
                    [
                        "float"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*get_representation_info) (struct _cef_image_t *, float, float *, int *, int *)",
                "name": "get_representation_info",
                "ret": "int",
                "type": "fptr"
            },
            "get_width": {
                "args": [
                    [
                        "_cef_image_t"
                    ]
                ],
                "decl": "size_t (*get_width) (struct _cef_image_t *)",
                "name": "get_width",
                "ret": "size_t",
                "type": "fptr"
            },
            "has_representation": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float"
                ],
                "decl": "int (*has_representation) (struct _cef_image_t *, float)",
                "name": "has_representation",
                "ret": "int",
                "type": "fptr"
            },
            "is_empty": {
                "args": [
                    [
                        "_cef_image_t"
                    ]
                ],
                "decl": "int (*is_empty) (struct _cef_image_t *)",
                "name": "is_empty",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    [
                        "_cef_image_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_image_t *, struct _cef_image_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "remove_representation": {
                "args": [
                    [
                        "_cef_image_t"
                    ],
                    "float"
                ],
                "decl": "int (*remove_representation) (struct _cef_image_t *, float)",
                "name": "remove_representation",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_insets_t": {
        "name": "cef_insets_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "bottom": "int",
            "left": "int",
            "right": "int",
            "top": "int"
        }
    },
    "_cef_jsdialog_callback_t": {
        "name": "cef_jsdialog_callback_t",
        "path": "include/capi/cef_jsdialog_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cont": {
                "args": [
                    [
                        "_cef_jsdialog_callback_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_jsdialog_callback_t *, int, const cef_string_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_jsdialog_handler_t": {
        "name": "cef_jsdialog_handler_t",
        "path": "include/capi/cef_jsdialog_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_before_unload_dialog": {
                "args": [
                    [
                        "_cef_jsdialog_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "_cef_jsdialog_callback_t"
                    ]
                ],
                "decl": "int (*on_before_unload_dialog) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *, const cef_string_t *, int, struct _cef_jsdialog_callback_t *)",
                "name": "on_before_unload_dialog",
                "ret": "int",
                "type": "fptr"
            },
            "on_dialog_closed": {
                "args": [
                    [
                        "_cef_jsdialog_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_dialog_closed) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *)",
                "name": "on_dialog_closed",
                "ret": "void",
                "type": "fptr"
            },
            "on_jsdialog": {
                "args": [
                    [
                        "_cef_jsdialog_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_jsdialog_type_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_jsdialog_callback_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*on_jsdialog) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *, const cef_string_t *, cef_jsdialog_type_t, const cef_string_t *, const cef_string_t *, struct _cef_jsdialog_callback_t *, int *)",
                "name": "on_jsdialog",
                "ret": "int",
                "type": "fptr"
            },
            "on_reset_dialog_state": {
                "args": [
                    [
                        "_cef_jsdialog_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_reset_dialog_state) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *)",
                "name": "on_reset_dialog_state",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_key_event_t": {
        "name": "cef_key_event_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "character": "char16",
            "focus_on_editable_field": "int",
            "is_system_key": "int",
            "modifiers": "uint32",
            "native_key_code": "int",
            "type": "cef_key_event_type_t",
            "unmodified_character": "char16",
            "windows_key_code": "int"
        }
    },
    "_cef_keyboard_handler_t": {
        "name": "cef_keyboard_handler_t",
        "path": "include/capi/cef_keyboard_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_key_event": {
                "args": [
                    [
                        "_cef_keyboard_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_key_event_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "decl": "int (*on_key_event) (struct _cef_keyboard_handler_t *, struct _cef_browser_t *, const struct _cef_key_event_t *, void *)",
                "name": "on_key_event",
                "ret": "int",
                "type": "fptr"
            },
            "on_pre_key_event": {
                "args": [
                    [
                        "_cef_keyboard_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_key_event_t"
                    ],
                    [
                        "void"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*on_pre_key_event) (struct _cef_keyboard_handler_t *, struct _cef_browser_t *, const struct _cef_key_event_t *, void *, int *)",
                "name": "on_pre_key_event",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_life_span_handler_t": {
        "name": "cef_life_span_handler_t",
        "path": "include/capi/cef_life_span_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "do_close": {
                "args": [
                    [
                        "_cef_life_span_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "int (*do_close) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "do_close",
                "ret": "int",
                "type": "fptr"
            },
            "on_after_created": {
                "args": [
                    [
                        "_cef_life_span_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_after_created) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "on_after_created",
                "ret": "void",
                "type": "fptr"
            },
            "on_before_close": {
                "args": [
                    [
                        "_cef_life_span_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_before_close) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "on_before_close",
                "ret": "void",
                "type": "fptr"
            },
            "on_before_popup": {
                "args": [
                    [
                        "_cef_life_span_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_window_open_disposition_t",
                    "int",
                    [
                        "_cef_popup_features_t"
                    ],
                    [
                        "_cef_window_info_t"
                    ],
                    [
                        [
                            "_cef_client_t"
                        ]
                    ],
                    [
                        "_cef_browser_settings_t"
                    ],
                    [
                        [
                            "_cef_dictionary_value_t"
                        ]
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*on_before_popup) (struct _cef_life_span_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, const cef_string_t *, cef_window_open_disposition_t, int, const struct _cef_popup_features_t *, struct _cef_window_info_t *, struct _cef_client_t **, struct _cef_browser_settings_t *, struct _cef_dictionary_value_t **, int *)",
                "name": "on_before_popup",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_list_value_t": {
        "name": "cef_list_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "clear": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*clear) (struct _cef_list_value_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            "copy": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "struct _cef_list_value_t * (*copy) (struct _cef_list_value_t *)",
                "name": "copy",
                "ret": [
                    "_cef_list_value_t"
                ],
                "type": "fptr"
            },
            "get_binary": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_list_value_t *, size_t)",
                "name": "get_binary",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_bool": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "int (*get_bool) (struct _cef_list_value_t *, size_t)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            "get_dictionary": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_list_value_t *, size_t)",
                "name": "get_dictionary",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_double": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "double (*get_double) (struct _cef_list_value_t *, size_t)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            "get_int": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "int (*get_int) (struct _cef_list_value_t *, size_t)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            "get_list": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_list_value_t *, size_t)",
                "name": "get_list",
                "ret": [
                    "_cef_list_value_t"
                ],
                "type": "fptr"
            },
            "get_size": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "size_t (*get_size) (struct _cef_list_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_string": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_list_value_t *, size_t)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_list_value_t *, size_t)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            "get_value": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "struct _cef_value_t * (*get_value) (struct _cef_list_value_t *, size_t)",
                "name": "get_value",
                "ret": [
                    "_cef_value_t"
                ],
                "type": "fptr"
            },
            "is_equal": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*is_equal) (struct _cef_list_value_t *, struct _cef_list_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            "is_owned": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*is_owned) (struct _cef_list_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_list_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_list_value_t *, struct _cef_list_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_list_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "remove": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "int (*remove) (struct _cef_list_value_t *, size_t)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            "set_binary": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*set_binary) (struct _cef_list_value_t *, size_t, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            "set_bool": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    "int"
                ],
                "decl": "int (*set_bool) (struct _cef_list_value_t *, size_t, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            "set_dictionary": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*set_dictionary) (struct _cef_list_value_t *, size_t, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            "set_double": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    "double"
                ],
                "decl": "int (*set_double) (struct _cef_list_value_t *, size_t, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            "set_int": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    "int"
                ],
                "decl": "int (*set_int) (struct _cef_list_value_t *, size_t, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            "set_list": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*set_list) (struct _cef_list_value_t *, size_t, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            },
            "set_null": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "int (*set_null) (struct _cef_list_value_t *, size_t)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            "set_size": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t"
                ],
                "decl": "int (*set_size) (struct _cef_list_value_t *, size_t)",
                "name": "set_size",
                "ret": "int",
                "type": "fptr"
            },
            "set_string": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_string) (struct _cef_list_value_t *, size_t, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            },
            "set_value": {
                "args": [
                    [
                        "_cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*set_value) (struct _cef_list_value_t *, size_t, struct _cef_value_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_load_handler_t": {
        "name": "cef_load_handler_t",
        "path": "include/capi/cef_load_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_load_end": {
                "args": [
                    [
                        "_cef_load_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_load_end) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, int)",
                "name": "on_load_end",
                "ret": "void",
                "type": "fptr"
            },
            "on_load_error": {
                "args": [
                    [
                        "_cef_load_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "cef_errorcode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_load_error) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_errorcode_t, const cef_string_t *, const cef_string_t *)",
                "name": "on_load_error",
                "ret": "void",
                "type": "fptr"
            },
            "on_load_start": {
                "args": [
                    [
                        "_cef_load_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "cef_transition_type_t"
                ],
                "decl": "void (*on_load_start) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_transition_type_t)",
                "name": "on_load_start",
                "ret": "void",
                "type": "fptr"
            },
            "on_loading_state_change": {
                "args": [
                    [
                        "_cef_load_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    "int",
                    "int"
                ],
                "decl": "void (*on_loading_state_change) (struct _cef_load_handler_t *, struct _cef_browser_t *, int, int, int)",
                "name": "on_loading_state_change",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_main_args_t": {
        "name": "cef_main_args_t",
        "path": "include/internal/cef_types_mac.h",
        "props": {
            "argc": "int",
            "argv": [
                [
                    "char"
                ]
            ]
        }
    },
    "_cef_media_observer_t": {
        "name": "cef_media_observer_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_route_message_received": {
                "args": [
                    [
                        "_cef_media_observer_t"
                    ],
                    [
                        "_cef_media_route_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "void (*on_route_message_received) (struct _cef_media_observer_t *, struct _cef_media_route_t *, const void *, size_t)",
                "name": "on_route_message_received",
                "ret": "void",
                "type": "fptr"
            },
            "on_route_state_changed": {
                "args": [
                    [
                        "_cef_media_observer_t"
                    ],
                    [
                        "_cef_media_route_t"
                    ],
                    "cef_media_route_connection_state_t"
                ],
                "decl": "void (*on_route_state_changed) (struct _cef_media_observer_t *, struct _cef_media_route_t *, cef_media_route_connection_state_t)",
                "name": "on_route_state_changed",
                "ret": "void",
                "type": "fptr"
            },
            "on_routes": {
                "args": [
                    [
                        "_cef_media_observer_t"
                    ],
                    "size_t",
                    [
                        [
                            "_cef_media_route_t"
                        ]
                    ]
                ],
                "decl": "void (*on_routes) (struct _cef_media_observer_t *, size_t, struct _cef_media_route_t *const *)",
                "name": "on_routes",
                "ret": "void",
                "type": "fptr"
            },
            "on_sinks": {
                "args": [
                    [
                        "_cef_media_observer_t"
                    ],
                    "size_t",
                    [
                        [
                            "_cef_media_sink_t"
                        ]
                    ]
                ],
                "decl": "void (*on_sinks) (struct _cef_media_observer_t *, size_t, struct _cef_media_sink_t *const *)",
                "name": "on_sinks",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_media_route_create_callback_t": {
        "name": "cef_media_route_create_callback_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_media_route_create_finished": {
                "args": [
                    [
                        "_cef_media_route_create_callback_t"
                    ],
                    "cef_media_route_create_result_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_media_route_t"
                    ]
                ],
                "decl": "void (*on_media_route_create_finished) (struct _cef_media_route_create_callback_t *, cef_media_route_create_result_t, const cef_string_t *, struct _cef_media_route_t *)",
                "name": "on_media_route_create_finished",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_media_route_t": {
        "name": "cef_media_route_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_id": {
                "args": [
                    [
                        "_cef_media_route_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_route_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_sink": {
                "args": [
                    [
                        "_cef_media_route_t"
                    ]
                ],
                "decl": "struct _cef_media_sink_t * (*get_sink) (struct _cef_media_route_t *)",
                "name": "get_sink",
                "ret": [
                    "_cef_media_sink_t"
                ],
                "type": "fptr"
            },
            "get_source": {
                "args": [
                    [
                        "_cef_media_route_t"
                    ]
                ],
                "decl": "struct _cef_media_source_t * (*get_source) (struct _cef_media_route_t *)",
                "name": "get_source",
                "ret": [
                    "_cef_media_source_t"
                ],
                "type": "fptr"
            },
            "send_route_message": {
                "args": [
                    [
                        "_cef_media_route_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "decl": "void (*send_route_message) (struct _cef_media_route_t *, const void *, size_t)",
                "name": "send_route_message",
                "ret": "void",
                "type": "fptr"
            },
            "terminate": {
                "args": [
                    [
                        "_cef_media_route_t"
                    ]
                ],
                "decl": "void (*terminate) (struct _cef_media_route_t *)",
                "name": "terminate",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_media_router_t": {
        "name": "cef_media_router_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "add_observer": {
                "args": [
                    [
                        "_cef_media_router_t"
                    ],
                    [
                        "_cef_media_observer_t"
                    ]
                ],
                "decl": "struct _cef_registration_t * (*add_observer) (struct _cef_media_router_t *, struct _cef_media_observer_t *)",
                "name": "add_observer",
                "ret": [
                    "_cef_registration_t"
                ],
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "create_route": {
                "args": [
                    [
                        "_cef_media_router_t"
                    ],
                    [
                        "_cef_media_source_t"
                    ],
                    [
                        "_cef_media_sink_t"
                    ],
                    [
                        "_cef_media_route_create_callback_t"
                    ]
                ],
                "decl": "void (*create_route) (struct _cef_media_router_t *, struct _cef_media_source_t *, struct _cef_media_sink_t *, struct _cef_media_route_create_callback_t *)",
                "name": "create_route",
                "ret": "void",
                "type": "fptr"
            },
            "get_source": {
                "args": [
                    [
                        "_cef_media_router_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_media_source_t * (*get_source) (struct _cef_media_router_t *, const cef_string_t *)",
                "name": "get_source",
                "ret": [
                    "_cef_media_source_t"
                ],
                "type": "fptr"
            },
            "notify_current_routes": {
                "args": [
                    [
                        "_cef_media_router_t"
                    ]
                ],
                "decl": "void (*notify_current_routes) (struct _cef_media_router_t *)",
                "name": "notify_current_routes",
                "ret": "void",
                "type": "fptr"
            },
            "notify_current_sinks": {
                "args": [
                    [
                        "_cef_media_router_t"
                    ]
                ],
                "decl": "void (*notify_current_sinks) (struct _cef_media_router_t *)",
                "name": "notify_current_sinks",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_media_sink_device_info_callback_t": {
        "name": "cef_media_sink_device_info_callback_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_media_sink_device_info": {
                "args": [
                    [
                        "_cef_media_sink_device_info_callback_t"
                    ],
                    [
                        "_cef_media_sink_device_info_t"
                    ]
                ],
                "decl": "void (*on_media_sink_device_info) (struct _cef_media_sink_device_info_callback_t *, const struct _cef_media_sink_device_info_t *)",
                "name": "on_media_sink_device_info",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_media_sink_device_info_t": {
        "name": "cef_media_sink_device_info_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "ip_address": "cef_string_t",
            "model_name": "cef_string_t",
            "port": "int"
        }
    },
    "_cef_media_sink_t": {
        "name": "cef_media_sink_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_description": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_description) (struct _cef_media_sink_t *)",
                "name": "get_description",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_device_info": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ],
                    [
                        "_cef_media_sink_device_info_callback_t"
                    ]
                ],
                "decl": "void (*get_device_info) (struct _cef_media_sink_t *, struct _cef_media_sink_device_info_callback_t *)",
                "name": "get_device_info",
                "ret": "void",
                "type": "fptr"
            },
            "get_icon_type": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "cef_media_sink_icon_type_t (*get_icon_type) (struct _cef_media_sink_t *)",
                "name": "get_icon_type",
                "ret": "cef_media_sink_icon_type_t",
                "type": "fptr"
            },
            "get_id": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_sink_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_name": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_media_sink_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_cast_sink": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "int (*is_cast_sink) (struct _cef_media_sink_t *)",
                "name": "is_cast_sink",
                "ret": "int",
                "type": "fptr"
            },
            "is_compatible_with": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ],
                    [
                        "_cef_media_source_t"
                    ]
                ],
                "decl": "int (*is_compatible_with) (struct _cef_media_sink_t *, struct _cef_media_source_t *)",
                "name": "is_compatible_with",
                "ret": "int",
                "type": "fptr"
            },
            "is_dial_sink": {
                "args": [
                    [
                        "_cef_media_sink_t"
                    ]
                ],
                "decl": "int (*is_dial_sink) (struct _cef_media_sink_t *)",
                "name": "is_dial_sink",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_media_source_t": {
        "name": "cef_media_source_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_id": {
                "args": [
                    [
                        "_cef_media_source_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_source_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_cast_source": {
                "args": [
                    [
                        "_cef_media_source_t"
                    ]
                ],
                "decl": "int (*is_cast_source) (struct _cef_media_source_t *)",
                "name": "is_cast_source",
                "ret": "int",
                "type": "fptr"
            },
            "is_dial_source": {
                "args": [
                    [
                        "_cef_media_source_t"
                    ]
                ],
                "decl": "int (*is_dial_source) (struct _cef_media_source_t *)",
                "name": "is_dial_source",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_menu_model_delegate_t": {
        "name": "cef_menu_model_delegate_t",
        "path": "include/capi/cef_menu_model_delegate_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "execute_command": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "decl": "void (*execute_command) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int, cef_event_flags_t)",
                "name": "execute_command",
                "ret": "void",
                "type": "fptr"
            },
            "format_label": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*format_label) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, cef_string_t *)",
                "name": "format_label",
                "ret": "int",
                "type": "fptr"
            },
            "menu_closed": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "void (*menu_closed) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *)",
                "name": "menu_closed",
                "ret": "void",
                "type": "fptr"
            },
            "menu_will_show": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "void (*menu_will_show) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *)",
                "name": "menu_will_show",
                "ret": "void",
                "type": "fptr"
            },
            "mouse_outside_menu": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    [
                        "const cef_point_t"
                    ]
                ],
                "decl": "void (*mouse_outside_menu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, const cef_point_t *)",
                "name": "mouse_outside_menu",
                "ret": "void",
                "type": "fptr"
            },
            "unhandled_close_submenu": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "void (*unhandled_close_submenu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int)",
                "name": "unhandled_close_submenu",
                "ret": "void",
                "type": "fptr"
            },
            "unhandled_open_submenu": {
                "args": [
                    [
                        "_cef_menu_model_delegate_t"
                    ],
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "void (*unhandled_open_submenu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int)",
                "name": "unhandled_open_submenu",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_menu_model_t": {
        "name": "cef_menu_model_t",
        "path": "include/capi/cef_menu_model_capi.h",
        "props": {
            "add_check_item": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*add_check_item) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_check_item",
                "ret": "int",
                "type": "fptr"
            },
            "add_item": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*add_item) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_item",
                "ret": "int",
                "type": "fptr"
            },
            "add_radio_item": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*add_radio_item) (struct _cef_menu_model_t *, int, const cef_string_t *, int)",
                "name": "add_radio_item",
                "ret": "int",
                "type": "fptr"
            },
            "add_separator": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "int (*add_separator) (struct _cef_menu_model_t *)",
                "name": "add_separator",
                "ret": "int",
                "type": "fptr"
            },
            "add_sub_menu": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_menu_model_t * (*add_sub_menu) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_sub_menu",
                "ret": [
                    "_cef_menu_model_t"
                ],
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "clear": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "int (*clear) (struct _cef_menu_model_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            "get_accelerator": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*get_accelerator) (struct _cef_menu_model_t *, int, int *, int *, int *, int *)",
                "name": "get_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            "get_accelerator_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*get_accelerator_at) (struct _cef_menu_model_t *, int, int *, int *, int *, int *)",
                "name": "get_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            "get_color": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    [
                        "cef_color_t"
                    ]
                ],
                "decl": "int (*get_color) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t *)",
                "name": "get_color",
                "ret": "int",
                "type": "fptr"
            },
            "get_color_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    [
                        "cef_color_t"
                    ]
                ],
                "decl": "int (*get_color_at) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t *)",
                "name": "get_color_at",
                "ret": "int",
                "type": "fptr"
            },
            "get_command_id_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*get_command_id_at) (struct _cef_menu_model_t *, int)",
                "name": "get_command_id_at",
                "ret": "int",
                "type": "fptr"
            },
            "get_count": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "int (*get_count) (struct _cef_menu_model_t *)",
                "name": "get_count",
                "ret": "int",
                "type": "fptr"
            },
            "get_group_id": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*get_group_id) (struct _cef_menu_model_t *, int)",
                "name": "get_group_id",
                "ret": "int",
                "type": "fptr"
            },
            "get_group_id_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*get_group_id_at) (struct _cef_menu_model_t *, int)",
                "name": "get_group_id_at",
                "ret": "int",
                "type": "fptr"
            },
            "get_index_of": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*get_index_of) (struct _cef_menu_model_t *, int)",
                "name": "get_index_of",
                "ret": "int",
                "type": "fptr"
            },
            "get_label": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "cef_string_userfree_t (*get_label) (struct _cef_menu_model_t *, int)",
                "name": "get_label",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_label_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "cef_string_userfree_t (*get_label_at) (struct _cef_menu_model_t *, int)",
                "name": "get_label_at",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_sub_menu": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_menu_model_t * (*get_sub_menu) (struct _cef_menu_model_t *, int)",
                "name": "get_sub_menu",
                "ret": [
                    "_cef_menu_model_t"
                ],
                "type": "fptr"
            },
            "get_sub_menu_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_menu_model_t * (*get_sub_menu_at) (struct _cef_menu_model_t *, int)",
                "name": "get_sub_menu_at",
                "ret": [
                    "_cef_menu_model_t"
                ],
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "cef_menu_item_type_t (*get_type) (struct _cef_menu_model_t *, int)",
                "name": "get_type",
                "ret": "cef_menu_item_type_t",
                "type": "fptr"
            },
            "get_type_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "cef_menu_item_type_t (*get_type_at) (struct _cef_menu_model_t *, int)",
                "name": "get_type_at",
                "ret": "cef_menu_item_type_t",
                "type": "fptr"
            },
            "has_accelerator": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*has_accelerator) (struct _cef_menu_model_t *, int)",
                "name": "has_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            "has_accelerator_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*has_accelerator_at) (struct _cef_menu_model_t *, int)",
                "name": "has_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            "insert_check_item_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*insert_check_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_check_item_at",
                "ret": "int",
                "type": "fptr"
            },
            "insert_item_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*insert_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_item_at",
                "ret": "int",
                "type": "fptr"
            },
            "insert_radio_item_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*insert_radio_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *, int)",
                "name": "insert_radio_item_at",
                "ret": "int",
                "type": "fptr"
            },
            "insert_separator_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*insert_separator_at) (struct _cef_menu_model_t *, int)",
                "name": "insert_separator_at",
                "ret": "int",
                "type": "fptr"
            },
            "insert_sub_menu_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_menu_model_t * (*insert_sub_menu_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_sub_menu_at",
                "ret": [
                    "_cef_menu_model_t"
                ],
                "type": "fptr"
            },
            "is_checked": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_checked) (struct _cef_menu_model_t *, int)",
                "name": "is_checked",
                "ret": "int",
                "type": "fptr"
            },
            "is_checked_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_checked_at) (struct _cef_menu_model_t *, int)",
                "name": "is_checked_at",
                "ret": "int",
                "type": "fptr"
            },
            "is_enabled": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_enabled) (struct _cef_menu_model_t *, int)",
                "name": "is_enabled",
                "ret": "int",
                "type": "fptr"
            },
            "is_enabled_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_enabled_at) (struct _cef_menu_model_t *, int)",
                "name": "is_enabled_at",
                "ret": "int",
                "type": "fptr"
            },
            "is_sub_menu": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ]
                ],
                "decl": "int (*is_sub_menu) (struct _cef_menu_model_t *)",
                "name": "is_sub_menu",
                "ret": "int",
                "type": "fptr"
            },
            "is_visible": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_visible) (struct _cef_menu_model_t *, int)",
                "name": "is_visible",
                "ret": "int",
                "type": "fptr"
            },
            "is_visible_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*is_visible_at) (struct _cef_menu_model_t *, int)",
                "name": "is_visible_at",
                "ret": "int",
                "type": "fptr"
            },
            "remove": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*remove) (struct _cef_menu_model_t *, int)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            "remove_accelerator": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*remove_accelerator) (struct _cef_menu_model_t *, int)",
                "name": "remove_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            "remove_accelerator_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*remove_accelerator_at) (struct _cef_menu_model_t *, int)",
                "name": "remove_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            "remove_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int"
                ],
                "decl": "int (*remove_at) (struct _cef_menu_model_t *, int)",
                "name": "remove_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_accelerator": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    "int",
                    "int",
                    "int"
                ],
                "decl": "int (*set_accelerator) (struct _cef_menu_model_t *, int, int, int, int, int)",
                "name": "set_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            "set_accelerator_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    "int",
                    "int",
                    "int"
                ],
                "decl": "int (*set_accelerator_at) (struct _cef_menu_model_t *, int, int, int, int, int)",
                "name": "set_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_checked": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_checked) (struct _cef_menu_model_t *, int, int)",
                "name": "set_checked",
                "ret": "int",
                "type": "fptr"
            },
            "set_checked_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_checked_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_checked_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_color": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    "cef_color_t"
                ],
                "decl": "int (*set_color) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t)",
                "name": "set_color",
                "ret": "int",
                "type": "fptr"
            },
            "set_color_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    "cef_color_t"
                ],
                "decl": "int (*set_color_at) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t)",
                "name": "set_color_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_command_id_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_command_id_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_command_id_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_enabled": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_enabled) (struct _cef_menu_model_t *, int, int)",
                "name": "set_enabled",
                "ret": "int",
                "type": "fptr"
            },
            "set_enabled_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_enabled_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_enabled_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_font_list": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_font_list) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_font_list",
                "ret": "int",
                "type": "fptr"
            },
            "set_font_list_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_font_list_at) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_font_list_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_group_id": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_group_id) (struct _cef_menu_model_t *, int, int)",
                "name": "set_group_id",
                "ret": "int",
                "type": "fptr"
            },
            "set_group_id_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_group_id_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_group_id_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_label": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_label) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_label",
                "ret": "int",
                "type": "fptr"
            },
            "set_label_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_label_at) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_label_at",
                "ret": "int",
                "type": "fptr"
            },
            "set_visible": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_visible) (struct _cef_menu_model_t *, int, int)",
                "name": "set_visible",
                "ret": "int",
                "type": "fptr"
            },
            "set_visible_at": {
                "args": [
                    [
                        "_cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*set_visible_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_visible_at",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_mouse_event_t": {
        "name": "cef_mouse_event_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "modifiers": "uint32",
            "x": "int",
            "y": "int"
        }
    },
    "_cef_navigation_entry_t": {
        "name": "cef_navigation_entry_t",
        "path": "include/capi/cef_navigation_entry_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_completion_time": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_time_t (*get_completion_time) (struct _cef_navigation_entry_t *)",
                "name": "get_completion_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            "get_display_url": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_display_url) (struct _cef_navigation_entry_t *)",
                "name": "get_display_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_http_status_code": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "int (*get_http_status_code) (struct _cef_navigation_entry_t *)",
                "name": "get_http_status_code",
                "ret": "int",
                "type": "fptr"
            },
            "get_original_url": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_original_url) (struct _cef_navigation_entry_t *)",
                "name": "get_original_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_sslstatus": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "struct _cef_sslstatus_t * (*get_sslstatus) (struct _cef_navigation_entry_t *)",
                "name": "get_sslstatus",
                "ret": [
                    "_cef_sslstatus_t"
                ],
                "type": "fptr"
            },
            "get_title": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_title) (struct _cef_navigation_entry_t *)",
                "name": "get_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_transition_type": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_transition_type_t (*get_transition_type) (struct _cef_navigation_entry_t *)",
                "name": "get_transition_type",
                "ret": "cef_transition_type_t",
                "type": "fptr"
            },
            "get_url": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_navigation_entry_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "has_post_data": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "int (*has_post_data) (struct _cef_navigation_entry_t *)",
                "name": "has_post_data",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_navigation_entry_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_navigation_entry_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_pdf_print_settings_t": {
        "name": "cef_pdf_print_settings_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "backgrounds_enabled": "int",
            "header_footer_enabled": "int",
            "header_footer_title": "cef_string_t",
            "header_footer_url": "cef_string_t",
            "landscape": "int",
            "margin_bottom": "int",
            "margin_left": "int",
            "margin_right": "int",
            "margin_top": "int",
            "margin_type": "cef_pdf_print_margin_type_t",
            "page_height": "int",
            "page_width": "int",
            "scale_factor": "int",
            "selection_only": "int"
        }
    },
    "_cef_point_t": {
        "name": "cef_point_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "x": "int",
            "y": "int"
        }
    },
    "_cef_popup_features_t": {
        "name": "cef_popup_features_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "height": "int",
            "heightSet": "int",
            "menuBarVisible": "int",
            "scrollbarsVisible": "int",
            "statusBarVisible": "int",
            "toolBarVisible": "int",
            "width": "int",
            "widthSet": "int",
            "x": "int",
            "xSet": "int",
            "y": "int",
            "ySet": "int"
        }
    },
    "_cef_post_data_element_t": {
        "name": "cef_post_data_element_t",
        "path": "include/capi/cef_request_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_bytes": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ],
                    "size_t",
                    [
                        "void"
                    ]
                ],
                "decl": "size_t (*get_bytes) (struct _cef_post_data_element_t *, size_t, void *)",
                "name": "get_bytes",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_bytes_count": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "size_t (*get_bytes_count) (struct _cef_post_data_element_t *)",
                "name": "get_bytes_count",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_file": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_file) (struct _cef_post_data_element_t *)",
                "name": "get_file",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "cef_postdataelement_type_t (*get_type) (struct _cef_post_data_element_t *)",
                "name": "get_type",
                "ret": "cef_postdataelement_type_t",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_post_data_element_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "set_to_bytes": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ],
                    "size_t",
                    [
                        "const void"
                    ]
                ],
                "decl": "void (*set_to_bytes) (struct _cef_post_data_element_t *, size_t, const void *)",
                "name": "set_to_bytes",
                "ret": "void",
                "type": "fptr"
            },
            "set_to_empty": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "void (*set_to_empty) (struct _cef_post_data_element_t *)",
                "name": "set_to_empty",
                "ret": "void",
                "type": "fptr"
            },
            "set_to_file": {
                "args": [
                    [
                        "_cef_post_data_element_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_to_file) (struct _cef_post_data_element_t *, const cef_string_t *)",
                "name": "set_to_file",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_post_data_t": {
        "name": "cef_post_data_t",
        "path": "include/capi/cef_request_capi.h",
        "props": {
            "add_element": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ],
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "int (*add_element) (struct _cef_post_data_t *, struct _cef_post_data_element_t *)",
                "name": "add_element",
                "ret": "int",
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "get_element_count": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ]
                ],
                "decl": "size_t (*get_element_count) (struct _cef_post_data_t *)",
                "name": "get_element_count",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_elements": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "_cef_post_data_element_t"
                        ]
                    ]
                ],
                "decl": "void (*get_elements) (struct _cef_post_data_t *, size_t *, struct _cef_post_data_element_t **)",
                "name": "get_elements",
                "ret": "void",
                "type": "fptr"
            },
            "has_excluded_elements": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ]
                ],
                "decl": "int (*has_excluded_elements) (struct _cef_post_data_t *)",
                "name": "has_excluded_elements",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_post_data_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "remove_element": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ],
                    [
                        "_cef_post_data_element_t"
                    ]
                ],
                "decl": "int (*remove_element) (struct _cef_post_data_t *, struct _cef_post_data_element_t *)",
                "name": "remove_element",
                "ret": "int",
                "type": "fptr"
            },
            "remove_elements": {
                "args": [
                    [
                        "_cef_post_data_t"
                    ]
                ],
                "decl": "void (*remove_elements) (struct _cef_post_data_t *)",
                "name": "remove_elements",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_print_dialog_callback_t": {
        "name": "cef_print_dialog_callback_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_print_dialog_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_print_dialog_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_print_dialog_callback_t"
                    ],
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_print_dialog_callback_t *, struct _cef_print_settings_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_print_handler_t": {
        "name": "cef_print_handler_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_pdf_paper_size": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    "int"
                ],
                "decl": "cef_size_t (*get_pdf_paper_size) (struct _cef_print_handler_t *, int)",
                "name": "get_pdf_paper_size",
                "ret": "cef_size_t",
                "type": "fptr"
            },
            "on_print_dialog": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    [
                        "_cef_print_dialog_callback_t"
                    ]
                ],
                "decl": "int (*on_print_dialog) (struct _cef_print_handler_t *, struct _cef_browser_t *, int, struct _cef_print_dialog_callback_t *)",
                "name": "on_print_dialog",
                "ret": "int",
                "type": "fptr"
            },
            "on_print_job": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_print_job_callback_t"
                    ]
                ],
                "decl": "int (*on_print_job) (struct _cef_print_handler_t *, struct _cef_browser_t *, const cef_string_t *, const cef_string_t *, struct _cef_print_job_callback_t *)",
                "name": "on_print_job",
                "ret": "int",
                "type": "fptr"
            },
            "on_print_reset": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_print_reset) (struct _cef_print_handler_t *, struct _cef_browser_t *)",
                "name": "on_print_reset",
                "ret": "void",
                "type": "fptr"
            },
            "on_print_settings": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_print_settings) (struct _cef_print_handler_t *, struct _cef_browser_t *, struct _cef_print_settings_t *, int)",
                "name": "on_print_settings",
                "ret": "void",
                "type": "fptr"
            },
            "on_print_start": {
                "args": [
                    [
                        "_cef_print_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_print_start) (struct _cef_print_handler_t *, struct _cef_browser_t *)",
                "name": "on_print_start",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_print_job_callback_t": {
        "name": "cef_print_job_callback_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cont": {
                "args": [
                    [
                        "_cef_print_job_callback_t"
                    ]
                ],
                "decl": "void (*cont) (struct _cef_print_job_callback_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_print_settings_t": {
        "name": "cef_print_settings_t",
        "path": "include/capi/cef_print_settings_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_color_model": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "cef_color_model_t (*get_color_model) (struct _cef_print_settings_t *)",
                "name": "get_color_model",
                "ret": "cef_color_model_t",
                "type": "fptr"
            },
            "get_copies": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*get_copies) (struct _cef_print_settings_t *)",
                "name": "get_copies",
                "ret": "int",
                "type": "fptr"
            },
            "get_device_name": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_device_name) (struct _cef_print_settings_t *)",
                "name": "get_device_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_dpi": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*get_dpi) (struct _cef_print_settings_t *)",
                "name": "get_dpi",
                "ret": "int",
                "type": "fptr"
            },
            "get_duplex_mode": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "cef_duplex_mode_t (*get_duplex_mode) (struct _cef_print_settings_t *)",
                "name": "get_duplex_mode",
                "ret": "cef_duplex_mode_t",
                "type": "fptr"
            },
            "get_page_ranges": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        "cef_range_t"
                    ]
                ],
                "decl": "void (*get_page_ranges) (struct _cef_print_settings_t *, size_t *, cef_range_t *)",
                "name": "get_page_ranges",
                "ret": "void",
                "type": "fptr"
            },
            "get_page_ranges_count": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "size_t (*get_page_ranges_count) (struct _cef_print_settings_t *)",
                "name": "get_page_ranges_count",
                "ret": "size_t",
                "type": "fptr"
            },
            "is_landscape": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*is_landscape) (struct _cef_print_settings_t *)",
                "name": "is_landscape",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_print_settings_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_selection_only": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*is_selection_only) (struct _cef_print_settings_t *)",
                "name": "is_selection_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_print_settings_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "set_collate": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_collate) (struct _cef_print_settings_t *, int)",
                "name": "set_collate",
                "ret": "void",
                "type": "fptr"
            },
            "set_color_model": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "cef_color_model_t"
                ],
                "decl": "void (*set_color_model) (struct _cef_print_settings_t *, cef_color_model_t)",
                "name": "set_color_model",
                "ret": "void",
                "type": "fptr"
            },
            "set_copies": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_copies) (struct _cef_print_settings_t *, int)",
                "name": "set_copies",
                "ret": "void",
                "type": "fptr"
            },
            "set_device_name": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_device_name) (struct _cef_print_settings_t *, const cef_string_t *)",
                "name": "set_device_name",
                "ret": "void",
                "type": "fptr"
            },
            "set_dpi": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_dpi) (struct _cef_print_settings_t *, int)",
                "name": "set_dpi",
                "ret": "void",
                "type": "fptr"
            },
            "set_duplex_mode": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "cef_duplex_mode_t"
                ],
                "decl": "void (*set_duplex_mode) (struct _cef_print_settings_t *, cef_duplex_mode_t)",
                "name": "set_duplex_mode",
                "ret": "void",
                "type": "fptr"
            },
            "set_orientation": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_orientation) (struct _cef_print_settings_t *, int)",
                "name": "set_orientation",
                "ret": "void",
                "type": "fptr"
            },
            "set_page_ranges": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "size_t",
                    [
                        "const cef_range_t"
                    ]
                ],
                "decl": "void (*set_page_ranges) (struct _cef_print_settings_t *, size_t, const cef_range_t *)",
                "name": "set_page_ranges",
                "ret": "void",
                "type": "fptr"
            },
            "set_printer_printable_area": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    [
                        "const cef_size_t"
                    ],
                    [
                        "const cef_rect_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_printer_printable_area) (struct _cef_print_settings_t *, const cef_size_t *, const cef_rect_t *, int)",
                "name": "set_printer_printable_area",
                "ret": "void",
                "type": "fptr"
            },
            "set_selection_only": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_selection_only) (struct _cef_print_settings_t *, int)",
                "name": "set_selection_only",
                "ret": "void",
                "type": "fptr"
            },
            "will_collate": {
                "args": [
                    [
                        "_cef_print_settings_t"
                    ]
                ],
                "decl": "int (*will_collate) (struct _cef_print_settings_t *)",
                "name": "will_collate",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_process_message_t": {
        "name": "cef_process_message_t",
        "path": "include/capi/cef_process_message_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "copy": {
                "args": [
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "struct _cef_process_message_t * (*copy) (struct _cef_process_message_t *)",
                "name": "copy",
                "ret": [
                    "_cef_process_message_t"
                ],
                "type": "fptr"
            },
            "get_argument_list": {
                "args": [
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "struct _cef_list_value_t * (*get_argument_list) (struct _cef_process_message_t *)",
                "name": "get_argument_list",
                "ret": [
                    "_cef_list_value_t"
                ],
                "type": "fptr"
            },
            "get_name": {
                "args": [
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_process_message_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_process_message_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_process_message_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_range_t": {
        "name": "cef_range_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "from": "int",
            "to": "int"
        }
    },
    "_cef_read_handler_t": {
        "name": "cef_read_handler_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "eof": {
                "args": [
                    [
                        "_cef_read_handler_t"
                    ]
                ],
                "decl": "int (*eof) (struct _cef_read_handler_t *)",
                "name": "eof",
                "ret": "int",
                "type": "fptr"
            },
            "may_block": {
                "args": [
                    [
                        "_cef_read_handler_t"
                    ]
                ],
                "decl": "int (*may_block) (struct _cef_read_handler_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            },
            "read": {
                "args": [
                    [
                        "_cef_read_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "decl": "size_t (*read) (struct _cef_read_handler_t *, void *, size_t, size_t)",
                "name": "read",
                "ret": "size_t",
                "type": "fptr"
            },
            "seek": {
                "args": [
                    [
                        "_cef_read_handler_t"
                    ],
                    "int64",
                    "int"
                ],
                "decl": "int (*seek) (struct _cef_read_handler_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            "tell": {
                "args": [
                    [
                        "_cef_read_handler_t"
                    ]
                ],
                "decl": "int64 (*tell) (struct _cef_read_handler_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            }
        }
    },
    "_cef_rect_t": {
        "name": "cef_rect_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "height": "int",
            "width": "int",
            "x": "int",
            "y": "int"
        }
    },
    "_cef_registration_t": {
        "name": "cef_registration_t",
        "path": "include/capi/cef_registration_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t"
        }
    },
    "_cef_render_handler_t": {
        "name": "cef_render_handler_t",
        "path": "include/capi/cef_render_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_accessibility_handler": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ]
                ],
                "decl": "struct _cef_accessibility_handler_t * (*get_accessibility_handler) (struct _cef_render_handler_t *)",
                "name": "get_accessibility_handler",
                "ret": [
                    "_cef_accessibility_handler_t"
                ],
                "type": "fptr"
            },
            "get_root_screen_rect": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "cef_rect_t"
                    ]
                ],
                "decl": "int (*get_root_screen_rect) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_rect_t *)",
                "name": "get_root_screen_rect",
                "ret": "int",
                "type": "fptr"
            },
            "get_screen_info": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_screen_info_t"
                    ]
                ],
                "decl": "int (*get_screen_info) (struct _cef_render_handler_t *, struct _cef_browser_t *, struct _cef_screen_info_t *)",
                "name": "get_screen_info",
                "ret": "int",
                "type": "fptr"
            },
            "get_screen_point": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "int (*get_screen_point) (struct _cef_render_handler_t *, struct _cef_browser_t *, int, int, int *, int *)",
                "name": "get_screen_point",
                "ret": "int",
                "type": "fptr"
            },
            "get_view_rect": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "cef_rect_t"
                    ]
                ],
                "decl": "void (*get_view_rect) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_rect_t *)",
                "name": "get_view_rect",
                "ret": "void",
                "type": "fptr"
            },
            "on_accelerated_paint": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_paint_element_type_t",
                    "size_t",
                    [
                        "const cef_rect_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "decl": "void (*on_accelerated_paint) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_paint_element_type_t, size_t, const cef_rect_t *, void *)",
                "name": "on_accelerated_paint",
                "ret": "void",
                "type": "fptr"
            },
            "on_ime_composition_range_changed": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_range_t"
                    ],
                    "size_t",
                    [
                        "const cef_rect_t"
                    ]
                ],
                "decl": "void (*on_ime_composition_range_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_range_t *, size_t, const cef_rect_t *)",
                "name": "on_ime_composition_range_changed",
                "ret": "void",
                "type": "fptr"
            },
            "on_paint": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_paint_element_type_t",
                    "size_t",
                    [
                        "const cef_rect_t"
                    ],
                    [
                        "const void"
                    ],
                    "int",
                    "int"
                ],
                "decl": "void (*on_paint) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_paint_element_type_t, size_t, const cef_rect_t *, const void *, int, int)",
                "name": "on_paint",
                "ret": "void",
                "type": "fptr"
            },
            "on_popup_show": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_popup_show) (struct _cef_render_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_popup_show",
                "ret": "void",
                "type": "fptr"
            },
            "on_popup_size": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_rect_t"
                    ]
                ],
                "decl": "void (*on_popup_size) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_rect_t *)",
                "name": "on_popup_size",
                "ret": "void",
                "type": "fptr"
            },
            "on_scroll_offset_changed": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "double",
                    "double"
                ],
                "decl": "void (*on_scroll_offset_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, double, double)",
                "name": "on_scroll_offset_changed",
                "ret": "void",
                "type": "fptr"
            },
            "on_text_selection_changed": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_range_t"
                    ]
                ],
                "decl": "void (*on_text_selection_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_string_t *, const cef_range_t *)",
                "name": "on_text_selection_changed",
                "ret": "void",
                "type": "fptr"
            },
            "on_virtual_keyboard_requested": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_text_input_mode_t"
                ],
                "decl": "void (*on_virtual_keyboard_requested) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_text_input_mode_t)",
                "name": "on_virtual_keyboard_requested",
                "ret": "void",
                "type": "fptr"
            },
            "start_dragging": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_drag_data_t"
                    ],
                    "cef_drag_operations_mask_t",
                    "int",
                    "int"
                ],
                "decl": "int (*start_dragging) (struct _cef_render_handler_t *, struct _cef_browser_t *, struct _cef_drag_data_t *, cef_drag_operations_mask_t, int, int)",
                "name": "start_dragging",
                "ret": "int",
                "type": "fptr"
            },
            "update_drag_cursor": {
                "args": [
                    [
                        "_cef_render_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "decl": "void (*update_drag_cursor) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_drag_operations_mask_t)",
                "name": "update_drag_cursor",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_render_process_handler_t": {
        "name": "cef_render_process_handler_t",
        "path": "include/capi/cef_render_process_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_load_handler": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ]
                ],
                "decl": "struct _cef_load_handler_t * (*get_load_handler) (struct _cef_render_process_handler_t *)",
                "name": "get_load_handler",
                "ret": [
                    "_cef_load_handler_t"
                ],
                "type": "fptr"
            },
            "on_browser_created": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "void (*on_browser_created) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_dictionary_value_t *)",
                "name": "on_browser_created",
                "ret": "void",
                "type": "fptr"
            },
            "on_browser_destroyed": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_browser_destroyed) (struct _cef_render_process_handler_t *, struct _cef_browser_t *)",
                "name": "on_browser_destroyed",
                "ret": "void",
                "type": "fptr"
            },
            "on_context_created": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "void (*on_context_created) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *)",
                "name": "on_context_created",
                "ret": "void",
                "type": "fptr"
            },
            "on_context_released": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "void (*on_context_released) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *)",
                "name": "on_context_released",
                "ret": "void",
                "type": "fptr"
            },
            "on_focused_node_changed": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_domnode_t"
                    ]
                ],
                "decl": "void (*on_focused_node_changed) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_domnode_t *)",
                "name": "on_focused_node_changed",
                "ret": "void",
                "type": "fptr"
            },
            "on_process_message_received": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "_cef_process_message_t"
                    ]
                ],
                "decl": "int (*on_process_message_received) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "on_process_message_received",
                "ret": "int",
                "type": "fptr"
            },
            "on_uncaught_exception": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_v8context_t"
                    ],
                    [
                        "_cef_v8exception_t"
                    ],
                    [
                        "_cef_v8stack_trace_t"
                    ]
                ],
                "decl": "void (*on_uncaught_exception) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *, struct _cef_v8exception_t *, struct _cef_v8stack_trace_t *)",
                "name": "on_uncaught_exception",
                "ret": "void",
                "type": "fptr"
            },
            "on_web_kit_initialized": {
                "args": [
                    [
                        "_cef_render_process_handler_t"
                    ]
                ],
                "decl": "void (*on_web_kit_initialized) (struct _cef_render_process_handler_t *)",
                "name": "on_web_kit_initialized",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_request_callback_t": {
        "name": "cef_request_callback_t",
        "path": "include/capi/cef_request_callback_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_request_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_request_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_request_callback_t"
                    ],
                    "int"
                ],
                "decl": "void (*cont) (struct _cef_request_callback_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_request_context_settings_t": {
        "name": "cef_request_context_settings_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "accept_language_list": "cef_string_t",
            "cache_path": "cef_string_t",
            "ignore_certificate_errors": "int",
            "persist_session_cookies": "int",
            "persist_user_preferences": "int",
            "size": "size_t"
        }
    },
    "_cef_request_context_t": {
        "name": "cef_request_context_t",
        "path": "include/capi/cef_request_context_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "can_set_preference": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*can_set_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "can_set_preference",
                "ret": "int",
                "type": "fptr"
            },
            "clear_certificate_exceptions": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "void (*clear_certificate_exceptions) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "clear_certificate_exceptions",
                "ret": "void",
                "type": "fptr"
            },
            "clear_http_auth_credentials": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "void (*clear_http_auth_credentials) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "clear_http_auth_credentials",
                "ret": "void",
                "type": "fptr"
            },
            "clear_scheme_handler_factories": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "int (*clear_scheme_handler_factories) (struct _cef_request_context_t *)",
                "name": "clear_scheme_handler_factories",
                "ret": "int",
                "type": "fptr"
            },
            "close_all_connections": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "void (*close_all_connections) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "close_all_connections",
                "ret": "void",
                "type": "fptr"
            },
            "did_load_extension": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*did_load_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "did_load_extension",
                "ret": "int",
                "type": "fptr"
            },
            "get_all_preferences": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_all_preferences) (struct _cef_request_context_t *, int)",
                "name": "get_all_preferences",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_cache_path": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_cache_path) (struct _cef_request_context_t *)",
                "name": "get_cache_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_cookie_manager": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_completion_callback_t"
                    ]
                ],
                "decl": "struct _cef_cookie_manager_t * (*get_cookie_manager) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "get_cookie_manager",
                "ret": [
                    "_cef_cookie_manager_t"
                ],
                "type": "fptr"
            },
            "get_extension": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_extension_t * (*get_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "get_extension",
                "ret": [
                    "_cef_extension_t"
                ],
                "type": "fptr"
            },
            "get_extensions": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "int (*get_extensions) (struct _cef_request_context_t *, cef_string_list_t)",
                "name": "get_extensions",
                "ret": "int",
                "type": "fptr"
            },
            "get_handler": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "struct _cef_request_context_handler_t * (*get_handler) (struct _cef_request_context_t *)",
                "name": "get_handler",
                "ret": [
                    "_cef_request_context_handler_t"
                ],
                "type": "fptr"
            },
            "get_media_router": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "struct _cef_media_router_t * (*get_media_router) (struct _cef_request_context_t *)",
                "name": "get_media_router",
                "ret": [
                    "_cef_media_router_t"
                ],
                "type": "fptr"
            },
            "get_preference": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_value_t * (*get_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "get_preference",
                "ret": [
                    "_cef_value_t"
                ],
                "type": "fptr"
            },
            "has_extension": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "has_extension",
                "ret": "int",
                "type": "fptr"
            },
            "has_preference": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "has_preference",
                "ret": "int",
                "type": "fptr"
            },
            "is_global": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "int (*is_global) (struct _cef_request_context_t *)",
                "name": "is_global",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_request_context_t *, struct _cef_request_context_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_sharing_with": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "_cef_request_context_t"
                    ]
                ],
                "decl": "int (*is_sharing_with) (struct _cef_request_context_t *, struct _cef_request_context_t *)",
                "name": "is_sharing_with",
                "ret": "int",
                "type": "fptr"
            },
            "load_extension": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ],
                    [
                        "_cef_extension_handler_t"
                    ]
                ],
                "decl": "void (*load_extension) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_dictionary_value_t *, struct _cef_extension_handler_t *)",
                "name": "load_extension",
                "ret": "void",
                "type": "fptr"
            },
            "purge_plugin_list_cache": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    "int"
                ],
                "decl": "void (*purge_plugin_list_cache) (struct _cef_request_context_t *, int)",
                "name": "purge_plugin_list_cache",
                "ret": "void",
                "type": "fptr"
            },
            "register_scheme_handler_factory": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_scheme_handler_factory_t"
                    ]
                ],
                "decl": "int (*register_scheme_handler_factory) (struct _cef_request_context_t *, const cef_string_t *, const cef_string_t *, struct _cef_scheme_handler_factory_t *)",
                "name": "register_scheme_handler_factory",
                "ret": "int",
                "type": "fptr"
            },
            "resolve_host": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_resolve_callback_t"
                    ]
                ],
                "decl": "void (*resolve_host) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_resolve_callback_t *)",
                "name": "resolve_host",
                "ret": "void",
                "type": "fptr"
            },
            "set_preference": {
                "args": [
                    [
                        "_cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*set_preference) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_value_t *, cef_string_t *)",
                "name": "set_preference",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_request_handler_t": {
        "name": "cef_request_handler_t",
        "path": "include/capi/cef_request_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_auth_credentials": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_auth_callback_t"
                    ]
                ],
                "decl": "int (*get_auth_credentials) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *, int, const cef_string_t *, int, const cef_string_t *, const cef_string_t *, struct _cef_auth_callback_t *)",
                "name": "get_auth_credentials",
                "ret": "int",
                "type": "fptr"
            },
            "get_resource_request_handler": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "struct _cef_resource_request_handler_t * (*get_resource_request_handler) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int, int, const cef_string_t *, int *)",
                "name": "get_resource_request_handler",
                "ret": [
                    "_cef_resource_request_handler_t"
                ],
                "type": "fptr"
            },
            "on_before_browse": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    "int",
                    "int"
                ],
                "decl": "int (*on_before_browse) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int, int)",
                "name": "on_before_browse",
                "ret": "int",
                "type": "fptr"
            },
            "on_certificate_error": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_errorcode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_sslinfo_t"
                    ],
                    [
                        "_cef_request_callback_t"
                    ]
                ],
                "decl": "int (*on_certificate_error) (struct _cef_request_handler_t *, struct _cef_browser_t *, cef_errorcode_t, const cef_string_t *, struct _cef_sslinfo_t *, struct _cef_request_callback_t *)",
                "name": "on_certificate_error",
                "ret": "int",
                "type": "fptr"
            },
            "on_document_available_in_main_frame": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_document_available_in_main_frame) (struct _cef_request_handler_t *, struct _cef_browser_t *)",
                "name": "on_document_available_in_main_frame",
                "ret": "void",
                "type": "fptr"
            },
            "on_open_urlfrom_tab": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_window_open_disposition_t",
                    "int"
                ],
                "decl": "int (*on_open_urlfrom_tab) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, cef_window_open_disposition_t, int)",
                "name": "on_open_urlfrom_tab",
                "ret": "int",
                "type": "fptr"
            },
            "on_plugin_crashed": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*on_plugin_crashed) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_plugin_crashed",
                "ret": "void",
                "type": "fptr"
            },
            "on_quota_request": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int64",
                    [
                        "_cef_request_callback_t"
                    ]
                ],
                "decl": "int (*on_quota_request) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *, int64, struct _cef_request_callback_t *)",
                "name": "on_quota_request",
                "ret": "int",
                "type": "fptr"
            },
            "on_render_process_terminated": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "cef_termination_status_t"
                ],
                "decl": "void (*on_render_process_terminated) (struct _cef_request_handler_t *, struct _cef_browser_t *, cef_termination_status_t)",
                "name": "on_render_process_terminated",
                "ret": "void",
                "type": "fptr"
            },
            "on_render_view_ready": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ]
                ],
                "decl": "void (*on_render_view_ready) (struct _cef_request_handler_t *, struct _cef_browser_t *)",
                "name": "on_render_view_ready",
                "ret": "void",
                "type": "fptr"
            },
            "on_select_client_certificate": {
                "args": [
                    [
                        "_cef_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    "size_t",
                    [
                        [
                            "_cef_x509certificate_t"
                        ]
                    ],
                    [
                        "_cef_select_client_certificate_callback_t"
                    ]
                ],
                "decl": "int (*on_select_client_certificate) (struct _cef_request_handler_t *, struct _cef_browser_t *, int, const cef_string_t *, int, size_t, struct _cef_x509certificate_t *const *, struct _cef_select_client_certificate_callback_t *)",
                "name": "on_select_client_certificate",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_request_t": {
        "name": "cef_request_t",
        "path": "include/capi/cef_request_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_first_party_for_cookies": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_first_party_for_cookies) (struct _cef_request_t *)",
                "name": "get_first_party_for_cookies",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_flags": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "int (*get_flags) (struct _cef_request_t *)",
                "name": "get_flags",
                "ret": "int",
                "type": "fptr"
            },
            "get_header_by_name": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_header_by_name) (struct _cef_request_t *, const cef_string_t *)",
                "name": "get_header_by_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_header_map": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "decl": "void (*get_header_map) (struct _cef_request_t *, cef_string_multimap_t)",
                "name": "get_header_map",
                "ret": "void",
                "type": "fptr"
            },
            "get_identifier": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "uint64 (*get_identifier) (struct _cef_request_t *)",
                "name": "get_identifier",
                "ret": "uint64",
                "type": "fptr"
            },
            "get_method": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_method) (struct _cef_request_t *)",
                "name": "get_method",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_post_data": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "struct _cef_post_data_t * (*get_post_data) (struct _cef_request_t *)",
                "name": "get_post_data",
                "ret": [
                    "_cef_post_data_t"
                ],
                "type": "fptr"
            },
            "get_referrer_policy": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_referrer_policy_t (*get_referrer_policy) (struct _cef_request_t *)",
                "name": "get_referrer_policy",
                "ret": "cef_referrer_policy_t",
                "type": "fptr"
            },
            "get_referrer_url": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_referrer_url) (struct _cef_request_t *)",
                "name": "get_referrer_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_resource_type": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_resource_type_t (*get_resource_type) (struct _cef_request_t *)",
                "name": "get_resource_type",
                "ret": "cef_resource_type_t",
                "type": "fptr"
            },
            "get_transition_type": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_transition_type_t (*get_transition_type) (struct _cef_request_t *)",
                "name": "get_transition_type",
                "ret": "cef_transition_type_t",
                "type": "fptr"
            },
            "get_url": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_request_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_request_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "set": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_post_data_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "decl": "void (*set) (struct _cef_request_t *, const cef_string_t *, const cef_string_t *, struct _cef_post_data_t *, cef_string_multimap_t)",
                "name": "set",
                "ret": "void",
                "type": "fptr"
            },
            "set_first_party_for_cookies": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_first_party_for_cookies) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_first_party_for_cookies",
                "ret": "void",
                "type": "fptr"
            },
            "set_flags": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_flags) (struct _cef_request_t *, int)",
                "name": "set_flags",
                "ret": "void",
                "type": "fptr"
            },
            "set_header_by_name": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_header_by_name) (struct _cef_request_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "set_header_by_name",
                "ret": "void",
                "type": "fptr"
            },
            "set_header_map": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "decl": "void (*set_header_map) (struct _cef_request_t *, cef_string_multimap_t)",
                "name": "set_header_map",
                "ret": "void",
                "type": "fptr"
            },
            "set_method": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_method) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_method",
                "ret": "void",
                "type": "fptr"
            },
            "set_post_data": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_post_data_t"
                    ]
                ],
                "decl": "void (*set_post_data) (struct _cef_request_t *, struct _cef_post_data_t *)",
                "name": "set_post_data",
                "ret": "void",
                "type": "fptr"
            },
            "set_referrer": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_referrer_policy_t"
                ],
                "decl": "void (*set_referrer) (struct _cef_request_t *, const cef_string_t *, cef_referrer_policy_t)",
                "name": "set_referrer",
                "ret": "void",
                "type": "fptr"
            },
            "set_url": {
                "args": [
                    [
                        "_cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_url) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_url",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_resolve_callback_t": {
        "name": "cef_resolve_callback_t",
        "path": "include/capi/cef_request_context_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_resolve_completed": {
                "args": [
                    [
                        "_cef_resolve_callback_t"
                    ],
                    "cef_errorcode_t",
                    "cef_string_list_t"
                ],
                "decl": "void (*on_resolve_completed) (struct _cef_resolve_callback_t *, cef_errorcode_t, cef_string_list_t)",
                "name": "on_resolve_completed",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_resource_bundle_handler_t": {
        "name": "cef_resource_bundle_handler_t",
        "path": "include/capi/cef_resource_bundle_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_data_resource": {
                "args": [
                    [
                        "_cef_resource_bundle_handler_t"
                    ],
                    "int",
                    [
                        [
                            "void"
                        ]
                    ],
                    [
                        "size_t"
                    ]
                ],
                "decl": "int (*get_data_resource) (struct _cef_resource_bundle_handler_t *, int, void **, size_t *)",
                "name": "get_data_resource",
                "ret": "int",
                "type": "fptr"
            },
            "get_data_resource_for_scale": {
                "args": [
                    [
                        "_cef_resource_bundle_handler_t"
                    ],
                    "int",
                    "cef_scale_factor_t",
                    [
                        [
                            "void"
                        ]
                    ],
                    [
                        "size_t"
                    ]
                ],
                "decl": "int (*get_data_resource_for_scale) (struct _cef_resource_bundle_handler_t *, int, cef_scale_factor_t, void **, size_t *)",
                "name": "get_data_resource_for_scale",
                "ret": "int",
                "type": "fptr"
            },
            "get_localized_string": {
                "args": [
                    [
                        "_cef_resource_bundle_handler_t"
                    ],
                    "int",
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*get_localized_string) (struct _cef_resource_bundle_handler_t *, int, cef_string_t *)",
                "name": "get_localized_string",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_resource_handler_t": {
        "name": "cef_resource_handler_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_resource_handler_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "get_response_headers": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    [
                        "_cef_response_t"
                    ],
                    [
                        "int64"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "void (*get_response_headers) (struct _cef_resource_handler_t *, struct _cef_response_t *, int64 *, cef_string_t *)",
                "name": "get_response_headers",
                "ret": "void",
                "type": "fptr"
            },
            "open": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "int"
                    ],
                    [
                        "_cef_callback_t"
                    ]
                ],
                "decl": "int (*open) (struct _cef_resource_handler_t *, struct _cef_request_t *, int *, struct _cef_callback_t *)",
                "name": "open",
                "ret": "int",
                "type": "fptr"
            },
            "process_request": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_callback_t"
                    ]
                ],
                "decl": "int (*process_request) (struct _cef_resource_handler_t *, struct _cef_request_t *, struct _cef_callback_t *)",
                "name": "process_request",
                "ret": "int",
                "type": "fptr"
            },
            "read": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "_cef_resource_read_callback_t"
                    ]
                ],
                "decl": "int (*read) (struct _cef_resource_handler_t *, void *, int, int *, struct _cef_resource_read_callback_t *)",
                "name": "read",
                "ret": "int",
                "type": "fptr"
            },
            "read_response": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "_cef_callback_t"
                    ]
                ],
                "decl": "int (*read_response) (struct _cef_resource_handler_t *, void *, int, int *, struct _cef_callback_t *)",
                "name": "read_response",
                "ret": "int",
                "type": "fptr"
            },
            "skip": {
                "args": [
                    [
                        "_cef_resource_handler_t"
                    ],
                    "int64",
                    [
                        "int64"
                    ],
                    [
                        "_cef_resource_skip_callback_t"
                    ]
                ],
                "decl": "int (*skip) (struct _cef_resource_handler_t *, int64, int64 *, struct _cef_resource_skip_callback_t *)",
                "name": "skip",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_resource_read_callback_t": {
        "name": "cef_resource_read_callback_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cont": {
                "args": [
                    [
                        "_cef_resource_read_callback_t"
                    ],
                    "int"
                ],
                "decl": "void (*cont) (struct _cef_resource_read_callback_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_resource_request_handler_t": {
        "name": "cef_resource_request_handler_t",
        "path": "include/capi/cef_resource_request_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_cookie_access_filter": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "struct _cef_cookie_access_filter_t * (*get_cookie_access_filter) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "get_cookie_access_filter",
                "ret": [
                    "_cef_cookie_access_filter_t"
                ],
                "type": "fptr"
            },
            "get_resource_handler": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "struct _cef_resource_handler_t * (*get_resource_handler) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "get_resource_handler",
                "ret": [
                    "_cef_resource_handler_t"
                ],
                "type": "fptr"
            },
            "get_resource_response_filter": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "struct _cef_response_filter_t * (*get_resource_response_filter) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *)",
                "name": "get_resource_response_filter",
                "ret": [
                    "_cef_response_filter_t"
                ],
                "type": "fptr"
            },
            "on_before_resource_load": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_request_callback_t"
                    ]
                ],
                "decl": "cef_return_value_t (*on_before_resource_load) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_request_callback_t *)",
                "name": "on_before_resource_load",
                "ret": "cef_return_value_t",
                "type": "fptr"
            },
            "on_protocol_execution": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "decl": "void (*on_protocol_execution) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int *)",
                "name": "on_protocol_execution",
                "ret": "void",
                "type": "fptr"
            },
            "on_resource_load_complete": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_response_t"
                    ],
                    "cef_urlrequest_status_t",
                    "int64"
                ],
                "decl": "void (*on_resource_load_complete) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, cef_urlrequest_status_t, int64)",
                "name": "on_resource_load_complete",
                "ret": "void",
                "type": "fptr"
            },
            "on_resource_redirect": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_response_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "void (*on_resource_redirect) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, cef_string_t *)",
                "name": "on_resource_redirect",
                "ret": "void",
                "type": "fptr"
            },
            "on_resource_response": {
                "args": [
                    [
                        "_cef_resource_request_handler_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "_cef_request_t"
                    ],
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "int (*on_resource_response) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *)",
                "name": "on_resource_response",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_resource_skip_callback_t": {
        "name": "cef_resource_skip_callback_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cont": {
                "args": [
                    [
                        "_cef_resource_skip_callback_t"
                    ],
                    "int64"
                ],
                "decl": "void (*cont) (struct _cef_resource_skip_callback_t *, int64)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_response_filter_t": {
        "name": "cef_response_filter_t",
        "path": "include/capi/cef_response_filter_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "filter": {
                "args": [
                    [
                        "_cef_response_filter_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    [
                        "size_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    [
                        "size_t"
                    ]
                ],
                "decl": "cef_response_filter_status_t (*filter) (struct _cef_response_filter_t *, void *, size_t, size_t *, void *, size_t, size_t *)",
                "name": "filter",
                "ret": "cef_response_filter_status_t",
                "type": "fptr"
            },
            "init_filter": {
                "args": [
                    [
                        "_cef_response_filter_t"
                    ]
                ],
                "decl": "int (*init_filter) (struct _cef_response_filter_t *)",
                "name": "init_filter",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_response_t": {
        "name": "cef_response_t",
        "path": "include/capi/cef_response_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_charset": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_charset) (struct _cef_response_t *)",
                "name": "get_charset",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_error": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "cef_errorcode_t (*get_error) (struct _cef_response_t *)",
                "name": "get_error",
                "ret": "cef_errorcode_t",
                "type": "fptr"
            },
            "get_header_by_name": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_header_by_name) (struct _cef_response_t *, const cef_string_t *)",
                "name": "get_header_by_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_header_map": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "decl": "void (*get_header_map) (struct _cef_response_t *, cef_string_multimap_t)",
                "name": "get_header_map",
                "ret": "void",
                "type": "fptr"
            },
            "get_mime_type": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_mime_type) (struct _cef_response_t *)",
                "name": "get_mime_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_status": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "int (*get_status) (struct _cef_response_t *)",
                "name": "get_status",
                "ret": "int",
                "type": "fptr"
            },
            "get_status_text": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_status_text) (struct _cef_response_t *)",
                "name": "get_status_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_url": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_response_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_response_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_response_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "set_charset": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_charset) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_charset",
                "ret": "void",
                "type": "fptr"
            },
            "set_error": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    "cef_errorcode_t"
                ],
                "decl": "void (*set_error) (struct _cef_response_t *, cef_errorcode_t)",
                "name": "set_error",
                "ret": "void",
                "type": "fptr"
            },
            "set_header_by_name": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_header_by_name) (struct _cef_response_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "set_header_by_name",
                "ret": "void",
                "type": "fptr"
            },
            "set_header_map": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "decl": "void (*set_header_map) (struct _cef_response_t *, cef_string_multimap_t)",
                "name": "set_header_map",
                "ret": "void",
                "type": "fptr"
            },
            "set_mime_type": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_mime_type) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_mime_type",
                "ret": "void",
                "type": "fptr"
            },
            "set_status": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    "int"
                ],
                "decl": "void (*set_status) (struct _cef_response_t *, int)",
                "name": "set_status",
                "ret": "void",
                "type": "fptr"
            },
            "set_status_text": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_status_text) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_status_text",
                "ret": "void",
                "type": "fptr"
            },
            "set_url": {
                "args": [
                    [
                        "_cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*set_url) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_url",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_run_context_menu_callback_t": {
        "name": "cef_run_context_menu_callback_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "cancel": {
                "args": [
                    [
                        "_cef_run_context_menu_callback_t"
                    ]
                ],
                "decl": "void (*cancel) (struct _cef_run_context_menu_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            "cont": {
                "args": [
                    [
                        "_cef_run_context_menu_callback_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "decl": "void (*cont) (struct _cef_run_context_menu_callback_t *, int, cef_event_flags_t)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_scheme_handler_factory_t": {
        "name": "cef_scheme_handler_factory_t",
        "path": "include/capi/cef_scheme_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "create": {
                "args": [
                    [
                        "_cef_scheme_handler_factory_t"
                    ],
                    [
                        "_cef_browser_t"
                    ],
                    [
                        "_cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_request_t"
                    ]
                ],
                "decl": "struct _cef_resource_handler_t * (*create) (struct _cef_scheme_handler_factory_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, struct _cef_request_t *)",
                "name": "create",
                "ret": [
                    "_cef_resource_handler_t"
                ],
                "type": "fptr"
            }
        }
    },
    "_cef_scheme_registrar_t": {
        "name": "cef_scheme_registrar_t",
        "path": "include/capi/cef_scheme_capi.h",
        "props": {
            "add_custom_scheme": {
                "args": [
                    [
                        "_cef_scheme_registrar_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "decl": "int (*add_custom_scheme) (struct _cef_scheme_registrar_t *, const cef_string_t *, int)",
                "name": "add_custom_scheme",
                "ret": "int",
                "type": "fptr"
            },
            "base": "cef_base_scoped_t"
        }
    },
    "_cef_screen_info_t": {
        "name": "cef_screen_info_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "available_rect": "cef_rect_t",
            "depth": "int",
            "depth_per_component": "int",
            "device_scale_factor": "float",
            "is_monochrome": "int",
            "rect": "cef_rect_t"
        }
    },
    "_cef_select_client_certificate_callback_t": {
        "name": "cef_select_client_certificate_callback_t",
        "path": "include/capi/cef_request_handler_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "select": {
                "args": [
                    [
                        "_cef_select_client_certificate_callback_t"
                    ],
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "void (*select) (struct _cef_select_client_certificate_callback_t *, struct _cef_x509certificate_t *)",
                "name": "select",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_set_cookie_callback_t": {
        "name": "cef_set_cookie_callback_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "on_complete": {
                "args": [
                    [
                        "_cef_set_cookie_callback_t"
                    ],
                    "int"
                ],
                "decl": "void (*on_complete) (struct _cef_set_cookie_callback_t *, int)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_settings_t": {
        "name": "cef_settings_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "accept_language_list": "cef_string_t",
            "application_client_id_for_file_scanning": "cef_string_t",
            "background_color": "cef_color_t",
            "browser_subprocess_path": "cef_string_t",
            "cache_path": "cef_string_t",
            "chrome_runtime": "int",
            "command_line_args_disabled": "int",
            "external_message_pump": "int",
            "framework_dir_path": "cef_string_t",
            "ignore_certificate_errors": "int",
            "javascript_flags": "cef_string_t",
            "locale": "cef_string_t",
            "locales_dir_path": "cef_string_t",
            "log_file": "cef_string_t",
            "log_severity": "cef_log_severity_t",
            "main_bundle_path": "cef_string_t",
            "multi_threaded_message_loop": "int",
            "no_sandbox": "int",
            "pack_loading_disabled": "int",
            "persist_session_cookies": "int",
            "persist_user_preferences": "int",
            "product_version": "cef_string_t",
            "remote_debugging_port": "int",
            "resources_dir_path": "cef_string_t",
            "root_cache_path": "cef_string_t",
            "size": "size_t",
            "uncaught_exception_stack_size": "int",
            "user_agent": "cef_string_t",
            "user_data_path": "cef_string_t",
            "windowless_rendering_enabled": "int"
        }
    },
    "_cef_size_t": {
        "name": "cef_size_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "height": "int",
            "width": "int"
        }
    },
    "_cef_sslinfo_t": {
        "name": "cef_sslinfo_t",
        "path": "include/capi/cef_ssl_info_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_cert_status": {
                "args": [
                    [
                        "_cef_sslinfo_t"
                    ]
                ],
                "decl": "cef_cert_status_t (*get_cert_status) (struct _cef_sslinfo_t *)",
                "name": "get_cert_status",
                "ret": "cef_cert_status_t",
                "type": "fptr"
            },
            "get_x509certificate": {
                "args": [
                    [
                        "_cef_sslinfo_t"
                    ]
                ],
                "decl": "struct _cef_x509certificate_t * (*get_x509certificate) (struct _cef_sslinfo_t *)",
                "name": "get_x509certificate",
                "ret": [
                    "_cef_x509certificate_t"
                ],
                "type": "fptr"
            }
        }
    },
    "_cef_sslstatus_t": {
        "name": "cef_sslstatus_t",
        "path": "include/capi/cef_ssl_status_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_cert_status": {
                "args": [
                    [
                        "_cef_sslstatus_t"
                    ]
                ],
                "decl": "cef_cert_status_t (*get_cert_status) (struct _cef_sslstatus_t *)",
                "name": "get_cert_status",
                "ret": "cef_cert_status_t",
                "type": "fptr"
            },
            "get_content_status": {
                "args": [
                    [
                        "_cef_sslstatus_t"
                    ]
                ],
                "decl": "cef_ssl_content_status_t (*get_content_status) (struct _cef_sslstatus_t *)",
                "name": "get_content_status",
                "ret": "cef_ssl_content_status_t",
                "type": "fptr"
            },
            "get_sslversion": {
                "args": [
                    [
                        "_cef_sslstatus_t"
                    ]
                ],
                "decl": "cef_ssl_version_t (*get_sslversion) (struct _cef_sslstatus_t *)",
                "name": "get_sslversion",
                "ret": "cef_ssl_version_t",
                "type": "fptr"
            },
            "get_x509certificate": {
                "args": [
                    [
                        "_cef_sslstatus_t"
                    ]
                ],
                "decl": "struct _cef_x509certificate_t * (*get_x509certificate) (struct _cef_sslstatus_t *)",
                "name": "get_x509certificate",
                "ret": [
                    "_cef_x509certificate_t"
                ],
                "type": "fptr"
            },
            "is_secure_connection": {
                "args": [
                    [
                        "_cef_sslstatus_t"
                    ]
                ],
                "decl": "int (*is_secure_connection) (struct _cef_sslstatus_t *)",
                "name": "is_secure_connection",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_stream_reader_t": {
        "name": "cef_stream_reader_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "eof": {
                "args": [
                    [
                        "_cef_stream_reader_t"
                    ]
                ],
                "decl": "int (*eof) (struct _cef_stream_reader_t *)",
                "name": "eof",
                "ret": "int",
                "type": "fptr"
            },
            "may_block": {
                "args": [
                    [
                        "_cef_stream_reader_t"
                    ]
                ],
                "decl": "int (*may_block) (struct _cef_stream_reader_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            },
            "read": {
                "args": [
                    [
                        "_cef_stream_reader_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "decl": "size_t (*read) (struct _cef_stream_reader_t *, void *, size_t, size_t)",
                "name": "read",
                "ret": "size_t",
                "type": "fptr"
            },
            "seek": {
                "args": [
                    [
                        "_cef_stream_reader_t"
                    ],
                    "int64",
                    "int"
                ],
                "decl": "int (*seek) (struct _cef_stream_reader_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            "tell": {
                "args": [
                    [
                        "_cef_stream_reader_t"
                    ]
                ],
                "decl": "int64 (*tell) (struct _cef_stream_reader_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            }
        }
    },
    "_cef_stream_writer_t": {
        "name": "cef_stream_writer_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "flush": {
                "args": [
                    [
                        "_cef_stream_writer_t"
                    ]
                ],
                "decl": "int (*flush) (struct _cef_stream_writer_t *)",
                "name": "flush",
                "ret": "int",
                "type": "fptr"
            },
            "may_block": {
                "args": [
                    [
                        "_cef_stream_writer_t"
                    ]
                ],
                "decl": "int (*may_block) (struct _cef_stream_writer_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            },
            "seek": {
                "args": [
                    [
                        "_cef_stream_writer_t"
                    ],
                    "int64",
                    "int"
                ],
                "decl": "int (*seek) (struct _cef_stream_writer_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            "tell": {
                "args": [
                    [
                        "_cef_stream_writer_t"
                    ]
                ],
                "decl": "int64 (*tell) (struct _cef_stream_writer_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            "write": {
                "args": [
                    [
                        "_cef_stream_writer_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "decl": "size_t (*write) (struct _cef_stream_writer_t *, const void *, size_t, size_t)",
                "name": "write",
                "ret": "size_t",
                "type": "fptr"
            }
        }
    },
    "_cef_string_utf16_t": {
        "name": "cef_string_utf16_t",
        "path": "include/internal/cef_string_types.h",
        "props": {
            "dtor": {
                "args": [
                    [
                        "char16"
                    ]
                ],
                "decl": "void (*dtor) (char16 *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            },
            "length": "size_t",
            "str": [
                "char16"
            ]
        }
    },
    "_cef_string_utf8_t": {
        "name": "cef_string_utf8_t",
        "path": "include/internal/cef_string_types.h",
        "props": {
            "dtor": {
                "args": [
                    [
                        "char"
                    ]
                ],
                "decl": "void (*dtor) (char *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            },
            "length": "size_t",
            "str": [
                "char"
            ]
        }
    },
    "_cef_string_visitor_t": {
        "name": "cef_string_visitor_t",
        "path": "include/capi/cef_string_visitor_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "visit": {
                "args": [
                    [
                        "_cef_string_visitor_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "void (*visit) (struct _cef_string_visitor_t *, const cef_string_t *)",
                "name": "visit",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_string_wide_t": {
        "name": "cef_string_wide_t",
        "path": "include/internal/cef_string_types.h",
        "props": {
            "dtor": {
                "args": [
                    [
                        "wchar_t"
                    ]
                ],
                "decl": "void (*dtor) (wchar_t *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            },
            "length": "size_t",
            "str": [
                "wchar_t"
            ]
        }
    },
    "_cef_task_runner_t": {
        "name": "cef_task_runner_t",
        "path": "include/capi/cef_task_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "belongs_to_current_thread": {
                "args": [
                    [
                        "_cef_task_runner_t"
                    ]
                ],
                "decl": "int (*belongs_to_current_thread) (struct _cef_task_runner_t *)",
                "name": "belongs_to_current_thread",
                "ret": "int",
                "type": "fptr"
            },
            "belongs_to_thread": {
                "args": [
                    [
                        "_cef_task_runner_t"
                    ],
                    "cef_thread_id_t"
                ],
                "decl": "int (*belongs_to_thread) (struct _cef_task_runner_t *, cef_thread_id_t)",
                "name": "belongs_to_thread",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_task_runner_t"
                    ],
                    [
                        "_cef_task_runner_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_task_runner_t *, struct _cef_task_runner_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "post_delayed_task": {
                "args": [
                    [
                        "_cef_task_runner_t"
                    ],
                    [
                        "_cef_task_t"
                    ],
                    "int64"
                ],
                "decl": "int (*post_delayed_task) (struct _cef_task_runner_t *, struct _cef_task_t *, int64)",
                "name": "post_delayed_task",
                "ret": "int",
                "type": "fptr"
            },
            "post_task": {
                "args": [
                    [
                        "_cef_task_runner_t"
                    ],
                    [
                        "_cef_task_t"
                    ]
                ],
                "decl": "int (*post_task) (struct _cef_task_runner_t *, struct _cef_task_t *)",
                "name": "post_task",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_task_t": {
        "name": "cef_task_t",
        "path": "include/capi/cef_task_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "execute": {
                "args": [
                    [
                        "_cef_task_t"
                    ]
                ],
                "decl": "void (*execute) (struct _cef_task_t *)",
                "name": "execute",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_time_t": {
        "name": "cef_time_t",
        "path": "include/internal/cef_time.h",
        "props": {
            "day_of_month": "int",
            "day_of_week": "int",
            "hour": "int",
            "millisecond": "int",
            "minute": "int",
            "month": "int",
            "second": "int",
            "year": "int"
        }
    },
    "_cef_touch_event_t": {
        "name": "cef_touch_event_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "id": "int",
            "modifiers": "uint32",
            "pointer_type": "cef_pointer_type_t",
            "pressure": "float",
            "radius_x": "float",
            "radius_y": "float",
            "rotation_angle": "float",
            "type": "cef_touch_event_type_t",
            "x": "float",
            "y": "float"
        }
    },
    "_cef_urlparts_t": {
        "name": "cef_urlparts_t",
        "path": "include/internal/cef_types.h",
        "props": {
            "fragment": "cef_string_t",
            "host": "cef_string_t",
            "origin": "cef_string_t",
            "password": "cef_string_t",
            "path": "cef_string_t",
            "port": "cef_string_t",
            "query": "cef_string_t",
            "scheme": "cef_string_t",
            "spec": "cef_string_t",
            "username": "cef_string_t"
        }
    },
    "_cef_v8accessor_t": {
        "name": "cef_v8accessor_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get": {
                "args": [
                    [
                        "_cef_v8accessor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*get) (struct _cef_v8accessor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get",
                "ret": "int",
                "type": "fptr"
            },
            "set": {
                "args": [
                    [
                        "_cef_v8accessor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*set) (struct _cef_v8accessor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8array_buffer_release_callback_t": {
        "name": "cef_v8array_buffer_release_callback_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "release_buffer": {
                "args": [
                    [
                        "_cef_v8array_buffer_release_callback_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "decl": "void (*release_buffer) (struct _cef_v8array_buffer_release_callback_t *, void *)",
                "name": "release_buffer",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_v8context_t": {
        "name": "cef_v8context_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "enter": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "int (*enter) (struct _cef_v8context_t *)",
                "name": "enter",
                "ret": "int",
                "type": "fptr"
            },
            "eval": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        [
                            "_cef_v8exception_t"
                        ]
                    ]
                ],
                "decl": "int (*eval) (struct _cef_v8context_t *, const cef_string_t *, const cef_string_t *, int, struct _cef_v8value_t **, struct _cef_v8exception_t **)",
                "name": "eval",
                "ret": "int",
                "type": "fptr"
            },
            "exit": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "int (*exit) (struct _cef_v8context_t *)",
                "name": "exit",
                "ret": "int",
                "type": "fptr"
            },
            "get_browser": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "struct _cef_browser_t * (*get_browser) (struct _cef_v8context_t *)",
                "name": "get_browser",
                "ret": [
                    "_cef_browser_t"
                ],
                "type": "fptr"
            },
            "get_frame": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "struct _cef_frame_t * (*get_frame) (struct _cef_v8context_t *)",
                "name": "get_frame",
                "ret": [
                    "_cef_frame_t"
                ],
                "type": "fptr"
            },
            "get_global": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "struct _cef_v8value_t * (*get_global) (struct _cef_v8context_t *)",
                "name": "get_global",
                "ret": [
                    "_cef_v8value_t"
                ],
                "type": "fptr"
            },
            "get_task_runner": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "struct _cef_task_runner_t * (*get_task_runner) (struct _cef_v8context_t *)",
                "name": "get_task_runner",
                "ret": [
                    "_cef_task_runner_t"
                ],
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ],
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_v8context_t *, struct _cef_v8context_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_v8context_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_v8context_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8exception_t": {
        "name": "cef_v8exception_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_end_column": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "int (*get_end_column) (struct _cef_v8exception_t *)",
                "name": "get_end_column",
                "ret": "int",
                "type": "fptr"
            },
            "get_end_position": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "int (*get_end_position) (struct _cef_v8exception_t *)",
                "name": "get_end_position",
                "ret": "int",
                "type": "fptr"
            },
            "get_line_number": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "int (*get_line_number) (struct _cef_v8exception_t *)",
                "name": "get_line_number",
                "ret": "int",
                "type": "fptr"
            },
            "get_message": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_message) (struct _cef_v8exception_t *)",
                "name": "get_message",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_script_resource_name": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_script_resource_name) (struct _cef_v8exception_t *)",
                "name": "get_script_resource_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_source_line": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_source_line) (struct _cef_v8exception_t *)",
                "name": "get_source_line",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_start_column": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "int (*get_start_column) (struct _cef_v8exception_t *)",
                "name": "get_start_column",
                "ret": "int",
                "type": "fptr"
            },
            "get_start_position": {
                "args": [
                    [
                        "_cef_v8exception_t"
                    ]
                ],
                "decl": "int (*get_start_position) (struct _cef_v8exception_t *)",
                "name": "get_start_position",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8handler_t": {
        "name": "cef_v8handler_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "execute": {
                "args": [
                    [
                        "_cef_v8handler_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*execute) (struct _cef_v8handler_t *, const cef_string_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "execute",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8interceptor_t": {
        "name": "cef_v8interceptor_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_byindex": {
                "args": [
                    [
                        "_cef_v8interceptor_t"
                    ],
                    "int",
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*get_byindex) (struct _cef_v8interceptor_t *, int, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get_byindex",
                "ret": "int",
                "type": "fptr"
            },
            "get_byname": {
                "args": [
                    [
                        "_cef_v8interceptor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*get_byname) (struct _cef_v8interceptor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get_byname",
                "ret": "int",
                "type": "fptr"
            },
            "set_byindex": {
                "args": [
                    [
                        "_cef_v8interceptor_t"
                    ],
                    "int",
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*set_byindex) (struct _cef_v8interceptor_t *, int, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set_byindex",
                "ret": "int",
                "type": "fptr"
            },
            "set_byname": {
                "args": [
                    [
                        "_cef_v8interceptor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "decl": "int (*set_byname) (struct _cef_v8interceptor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set_byname",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8stack_frame_t": {
        "name": "cef_v8stack_frame_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_column": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "int (*get_column) (struct _cef_v8stack_frame_t *)",
                "name": "get_column",
                "ret": "int",
                "type": "fptr"
            },
            "get_function_name": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_function_name) (struct _cef_v8stack_frame_t *)",
                "name": "get_function_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_line_number": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "int (*get_line_number) (struct _cef_v8stack_frame_t *)",
                "name": "get_line_number",
                "ret": "int",
                "type": "fptr"
            },
            "get_script_name": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_script_name) (struct _cef_v8stack_frame_t *)",
                "name": "get_script_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_script_name_or_source_url": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_script_name_or_source_url) (struct _cef_v8stack_frame_t *)",
                "name": "get_script_name_or_source_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "is_constructor": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "int (*is_constructor) (struct _cef_v8stack_frame_t *)",
                "name": "is_constructor",
                "ret": "int",
                "type": "fptr"
            },
            "is_eval": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "int (*is_eval) (struct _cef_v8stack_frame_t *)",
                "name": "is_eval",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_v8stack_frame_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_v8stack_frame_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8stack_trace_t": {
        "name": "cef_v8stack_trace_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_frame": {
                "args": [
                    [
                        "_cef_v8stack_trace_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_v8stack_frame_t * (*get_frame) (struct _cef_v8stack_trace_t *, int)",
                "name": "get_frame",
                "ret": [
                    "_cef_v8stack_frame_t"
                ],
                "type": "fptr"
            },
            "get_frame_count": {
                "args": [
                    [
                        "_cef_v8stack_trace_t"
                    ]
                ],
                "decl": "int (*get_frame_count) (struct _cef_v8stack_trace_t *)",
                "name": "get_frame_count",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_v8stack_trace_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_v8stack_trace_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_v8value_t": {
        "name": "cef_v8value_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": {
            "adjust_externally_allocated_memory": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int"
                ],
                "decl": "int (*adjust_externally_allocated_memory) (struct _cef_v8value_t *, int)",
                "name": "adjust_externally_allocated_memory",
                "ret": "int",
                "type": "fptr"
            },
            "base": "cef_base_ref_counted_t",
            "clear_exception": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*clear_exception) (struct _cef_v8value_t *)",
                "name": "clear_exception",
                "ret": "int",
                "type": "fptr"
            },
            "delete_value_byindex": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int"
                ],
                "decl": "int (*delete_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "delete_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            "delete_value_bykey": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*delete_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "delete_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            "execute_function": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ]
                ],
                "decl": "struct _cef_v8value_t * (*execute_function) (struct _cef_v8value_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *)",
                "name": "execute_function",
                "ret": [
                    "_cef_v8value_t"
                ],
                "type": "fptr"
            },
            "execute_function_with_context": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8context_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "_cef_v8value_t"
                        ]
                    ]
                ],
                "decl": "struct _cef_v8value_t * (*execute_function_with_context) (struct _cef_v8value_t *, struct _cef_v8context_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *)",
                "name": "execute_function_with_context",
                "ret": [
                    "_cef_v8value_t"
                ],
                "type": "fptr"
            },
            "get_array_buffer_release_callback": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "struct _cef_v8array_buffer_release_callback_t * (*get_array_buffer_release_callback) (struct _cef_v8value_t *)",
                "name": "get_array_buffer_release_callback",
                "ret": [
                    "_cef_v8array_buffer_release_callback_t"
                ],
                "type": "fptr"
            },
            "get_array_length": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*get_array_length) (struct _cef_v8value_t *)",
                "name": "get_array_length",
                "ret": "int",
                "type": "fptr"
            },
            "get_bool_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*get_bool_value) (struct _cef_v8value_t *)",
                "name": "get_bool_value",
                "ret": "int",
                "type": "fptr"
            },
            "get_date_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "cef_time_t (*get_date_value) (struct _cef_v8value_t *)",
                "name": "get_date_value",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            "get_double_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "double (*get_double_value) (struct _cef_v8value_t *)",
                "name": "get_double_value",
                "ret": "double",
                "type": "fptr"
            },
            "get_exception": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "struct _cef_v8exception_t * (*get_exception) (struct _cef_v8value_t *)",
                "name": "get_exception",
                "ret": [
                    "_cef_v8exception_t"
                ],
                "type": "fptr"
            },
            "get_externally_allocated_memory": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*get_externally_allocated_memory) (struct _cef_v8value_t *)",
                "name": "get_externally_allocated_memory",
                "ret": "int",
                "type": "fptr"
            },
            "get_function_handler": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "struct _cef_v8handler_t * (*get_function_handler) (struct _cef_v8value_t *)",
                "name": "get_function_handler",
                "ret": [
                    "_cef_v8handler_t"
                ],
                "type": "fptr"
            },
            "get_function_name": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_function_name) (struct _cef_v8value_t *)",
                "name": "get_function_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_int_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int32 (*get_int_value) (struct _cef_v8value_t *)",
                "name": "get_int_value",
                "ret": "int32",
                "type": "fptr"
            },
            "get_keys": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "int (*get_keys) (struct _cef_v8value_t *, cef_string_list_t)",
                "name": "get_keys",
                "ret": "int",
                "type": "fptr"
            },
            "get_string_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_string_value) (struct _cef_v8value_t *)",
                "name": "get_string_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_uint_value": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "uint32 (*get_uint_value) (struct _cef_v8value_t *)",
                "name": "get_uint_value",
                "ret": "uint32",
                "type": "fptr"
            },
            "get_user_data": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "struct _cef_base_ref_counted_t * (*get_user_data) (struct _cef_v8value_t *)",
                "name": "get_user_data",
                "ret": [
                    "_cef_base_ref_counted_t"
                ],
                "type": "fptr"
            },
            "get_value_byindex": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int"
                ],
                "decl": "struct _cef_v8value_t * (*get_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "get_value_byindex",
                "ret": [
                    "_cef_v8value_t"
                ],
                "type": "fptr"
            },
            "get_value_bykey": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "struct _cef_v8value_t * (*get_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "get_value_bykey",
                "ret": [
                    "_cef_v8value_t"
                ],
                "type": "fptr"
            },
            "has_exception": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*has_exception) (struct _cef_v8value_t *)",
                "name": "has_exception",
                "ret": "int",
                "type": "fptr"
            },
            "has_value_byindex": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int"
                ],
                "decl": "int (*has_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "has_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            "has_value_bykey": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*has_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "has_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            "is_array": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_array) (struct _cef_v8value_t *)",
                "name": "is_array",
                "ret": "int",
                "type": "fptr"
            },
            "is_array_buffer": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_array_buffer) (struct _cef_v8value_t *)",
                "name": "is_array_buffer",
                "ret": "int",
                "type": "fptr"
            },
            "is_bool": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_bool) (struct _cef_v8value_t *)",
                "name": "is_bool",
                "ret": "int",
                "type": "fptr"
            },
            "is_date": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_date) (struct _cef_v8value_t *)",
                "name": "is_date",
                "ret": "int",
                "type": "fptr"
            },
            "is_double": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_double) (struct _cef_v8value_t *)",
                "name": "is_double",
                "ret": "int",
                "type": "fptr"
            },
            "is_function": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_function) (struct _cef_v8value_t *)",
                "name": "is_function",
                "ret": "int",
                "type": "fptr"
            },
            "is_int": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_int) (struct _cef_v8value_t *)",
                "name": "is_int",
                "ret": "int",
                "type": "fptr"
            },
            "is_null": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_null) (struct _cef_v8value_t *)",
                "name": "is_null",
                "ret": "int",
                "type": "fptr"
            },
            "is_object": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_object) (struct _cef_v8value_t *)",
                "name": "is_object",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_v8value_t *, struct _cef_v8value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_string": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_string) (struct _cef_v8value_t *)",
                "name": "is_string",
                "ret": "int",
                "type": "fptr"
            },
            "is_uint": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_uint) (struct _cef_v8value_t *)",
                "name": "is_uint",
                "ret": "int",
                "type": "fptr"
            },
            "is_undefined": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_undefined) (struct _cef_v8value_t *)",
                "name": "is_undefined",
                "ret": "int",
                "type": "fptr"
            },
            "is_user_created": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_user_created) (struct _cef_v8value_t *)",
                "name": "is_user_created",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_v8value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "neuter_array_buffer": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*neuter_array_buffer) (struct _cef_v8value_t *)",
                "name": "neuter_array_buffer",
                "ret": "int",
                "type": "fptr"
            },
            "set_rethrow_exceptions": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int"
                ],
                "decl": "int (*set_rethrow_exceptions) (struct _cef_v8value_t *, int)",
                "name": "set_rethrow_exceptions",
                "ret": "int",
                "type": "fptr"
            },
            "set_user_data": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "_cef_base_ref_counted_t"
                    ]
                ],
                "decl": "int (*set_user_data) (struct _cef_v8value_t *, struct _cef_base_ref_counted_t *)",
                "name": "set_user_data",
                "ret": "int",
                "type": "fptr"
            },
            "set_value_byaccessor": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_v8_accesscontrol_t",
                    "cef_v8_propertyattribute_t"
                ],
                "decl": "int (*set_value_byaccessor) (struct _cef_v8value_t *, const cef_string_t *, cef_v8_accesscontrol_t, cef_v8_propertyattribute_t)",
                "name": "set_value_byaccessor",
                "ret": "int",
                "type": "fptr"
            },
            "set_value_byindex": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    "int",
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*set_value_byindex) (struct _cef_v8value_t *, int, struct _cef_v8value_t *)",
                "name": "set_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            "set_value_bykey": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "_cef_v8value_t"
                    ],
                    "cef_v8_propertyattribute_t"
                ],
                "decl": "int (*set_value_bykey) (struct _cef_v8value_t *, const cef_string_t *, struct _cef_v8value_t *, cef_v8_propertyattribute_t)",
                "name": "set_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            "will_rethrow_exceptions": {
                "args": [
                    [
                        "_cef_v8value_t"
                    ]
                ],
                "decl": "int (*will_rethrow_exceptions) (struct _cef_v8value_t *)",
                "name": "will_rethrow_exceptions",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_value_t": {
        "name": "cef_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "copy": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "struct _cef_value_t * (*copy) (struct _cef_value_t *)",
                "name": "copy",
                "ret": [
                    "_cef_value_t"
                ],
                "type": "fptr"
            },
            "get_binary": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_value_t *)",
                "name": "get_binary",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_bool": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*get_bool) (struct _cef_value_t *)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            "get_dictionary": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_value_t *)",
                "name": "get_dictionary",
                "ret": [
                    "_cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            "get_double": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "double (*get_double) (struct _cef_value_t *)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            "get_int": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*get_int) (struct _cef_value_t *)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            "get_list": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_value_t *)",
                "name": "get_list",
                "ret": [
                    "_cef_list_value_t"
                ],
                "type": "fptr"
            },
            "get_string": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_value_t *)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_type": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_value_t *)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            "is_equal": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*is_equal) (struct _cef_value_t *, struct _cef_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            "is_owned": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*is_owned) (struct _cef_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            "is_read_only": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*is_read_only) (struct _cef_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            "is_same": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*is_same) (struct _cef_value_t *, struct _cef_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            "is_valid": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*is_valid) (struct _cef_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            "set_binary": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "_cef_binary_value_t"
                    ]
                ],
                "decl": "int (*set_binary) (struct _cef_value_t *, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            "set_bool": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    "int"
                ],
                "decl": "int (*set_bool) (struct _cef_value_t *, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            "set_dictionary": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "_cef_dictionary_value_t"
                    ]
                ],
                "decl": "int (*set_dictionary) (struct _cef_value_t *, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            "set_double": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    "double"
                ],
                "decl": "int (*set_double) (struct _cef_value_t *, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            "set_int": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    "int"
                ],
                "decl": "int (*set_int) (struct _cef_value_t *, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            "set_list": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "_cef_list_value_t"
                    ]
                ],
                "decl": "int (*set_list) (struct _cef_value_t *, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            },
            "set_null": {
                "args": [
                    [
                        "_cef_value_t"
                    ]
                ],
                "decl": "int (*set_null) (struct _cef_value_t *)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            "set_string": {
                "args": [
                    [
                        "_cef_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "decl": "int (*set_string) (struct _cef_value_t *, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            }
        }
    },
    "_cef_window_info_t": {
        "name": "cef_window_info_t",
        "path": "include/internal/cef_types_mac.h",
        "props": {
            "external_begin_frame_enabled": "int",
            "height": "int",
            "hidden": "int",
            "parent_view": [
                "void"
            ],
            "shared_texture_enabled": "int",
            "view": [
                "void"
            ],
            "width": "int",
            "window_name": "cef_string_t",
            "windowless_rendering_enabled": "int",
            "x": "int",
            "y": "int"
        }
    },
    "_cef_write_handler_t": {
        "name": "cef_write_handler_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "flush": {
                "args": [
                    [
                        "_cef_write_handler_t"
                    ]
                ],
                "decl": "int (*flush) (struct _cef_write_handler_t *)",
                "name": "flush",
                "ret": "int",
                "type": "fptr"
            },
            "may_block": {
                "args": [
                    [
                        "_cef_write_handler_t"
                    ]
                ],
                "decl": "int (*may_block) (struct _cef_write_handler_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            },
            "seek": {
                "args": [
                    [
                        "_cef_write_handler_t"
                    ],
                    "int64",
                    "int"
                ],
                "decl": "int (*seek) (struct _cef_write_handler_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            "tell": {
                "args": [
                    [
                        "_cef_write_handler_t"
                    ]
                ],
                "decl": "int64 (*tell) (struct _cef_write_handler_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            "write": {
                "args": [
                    [
                        "_cef_write_handler_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "decl": "size_t (*write) (struct _cef_write_handler_t *, const void *, size_t, size_t)",
                "name": "write",
                "ret": "size_t",
                "type": "fptr"
            }
        }
    },
    "_cef_x509cert_principal_t": {
        "name": "cef_x509cert_principal_t",
        "path": "include/capi/cef_x509_certificate_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_common_name": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_common_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_common_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_country_name": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_country_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_country_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_display_name": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_display_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_display_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_domain_components": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_domain_components) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_domain_components",
                "ret": "void",
                "type": "fptr"
            },
            "get_locality_name": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_locality_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_locality_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_organization_names": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_organization_names) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_organization_names",
                "ret": "void",
                "type": "fptr"
            },
            "get_organization_unit_names": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_organization_unit_names) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_organization_unit_names",
                "ret": "void",
                "type": "fptr"
            },
            "get_state_or_province_name": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ]
                ],
                "decl": "cef_string_userfree_t (*get_state_or_province_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_state_or_province_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            "get_street_addresses": {
                "args": [
                    [
                        "_cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "decl": "void (*get_street_addresses) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_street_addresses",
                "ret": "void",
                "type": "fptr"
            }
        }
    },
    "_cef_x509certificate_t": {
        "name": "cef_x509certificate_t",
        "path": "include/capi/cef_x509_certificate_capi.h",
        "props": {
            "base": "cef_base_ref_counted_t",
            "get_derencoded": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_derencoded) (struct _cef_x509certificate_t *)",
                "name": "get_derencoded",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_derencoded_issuer_chain": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "_cef_binary_value_t"
                        ]
                    ]
                ],
                "decl": "void (*get_derencoded_issuer_chain) (struct _cef_x509certificate_t *, size_t *, struct _cef_binary_value_t **)",
                "name": "get_derencoded_issuer_chain",
                "ret": "void",
                "type": "fptr"
            },
            "get_issuer": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "struct _cef_x509cert_principal_t * (*get_issuer) (struct _cef_x509certificate_t *)",
                "name": "get_issuer",
                "ret": [
                    "_cef_x509cert_principal_t"
                ],
                "type": "fptr"
            },
            "get_issuer_chain_size": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "size_t (*get_issuer_chain_size) (struct _cef_x509certificate_t *)",
                "name": "get_issuer_chain_size",
                "ret": "size_t",
                "type": "fptr"
            },
            "get_pemencoded": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_pemencoded) (struct _cef_x509certificate_t *)",
                "name": "get_pemencoded",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_pemencoded_issuer_chain": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "_cef_binary_value_t"
                        ]
                    ]
                ],
                "decl": "void (*get_pemencoded_issuer_chain) (struct _cef_x509certificate_t *, size_t *, struct _cef_binary_value_t **)",
                "name": "get_pemencoded_issuer_chain",
                "ret": "void",
                "type": "fptr"
            },
            "get_serial_number": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "struct _cef_binary_value_t * (*get_serial_number) (struct _cef_x509certificate_t *)",
                "name": "get_serial_number",
                "ret": [
                    "_cef_binary_value_t"
                ],
                "type": "fptr"
            },
            "get_subject": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "struct _cef_x509cert_principal_t * (*get_subject) (struct _cef_x509certificate_t *)",
                "name": "get_subject",
                "ret": [
                    "_cef_x509cert_principal_t"
                ],
                "type": "fptr"
            },
            "get_valid_expiry": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "cef_time_t (*get_valid_expiry) (struct _cef_x509certificate_t *)",
                "name": "get_valid_expiry",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            "get_valid_start": {
                "args": [
                    [
                        "_cef_x509certificate_t"
                    ]
                ],
                "decl": "cef_time_t (*get_valid_start) (struct _cef_x509certificate_t *)",
                "name": "get_valid_start",
                "ret": "cef_time_t",
                "type": "fptr"
            }
        }
    }
}