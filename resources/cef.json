{
    "_cef_accessibility_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to receive accessibility notification when",
            "// accessibility events have been registered. The functions of this structure",
            "// will be called on the UI thread.",
            "///"
        ],
        "name": "cef_accessibility_handler_t",
        "path": "include/capi/cef_accessibility_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_accessibility_handler_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after renderer process sends accessibility tree changes to the",
                    "// browser process.",
                    "///"
                ],
                "decl": "void (*on_accessibility_tree_change) (struct _cef_accessibility_handler_t *, struct _cef_value_t *)",
                "name": "on_accessibility_tree_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_accessibility_handler_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after renderer process sends accessibility location changes to the",
                    "// browser process.",
                    "///"
                ],
                "decl": "void (*on_accessibility_location_change) (struct _cef_accessibility_handler_t *, struct _cef_value_t *)",
                "name": "on_accessibility_location_change",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_app_t": {
        "comment": [
            "///",
            "// Implement this structure to provide handler implementations. Methods will be",
            "// called by the process and/or thread indicated.",
            "///"
        ],
        "name": "cef_app_t",
        "path": "include/capi/cef_app_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_app_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Provides an opportunity to view and/or modify command-line arguments before",
                    "// processing by CEF and Chromium. The |process_type| value will be NULL for",
                    "// the browser process. Do not keep a reference to the cef_command_line_t",
                    "// object passed to this function. The CefSettings.command_line_args_disabled",
                    "// value can be used to start with an NULL command-line object. Any values",
                    "// specified in CefSettings that equate to command-line arguments will be set",
                    "// before this function is called. Be cautious when using this function to",
                    "// modify command-line arguments for non-browser processes as this may result",
                    "// in undefined behavior including crashes.",
                    "///"
                ],
                "decl": "void (*on_before_command_line_processing) (struct _cef_app_t *, const cef_string_t *, struct _cef_command_line_t *)",
                "name": "on_before_command_line_processing",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_app_t"
                    ],
                    [
                        "struct _cef_scheme_registrar_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Provides an opportunity to register custom schemes. Do not keep a reference",
                    "// to the |registrar| object. This function is called on the main thread for",
                    "// each process and the registered schemes should be the same across all",
                    "// processes.",
                    "///"
                ],
                "decl": "void (*on_register_custom_schemes) (struct _cef_app_t *, struct _cef_scheme_registrar_t *)",
                "name": "on_register_custom_schemes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_app_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for resource bundle events. If",
                    "// CefSettings.pack_loading_disabled is true (1) a handler must be returned.",
                    "// If no handler is returned resources will be loaded from pack files. This",
                    "// function is called by the browser and render processes on multiple threads.",
                    "///"
                ],
                "decl": "struct _cef_resource_bundle_handler_t * (*get_resource_bundle_handler) (struct _cef_app_t *)",
                "name": "get_resource_bundle_handler",
                "ret": [
                    "struct _cef_resource_bundle_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_app_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for functionality specific to the browser process. This",
                    "// function is called on multiple threads in the browser process.",
                    "///"
                ],
                "decl": "struct _cef_browser_process_handler_t * (*get_browser_process_handler) (struct _cef_app_t *)",
                "name": "get_browser_process_handler",
                "ret": [
                    "struct _cef_browser_process_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_app_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for functionality specific to the render process. This",
                    "// function is called on the render process main thread.",
                    "///"
                ],
                "decl": "struct _cef_render_process_handler_t * (*get_render_process_handler) (struct _cef_app_t *)",
                "name": "get_render_process_handler",
                "ret": [
                    "struct _cef_render_process_handler_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_audio_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle audio events.",
            "///"
        ],
        "name": "cef_audio_handler_t",
        "path": "include/capi/cef_audio_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_audio_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "cef_audio_parameters_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread to allow configuration of audio stream parameters.",
                    "// Return true (1) to proceed with audio stream capture, or false (0) to",
                    "// cancel it. All members of |params| can optionally be configured here, but",
                    "// they are also pre-filled with some sensible defaults.",
                    "///"
                ],
                "decl": "int (*get_audio_parameters) (struct _cef_audio_handler_t *, struct _cef_browser_t *, cef_audio_parameters_t *)",
                "name": "get_audio_parameters",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_audio_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_audio_parameters_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called on a browser audio capture thread when the browser starts streaming",
                    "// audio. OnAudioSteamStopped will always be called after",
                    "// OnAudioStreamStarted; both functions may be called multiple times for the",
                    "// same browser. |params| contains the audio parameters like sample rate and",
                    "// channel layout. |channels| is the number of channels.",
                    "///"
                ],
                "decl": "void (*on_audio_stream_started) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const cef_audio_parameters_t *, int)",
                "name": "on_audio_stream_started",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_audio_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        [
                            "const float"
                        ]
                    ],
                    "int",
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Called on the audio stream thread when a PCM packet is received for the",
                    "// stream. |data| is an array representing the raw PCM data as a floating",
                    "// point type, i.e. 4-byte value(s). |frames| is the number of frames in the",
                    "// PCM packet. |pts| is the presentation timestamp (in milliseconds since the",
                    "// Unix Epoch) and represents the time at which the decompressed packet should",
                    "// be presented to the user. Based on |frames| and the |channel_layout| value",
                    "// passed to OnAudioStreamStarted you can calculate the size of the |data|",
                    "// array in bytes.",
                    "///"
                ],
                "decl": "void (*on_audio_stream_packet) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const float **, int, int64)",
                "name": "on_audio_stream_packet",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_audio_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread when the stream has stopped. OnAudioSteamStopped",
                    "// will always be called after OnAudioStreamStarted; both functions may be",
                    "// called multiple times for the same stream.",
                    "///"
                ],
                "decl": "void (*on_audio_stream_stopped) (struct _cef_audio_handler_t *, struct _cef_browser_t *)",
                "name": "on_audio_stream_stopped",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_audio_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI or audio stream thread when an error occurred. During the",
                    "// stream creation phase this callback will be called on the UI thread while",
                    "// in the capturing phase it will be called on the audio stream thread. The",
                    "// stream will be stopped immediately.",
                    "///"
                ],
                "decl": "void (*on_audio_stream_error) (struct _cef_audio_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_audio_stream_error",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_audio_parameters_t": {
        "comment": [
            "///",
            "// Structure representing the audio parameters for setting up the audio handler.",
            "///"
        ],
        "name": "cef_audio_parameters_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Layout of the audio channels",
                    "///"
                ],
                "name": "channel_layout",
                "type": "cef_channel_layout_t"
            },
            {
                "comment": [
                    "///",
                    "// Sample rate",
                    "//"
                ],
                "name": "sample_rate",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Number of frames per buffer",
                    "///"
                ],
                "name": "frames_per_buffer",
                "type": "int"
            }
        ]
    },
    "_cef_auth_callback_t": {
        "comment": [
            "///",
            "// Callback structure used for asynchronous continuation of authentication",
            "// requests.",
            "///"
        ],
        "name": "cef_auth_callback_t",
        "path": "include/capi/cef_auth_callback_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_auth_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Continue the authentication request.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_auth_callback_t *, const cef_string_t *, const cef_string_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_auth_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the authentication request.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_auth_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_base_ref_counted_t": {
        "comment": [
            "///",
            "// All ref-counted framework structures must include this structure first.",
            "///"
        ],
        "name": "cef_base_ref_counted_t",
        "path": "include/capi/cef_base_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Size of the data structure.",
                    "///"
                ],
                "name": "size",
                "type": "size_t"
            },
            {
                "args": [
                    [
                        "struct _cef_base_ref_counted_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to increment the reference count for the object. Should be called",
                    "// for every new copy of a pointer to a given object.",
                    "///"
                ],
                "decl": "void (*add_ref) (struct _cef_base_ref_counted_t *)",
                "name": "add_ref",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_base_ref_counted_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to decrement the reference count for the object. If the reference",
                    "// count falls to 0 the object should self-delete. Returns true (1) if the",
                    "// resulting reference count is 0.",
                    "///"
                ],
                "decl": "int (*release) (struct _cef_base_ref_counted_t *)",
                "name": "release",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_base_ref_counted_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the current reference count is 1.",
                    "///"
                ],
                "decl": "int (*has_one_ref) (struct _cef_base_ref_counted_t *)",
                "name": "has_one_ref",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_base_ref_counted_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the current reference count is at least 1.",
                    "///"
                ],
                "decl": "int (*has_at_least_one_ref) (struct _cef_base_ref_counted_t *)",
                "name": "has_at_least_one_ref",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_base_scoped_t": {
        "comment": [
            "///",
            "// All scoped framework structures must include this structure first.",
            "///"
        ],
        "name": "cef_base_scoped_t",
        "path": "include/capi/cef_base_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Size of the data structure.",
                    "///"
                ],
                "name": "size",
                "type": "size_t"
            },
            {
                "args": [
                    [
                        "struct _cef_base_scoped_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to delete this object. May be NULL if the object is not owned.",
                    "///"
                ],
                "decl": "void (*del) (struct _cef_base_scoped_t *)",
                "name": "del",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_before_download_callback_t": {
        "comment": [
            "///",
            "// Callback structure used to asynchronously continue a download.",
            "///"
        ],
        "name": "cef_before_download_callback_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_before_download_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Call to continue the download. Set |download_path| to the full file path",
                    "// for the download including the file name or leave blank to use the",
                    "// suggested name and the default temp directory. Set |show_dialog| to true",
                    "// (1) if you do wish to show the default \"Save As\" dialog.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_before_download_callback_t *, const cef_string_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_binary_value_t": {
        "comment": [
            "///",
            "// Structure representing a binary value. Can be used on any process and thread.",
            "///"
        ],
        "name": "cef_binary_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. This object may become invalid if",
                    "// the underlying data is owned by another object (e.g. list or dictionary)",
                    "// and that other object is then modified or destroyed. Do not call any other",
                    "// functions if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_binary_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is currently owned by another object.",
                    "///"
                ],
                "decl": "int (*is_owned) (struct _cef_binary_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ],
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have the same underlying",
                    "// data.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_binary_value_t *, struct _cef_binary_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ],
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have an equivalent",
                    "// underlying value but are not necessarily the same object.",
                    "///"
                ],
                "decl": "int (*is_equal) (struct _cef_binary_value_t *, struct _cef_binary_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a copy of this object. The data in this object will also be copied.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*copy) (struct _cef_binary_value_t *)",
                "name": "copy",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the data size.",
                    "///"
                ],
                "decl": "size_t (*get_size) (struct _cef_binary_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_binary_value_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Read up to |buffer_size| number of bytes into |buffer|. Reading begins at",
                    "// the specified byte |data_offset|. Returns the number of bytes read.",
                    "///"
                ],
                "decl": "size_t (*get_data) (struct _cef_binary_value_t *, void *, size_t, size_t)",
                "name": "get_data",
                "ret": "size_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_box_layout_settings_t": {
        "comment": [
            "///",
            "// Settings used when initializing a CefBoxLayout.",
            "///"
        ],
        "name": "cef_box_layout_settings_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// If true (1) the layout will be horizontal, otherwise the layout will be",
                    "// vertical.",
                    "///"
                ],
                "name": "horizontal",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Adds additional horizontal space between the child view area and the host",
                    "// view border.",
                    "///"
                ],
                "name": "inside_border_horizontal_spacing",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Adds additional vertical space between the child view area and the host",
                    "// view border.",
                    "///"
                ],
                "name": "inside_border_vertical_spacing",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Adds additional space around the child view area.",
                    "///"
                ],
                "name": "inside_border_insets",
                "type": "cef_insets_t"
            },
            {
                "comment": [
                    "///",
                    "// Adds additional space between child views.",
                    "///"
                ],
                "name": "between_child_spacing",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Specifies where along the main axis the child views should be laid out.",
                    "///"
                ],
                "name": "main_axis_alignment",
                "type": "cef_main_axis_alignment_t"
            },
            {
                "comment": [
                    "///",
                    "// Specifies where along the cross axis the child views should be laid out.",
                    "///"
                ],
                "name": "cross_axis_alignment",
                "type": "cef_cross_axis_alignment_t"
            },
            {
                "comment": [
                    "///",
                    "// Minimum cross axis size.",
                    "///"
                ],
                "name": "minimum_cross_axis_size",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Default flex for views when none is specified via CefBoxLayout methods.",
                    "// Using the preferred size as the basis, free space along the main axis is",
                    "// distributed to views in the ratio of their flex weights. Similarly, if the",
                    "// views will overflow the parent, space is subtracted in these ratios. A flex",
                    "// of 0 means this view is not resized. Flex values must not be negative.",
                    "///"
                ],
                "name": "default_flex",
                "type": "int"
            }
        ]
    },
    "_cef_browser_host_t": {
        "comment": [
            "///",
            "// Structure used to represent the browser process aspects of a browser window.",
            "// The functions of this structure can only be called in the browser process.",
            "// They may be called on any thread in that process unless otherwise indicated",
            "// in the comments.",
            "///"
        ],
        "name": "cef_browser_host_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the hosted browser object.",
                    "///"
                ],
                "decl": "struct _cef_browser_t * (*get_browser) (struct _cef_browser_host_t *)",
                "name": "get_browser",
                "ret": [
                    "struct _cef_browser_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Request that the browser close. The JavaScript 'onbeforeunload' event will",
                    "// be fired. If |force_close| is false (0) the event handler, if any, will be",
                    "// allowed to prompt the user and the user can optionally cancel the close. If",
                    "// |force_close| is true (1) the prompt will not be displayed and the close",
                    "// will proceed. Results in a call to cef_life_span_handler_t::do_close() if",
                    "// the event handler allows the close or if |force_close| is true (1). See",
                    "// cef_life_span_handler_t::do_close() documentation for additional usage",
                    "// information.",
                    "///"
                ],
                "decl": "void (*close_browser) (struct _cef_browser_host_t *, int)",
                "name": "close_browser",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Helper for closing a browser. Call this function from the top-level window",
                    "// close handler. Internally this calls CloseBrowser(false (0)) if the close",
                    "// has not yet been initiated. This function returns false (0) while the close",
                    "// is pending and true (1) after the close has completed. See close_browser()",
                    "// and cef_life_span_handler_t::do_close() documentation for additional usage",
                    "// information. This function must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*try_close_browser) (struct _cef_browser_host_t *)",
                "name": "try_close_browser",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set whether the browser is focused.",
                    "///"
                ],
                "decl": "void (*set_focus) (struct _cef_browser_host_t *, int)",
                "name": "set_focus",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "decl": "void * (*get_window_handle) (struct _cef_browser_host_t *)",
                "name": "get_window_handle",
                "ret": [
                    "void"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "decl": "void * (*get_opener_window_handle) (struct _cef_browser_host_t *)",
                "name": "get_opener_window_handle",
                "ret": [
                    "void"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this browser is wrapped in a cef_browser_view_t.",
                    "///"
                ],
                "decl": "int (*has_view) (struct _cef_browser_host_t *)",
                "name": "has_view",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the client for this browser.",
                    "///"
                ],
                "decl": "struct _cef_client_t * (*get_client) (struct _cef_browser_host_t *)",
                "name": "get_client",
                "ret": [
                    "struct _cef_client_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the request context for this browser.",
                    "///"
                ],
                "decl": "struct _cef_request_context_t * (*get_request_context) (struct _cef_browser_host_t *)",
                "name": "get_request_context",
                "ret": [
                    "struct _cef_request_context_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the current zoom level. The default zoom level is 0.0. This function",
                    "// can only be called on the UI thread.",
                    "///"
                ],
                "decl": "double (*get_zoom_level) (struct _cef_browser_host_t *)",
                "name": "get_zoom_level",
                "ret": "double",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "double"
                ],
                "comment": [
                    "///",
                    "// Change the zoom level to the specified value. Specify 0.0 to reset the zoom",
                    "// level. If called on the UI thread the change will be applied immediately.",
                    "// Otherwise, the change will be applied asynchronously on the UI thread.",
                    "///"
                ],
                "decl": "void (*set_zoom_level) (struct _cef_browser_host_t *, double)",
                "name": "set_zoom_level",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "cef_file_dialog_mode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_string_list_t",
                    "int",
                    [
                        "struct _cef_run_file_dialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call to run a file chooser dialog. Only a single file chooser dialog may be",
                    "// pending at any given time. |mode| represents the type of dialog to display.",
                    "// |title| to the title to be used for the dialog and may be NULL to show the",
                    "// default title (\"Open\" or \"Save\" depending on the mode). |default_file_path|",
                    "// is the path with optional directory and/or file name component that will be",
                    "// initially selected in the dialog. |accept_filters| are used to restrict the",
                    "// selectable file types and may any combination of (a) valid lower-cased MIME",
                    "// types (e.g. \"text/*\" or \"image/*\"), (b) individual file extensions (e.g.",
                    "// \".txt\" or \".png\"), or (c) combined description and file extension delimited",
                    "// using \"|\" and \";\" (e.g. \"Image Types|.png;.gif;.jpg\").",
                    "// |selected_accept_filter| is the 0-based index of the filter that will be",
                    "// selected by default. |callback| will be executed after the dialog is",
                    "// dismissed or immediately if another dialog is already pending. The dialog",
                    "// will be initiated asynchronously on the UI thread.",
                    "///"
                ],
                "decl": "void (*run_file_dialog) (struct _cef_browser_host_t *, cef_file_dialog_mode_t, const cef_string_t *, const cef_string_t *, cef_string_list_t, int, struct _cef_run_file_dialog_callback_t *)",
                "name": "run_file_dialog",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Download the file at |url| using cef_download_handler_t.",
                    "///"
                ],
                "decl": "void (*start_download) (struct _cef_browser_host_t *, const cef_string_t *)",
                "name": "start_download",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    "uint32",
                    "int",
                    [
                        "struct _cef_download_image_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Download |image_url| and execute |callback| on completion with the images",
                    "// received from the renderer. If |is_favicon| is true (1) then cookies are",
                    "// not sent and not accepted during download. Images with density independent",
                    "// pixel (DIP) sizes larger than |max_image_size| are filtered out from the",
                    "// image results. Versions of the image at different scale factors may be",
                    "// downloaded up to the maximum scale factor supported by the system. If there",
                    "// are no image results <= |max_image_size| then the smallest image is resized",
                    "// to |max_image_size| and is the only result. A |max_image_size| of 0 means",
                    "// unlimited. If |bypass_cache| is true (1) then |image_url| is requested from",
                    "// the server even if it is present in the browser cache.",
                    "///"
                ],
                "decl": "void (*download_image) (struct _cef_browser_host_t *, const cef_string_t *, int, uint32, int, struct _cef_download_image_callback_t *)",
                "name": "download_image",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Print the current browser contents.",
                    "///"
                ],
                "decl": "void (*print) (struct _cef_browser_host_t *)",
                "name": "print",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const struct _cef_pdf_print_settings_t"
                    ],
                    [
                        "struct _cef_pdf_print_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Print the current browser contents to the PDF file specified by |path| and",
                    "// execute |callback| on completion. The caller is responsible for deleting",
                    "// |path| when done. For PDF printing to work on Linux you must implement the",
                    "// cef_print_handler_t::GetPdfPaperSize function.",
                    "///"
                ],
                "decl": "void (*print_to_pdf) (struct _cef_browser_host_t *, const cef_string_t *, const struct _cef_pdf_print_settings_t *, struct _cef_pdf_print_callback_t *)",
                "name": "print_to_pdf",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Search for |searchText|. |identifier| must be a unique ID and these IDs",
                    "// must strictly increase so that newer requests always have greater IDs than",
                    "// older requests. If |identifier| is zero or less than the previous ID value",
                    "// then it will be automatically assigned a new valid ID. |forward| indicates",
                    "// whether to search forward or backward within the page. |matchCase|",
                    "// indicates whether the search should be case-sensitive. |findNext| indicates",
                    "// whether this is the first request or a follow-up. The cef_find_handler_t",
                    "// instance, if any, returned via cef_client_t::GetFindHandler will be called",
                    "// to report find results.",
                    "///"
                ],
                "decl": "void (*find) (struct _cef_browser_host_t *, int, const cef_string_t *, int, int, int)",
                "name": "find",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Cancel all searches that are currently going on.",
                    "///"
                ],
                "decl": "void (*stop_finding) (struct _cef_browser_host_t *, int)",
                "name": "stop_finding",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_window_info_t"
                    ],
                    [
                        "struct _cef_client_t"
                    ],
                    [
                        "const struct _cef_browser_settings_t"
                    ],
                    [
                        "const cef_point_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Open developer tools (DevTools) in its own browser. The DevTools browser",
                    "// will remain associated with this browser. If the DevTools browser is",
                    "// already open then it will be focused, in which case the |windowInfo|,",
                    "// |client| and |settings| parameters will be ignored. If |inspect_element_at|",
                    "// is non-NULL then the element at the specified (x,y) location will be",
                    "// inspected. The |windowInfo| parameter will be ignored if this browser is",
                    "// wrapped in a cef_browser_view_t.",
                    "///"
                ],
                "decl": "void (*show_dev_tools) (struct _cef_browser_host_t *, const struct _cef_window_info_t *, struct _cef_client_t *, const struct _cef_browser_settings_t *, const cef_point_t *)",
                "name": "show_dev_tools",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Explicitly close the associated DevTools browser, if any.",
                    "///"
                ],
                "decl": "void (*close_dev_tools) (struct _cef_browser_host_t *)",
                "name": "close_dev_tools",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this browser currently has an associated DevTools",
                    "// browser. Must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*has_dev_tools) (struct _cef_browser_host_t *)",
                "name": "has_dev_tools",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Send a function call message over the DevTools protocol. |message| must be",
                    "// a UTF8-encoded JSON dictionary that contains \"id\" (int), \"function\"",
                    "// (string) and \"params\" (dictionary, optional) values. See the DevTools",
                    "// protocol documentation at https://chromedevtools.github.io/devtools-",
                    "// protocol/ for details of supported functions and the expected \"params\"",
                    "// dictionary contents. |message| will be copied if necessary. This function",
                    "// will return true (1) if called on the UI thread and the message was",
                    "// successfully submitted for validation, otherwise false (0). Validation will",
                    "// be applied asynchronously and any messages that fail due to formatting",
                    "// errors or missing parameters may be discarded without notification. Prefer",
                    "// ExecuteDevToolsMethod if a more structured approach to message formatting",
                    "// is desired.",
                    "//",
                    "// Every valid function call will result in an asynchronous function result or",
                    "// error message that references the sent message \"id\". Event messages are",
                    "// received while notifications are enabled (for example, between function",
                    "// calls for \"Page.enable\" and \"Page.disable\"). All received messages will be",
                    "// delivered to the observer(s) registered with AddDevToolsMessageObserver.",
                    "// See cef_dev_tools_message_observer_t::OnDevToolsMessage documentation for",
                    "// details of received message contents.",
                    "//",
                    "// Usage of the SendDevToolsMessage, ExecuteDevToolsMethod and",
                    "// AddDevToolsMessageObserver functions does not require an active DevTools",
                    "// front-end or remote-debugging session. Other active DevTools sessions will",
                    "// continue to function independently. However, any modification of global",
                    "// browser state by one session may not be reflected in the UI of other",
                    "// sessions.",
                    "//",
                    "// Communication with the DevTools front-end (when displayed) can be logged",
                    "// for development purposes by passing the `--devtools-protocol-log-",
                    "// file=<path>` command-line flag.",
                    "///"
                ],
                "decl": "int (*send_dev_tools_message) (struct _cef_browser_host_t *, const void *, size_t)",
                "name": "send_dev_tools_message",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute a function call over the DevTools protocol. This is a more",
                    "// structured version of SendDevToolsMessage. |message_id| is an incremental",
                    "// number that uniquely identifies the message (pass 0 to have the next number",
                    "// assigned automatically based on previous values). |function| is the",
                    "// function name. |params| are the function parameters, which may be NULL. See",
                    "// the DevTools protocol documentation (linked above) for details of supported",
                    "// functions and the expected |params| dictionary contents. This function will",
                    "// return the assigned message ID if called on the UI thread and the message",
                    "// was successfully submitted for validation, otherwise 0. See the",
                    "// SendDevToolsMessage documentation for additional usage information.",
                    "///"
                ],
                "decl": "int (*execute_dev_tools_method) (struct _cef_browser_host_t *, int, const cef_string_t *, struct _cef_dictionary_value_t *)",
                "name": "execute_dev_tools_method",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add an observer for DevTools protocol messages (function results and",
                    "// events). The observer will remain registered until the returned",
                    "// Registration object is destroyed. See the SendDevToolsMessage documentation",
                    "// for additional usage information.",
                    "///"
                ],
                "decl": "struct _cef_registration_t * (*add_dev_tools_message_observer) (struct _cef_browser_host_t *, struct _cef_dev_tools_message_observer_t *)",
                "name": "add_dev_tools_message_observer",
                "ret": [
                    "struct _cef_registration_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "struct _cef_navigation_entry_visitor_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Retrieve a snapshot of current navigation entries as values sent to the",
                    "// specified visitor. If |current_only| is true (1) only the current",
                    "// navigation entry will be sent, otherwise all navigation entries will be",
                    "// sent.",
                    "///"
                ],
                "decl": "void (*get_navigation_entries) (struct _cef_browser_host_t *, struct _cef_navigation_entry_visitor_t *, int)",
                "name": "get_navigation_entries",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// If a misspelled word is currently selected in an editable node calling this",
                    "// function will replace it with the specified |word|.",
                    "///"
                ],
                "decl": "void (*replace_misspelling) (struct _cef_browser_host_t *, const cef_string_t *)",
                "name": "replace_misspelling",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add the specified |word| to the spelling dictionary.",
                    "///"
                ],
                "decl": "void (*add_word_to_dictionary) (struct _cef_browser_host_t *, const cef_string_t *)",
                "name": "add_word_to_dictionary",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if window rendering is disabled.",
                    "///"
                ],
                "decl": "int (*is_window_rendering_disabled) (struct _cef_browser_host_t *)",
                "name": "is_window_rendering_disabled",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Notify the browser that the widget has been resized. The browser will first",
                    "// call cef_render_handler_t::GetViewRect to get the new size and then call",
                    "// cef_render_handler_t::OnPaint asynchronously with the updated regions. This",
                    "// function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*was_resized) (struct _cef_browser_host_t *)",
                "name": "was_resized",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Notify the browser that it has been hidden or shown. Layouting and",
                    "// cef_render_handler_t::OnPaint notification will stop when the browser is",
                    "// hidden. This function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*was_hidden) (struct _cef_browser_host_t *, int)",
                "name": "was_hidden",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send a notification to the browser that the screen info has changed. The",
                    "// browser will then call cef_render_handler_t::GetScreenInfo to update the",
                    "// screen information with the new values. This simulates moving the webview",
                    "// window from one display to another, or changing the properties of the",
                    "// current display. This function is only used when window rendering is",
                    "// disabled.",
                    "///"
                ],
                "decl": "void (*notify_screen_info_changed) (struct _cef_browser_host_t *)",
                "name": "notify_screen_info_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "cef_paint_element_type_t"
                ],
                "comment": [
                    "///",
                    "// Invalidate the view. The browser will call cef_render_handler_t::OnPaint",
                    "// asynchronously. This function is only used when window rendering is",
                    "// disabled.",
                    "///"
                ],
                "decl": "void (*invalidate) (struct _cef_browser_host_t *, cef_paint_element_type_t)",
                "name": "invalidate",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Issue a BeginFrame request to Chromium.  Only valid when",
                    "// cef_window_tInfo::external_begin_frame_enabled is set to true (1).",
                    "///"
                ],
                "decl": "void (*send_external_begin_frame) (struct _cef_browser_host_t *)",
                "name": "send_external_begin_frame",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_key_event_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send a key event to the browser.",
                    "///"
                ],
                "decl": "void (*send_key_event) (struct _cef_browser_host_t *, const struct _cef_key_event_t *)",
                "name": "send_key_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ],
                    "cef_mouse_button_type_t",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Send a mouse click event to the browser. The |x| and |y| coordinates are",
                    "// relative to the upper-left corner of the view.",
                    "///"
                ],
                "decl": "void (*send_mouse_click_event) (struct _cef_browser_host_t *, const struct _cef_mouse_event_t *, cef_mouse_button_type_t, int, int)",
                "name": "send_mouse_click_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Send a mouse move event to the browser. The |x| and |y| coordinates are",
                    "// relative to the upper-left corner of the view.",
                    "///"
                ],
                "decl": "void (*send_mouse_move_event) (struct _cef_browser_host_t *, const struct _cef_mouse_event_t *, int)",
                "name": "send_mouse_move_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Send a mouse wheel event to the browser. The |x| and |y| coordinates are",
                    "// relative to the upper-left corner of the view. The |deltaX| and |deltaY|",
                    "// values represent the movement delta in the X and Y directions respectively.",
                    "// In order to scroll inside select popups with window rendering disabled",
                    "// cef_render_handler_t::GetScreenPoint should be implemented properly.",
                    "///"
                ],
                "decl": "void (*send_mouse_wheel_event) (struct _cef_browser_host_t *, const struct _cef_mouse_event_t *, int, int)",
                "name": "send_mouse_wheel_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_touch_event_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send a touch event to the browser for a windowless browser.",
                    "///"
                ],
                "decl": "void (*send_touch_event) (struct _cef_browser_host_t *, const struct _cef_touch_event_t *)",
                "name": "send_touch_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Send a focus event to the browser.",
                    "///"
                ],
                "decl": "void (*send_focus_event) (struct _cef_browser_host_t *, int)",
                "name": "send_focus_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send a capture lost event to the browser.",
                    "///"
                ],
                "decl": "void (*send_capture_lost_event) (struct _cef_browser_host_t *)",
                "name": "send_capture_lost_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Notify the browser that the window hosting it is about to be moved or",
                    "// resized. This function is only used on Windows and Linux.",
                    "///"
                ],
                "decl": "void (*notify_move_or_resize_started) (struct _cef_browser_host_t *)",
                "name": "notify_move_or_resize_started",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the maximum rate in frames per second (fps) that",
                    "// cef_render_handler_t:: OnPaint will be called for a windowless browser. The",
                    "// actual fps may be lower if the browser cannot generate frames at the",
                    "// requested rate. The minimum value is 1 and the maximum value is 60 (default",
                    "// 30). This function can only be called on the UI thread.",
                    "///"
                ],
                "decl": "int (*get_windowless_frame_rate) (struct _cef_browser_host_t *)",
                "name": "get_windowless_frame_rate",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the maximum rate in frames per second (fps) that cef_render_handler_t::",
                    "// OnPaint will be called for a windowless browser. The actual fps may be",
                    "// lower if the browser cannot generate frames at the requested rate. The",
                    "// minimum value is 1 and the maximum value is 60 (default 30). Can also be",
                    "// set at browser creation via cef_browser_tSettings.windowless_frame_rate.",
                    "///"
                ],
                "decl": "void (*set_windowless_frame_rate) (struct _cef_browser_host_t *, int)",
                "name": "set_windowless_frame_rate",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "size_t",
                    [
                        "const cef_composition_underline_t"
                    ],
                    [
                        "const cef_range_t"
                    ],
                    [
                        "const cef_range_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Begins a new composition or updates the existing composition. Blink has a",
                    "// special node (a composition node) that allows the input function to change",
                    "// text without affecting other DOM nodes. |text| is the optional text that",
                    "// will be inserted into the composition node. |underlines| is an optional set",
                    "// of ranges that will be underlined in the resulting text.",
                    "// |replacement_range| is an optional range of the existing text that will be",
                    "// replaced. |selection_range| is an optional range of the resulting text that",
                    "// will be selected after insertion or replacement. The |replacement_range|",
                    "// value is only used on OS X.",
                    "//",
                    "// This function may be called multiple times as the composition changes. When",
                    "// the client is done making changes the composition should either be canceled",
                    "// or completed. To cancel the composition call ImeCancelComposition. To",
                    "// complete the composition call either ImeCommitText or",
                    "// ImeFinishComposingText. Completion is usually signaled when:",
                    "//   A. The client receives a WM_IME_COMPOSITION message with a GCS_RESULTSTR",
                    "//      flag (on Windows), or;",
                    "//   B. The client receives a \"commit\" signal of GtkIMContext (on Linux), or;",
                    "//   C. insertText of NSTextInput is called (on Mac).",
                    "//",
                    "// This function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*ime_set_composition) (struct _cef_browser_host_t *, const cef_string_t *, size_t, const cef_composition_underline_t *, const cef_range_t *, const cef_range_t *)",
                "name": "ime_set_composition",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_range_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Completes the existing composition by optionally inserting the specified",
                    "// |text| into the composition node. |replacement_range| is an optional range",
                    "// of the existing text that will be replaced. |relative_cursor_pos| is where",
                    "// the cursor will be positioned relative to the current cursor position. See",
                    "// comments on ImeSetComposition for usage. The |replacement_range| and",
                    "// |relative_cursor_pos| values are only used on OS X. This function is only",
                    "// used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*ime_commit_text) (struct _cef_browser_host_t *, const cef_string_t *, const cef_range_t *, int)",
                "name": "ime_commit_text",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Completes the existing composition by applying the current composition node",
                    "// contents. If |keep_selection| is false (0) the current selection, if any,",
                    "// will be discarded. See comments on ImeSetComposition for usage. This",
                    "// function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*ime_finish_composing_text) (struct _cef_browser_host_t *, int)",
                "name": "ime_finish_composing_text",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancels the existing composition and discards the composition node contents",
                    "// without applying them. See comments on ImeSetComposition for usage. This",
                    "// function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*ime_cancel_composition) (struct _cef_browser_host_t *)",
                "name": "ime_cancel_composition",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "comment": [
                    "///",
                    "// Call this function when the user drags the mouse into the web view (before",
                    "// calling DragTargetDragOver/DragTargetLeave/DragTargetDrop). |drag_data|",
                    "// should not contain file contents as this type of data is not allowed to be",
                    "// dragged into the web view. File contents can be removed using",
                    "// cef_drag_data_t::ResetFileContents (for example, if |drag_data| comes from",
                    "// cef_render_handler_t::StartDragging). This function is only used when",
                    "// window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*drag_target_drag_enter) (struct _cef_browser_host_t *, struct _cef_drag_data_t *, const struct _cef_mouse_event_t *, cef_drag_operations_mask_t)",
                "name": "drag_target_drag_enter",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "comment": [
                    "///",
                    "// Call this function each time the mouse is moved across the web view during",
                    "// a drag operation (after calling DragTargetDragEnter and before calling",
                    "// DragTargetDragLeave/DragTargetDrop). This function is only used when window",
                    "// rendering is disabled.",
                    "///"
                ],
                "decl": "void (*drag_target_drag_over) (struct _cef_browser_host_t *, const struct _cef_mouse_event_t *, cef_drag_operations_mask_t)",
                "name": "drag_target_drag_over",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call this function when the user drags the mouse out of the web view (after",
                    "// calling DragTargetDragEnter). This function is only used when window",
                    "// rendering is disabled.",
                    "///"
                ],
                "decl": "void (*drag_target_drag_leave) (struct _cef_browser_host_t *)",
                "name": "drag_target_drag_leave",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    [
                        "const struct _cef_mouse_event_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call this function when the user completes the drag operation by dropping",
                    "// the object onto the web view (after calling DragTargetDragEnter). The",
                    "// object being dropped is |drag_data|, given as an argument to the previous",
                    "// DragTargetDragEnter call. This function is only used when window rendering",
                    "// is disabled.",
                    "///"
                ],
                "decl": "void (*drag_target_drop) (struct _cef_browser_host_t *, const struct _cef_mouse_event_t *)",
                "name": "drag_target_drop",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int",
                    "int",
                    "cef_drag_operations_mask_t"
                ],
                "comment": [
                    "///",
                    "// Call this function when the drag operation started by a",
                    "// cef_render_handler_t::StartDragging call has ended either in a drop or by",
                    "// being cancelled. |x| and |y| are mouse coordinates relative to the upper-",
                    "// left corner of the view. If the web view is both the drag source and the",
                    "// drag target then all DragTarget* functions should be called before",
                    "// DragSource* mthods. This function is only used when window rendering is",
                    "// disabled.",
                    "///"
                ],
                "decl": "void (*drag_source_ended_at) (struct _cef_browser_host_t *, int, int, cef_drag_operations_mask_t)",
                "name": "drag_source_ended_at",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call this function when the drag operation started by a",
                    "// cef_render_handler_t::StartDragging call has completed. This function may",
                    "// be called immediately without first calling DragSourceEndedAt to cancel a",
                    "// drag operation. If the web view is both the drag source and the drag target",
                    "// then all DragTarget* functions should be called before DragSource* mthods.",
                    "// This function is only used when window rendering is disabled.",
                    "///"
                ],
                "decl": "void (*drag_source_system_drag_ended) (struct _cef_browser_host_t *)",
                "name": "drag_source_system_drag_ended",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the current visible navigation entry for this browser. This",
                    "// function can only be called on the UI thread.",
                    "///"
                ],
                "decl": "struct _cef_navigation_entry_t * (*get_visible_navigation_entry) (struct _cef_browser_host_t *)",
                "name": "get_visible_navigation_entry",
                "ret": [
                    "struct _cef_navigation_entry_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "cef_state_t"
                ],
                "comment": [
                    "///",
                    "// Set accessibility state for all frames. |accessibility_state| may be",
                    "// default, enabled or disabled. If |accessibility_state| is STATE_DEFAULT",
                    "// then accessibility will be disabled by default and the state may be further",
                    "// controlled with the \"force-renderer-accessibility\" and \"disable-renderer-",
                    "// accessibility\" command-line switches. If |accessibility_state| is",
                    "// STATE_ENABLED then accessibility will be enabled. If |accessibility_state|",
                    "// is STATE_DISABLED then accessibility will be completely disabled.",
                    "//",
                    "// For windowed browsers accessibility will be enabled in Complete mode (which",
                    "// corresponds to kAccessibilityModeComplete in Chromium). In this mode all",
                    "// platform accessibility objects will be created and managed by Chromium's",
                    "// internal implementation. The client needs only to detect the screen reader",
                    "// and call this function appropriately. For example, on macOS the client can",
                    "// handle the @\"AXEnhancedUserStructure\" accessibility attribute to detect",
                    "// VoiceOver state changes and on Windows the client can handle WM_GETOBJECT",
                    "// with OBJID_CLIENT to detect accessibility readers.",
                    "//",
                    "// For windowless browsers accessibility will be enabled in TreeOnly mode",
                    "// (which corresponds to kAccessibilityModeWebContentsOnly in Chromium). In",
                    "// this mode renderer accessibility is enabled, the full tree is computed, and",
                    "// events are passed to CefAccessibiltyHandler, but platform accessibility",
                    "// objects are not created. The client may implement platform accessibility",
                    "// objects using CefAccessibiltyHandler callbacks if desired.",
                    "///"
                ],
                "decl": "void (*set_accessibility_state) (struct _cef_browser_host_t *, cef_state_t)",
                "name": "set_accessibility_state",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int",
                    [
                        "const cef_size_t"
                    ],
                    [
                        "const cef_size_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Enable notifications of auto resize via",
                    "// cef_display_handler_t::OnAutoResize. Notifications are disabled by default.",
                    "// |min_size| and |max_size| define the range of allowed sizes.",
                    "///"
                ],
                "decl": "void (*set_auto_resize_enabled) (struct _cef_browser_host_t *, int, const cef_size_t *, const cef_size_t *)",
                "name": "set_auto_resize_enabled",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the extension hosted in this browser or NULL if no extension is",
                    "// hosted. See cef_request_context_t::LoadExtension for details.",
                    "///"
                ],
                "decl": "struct _cef_extension_t * (*get_extension) (struct _cef_browser_host_t *)",
                "name": "get_extension",
                "ret": [
                    "struct _cef_extension_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this browser is hosting an extension background script.",
                    "// Background hosts do not have a window and are not displayable. See",
                    "// cef_request_context_t::LoadExtension for details.",
                    "///"
                ],
                "decl": "int (*is_background_host) (struct _cef_browser_host_t *)",
                "name": "is_background_host",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "//  Set whether the browser's audio is muted.",
                    "///"
                ],
                "decl": "void (*set_audio_muted) (struct _cef_browser_host_t *, int)",
                "name": "set_audio_muted",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_host_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the browser's audio is muted.  This function can only",
                    "// be called on the UI thread.",
                    "///"
                ],
                "decl": "int (*is_audio_muted) (struct _cef_browser_host_t *)",
                "name": "is_audio_muted",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_browser_process_handler_t": {
        "comment": [
            "///",
            "// Structure used to implement browser process callbacks. The functions of this",
            "// structure will be called on the browser process main thread unless otherwise",
            "// indicated.",
            "///"
        ],
        "name": "cef_browser_process_handler_t",
        "path": "include/capi/cef_browser_process_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ],
                    "cef_string_list_t",
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread to retrieve the list of schemes",
                    "// that should support cookies. If |include_defaults| is true (1) the default",
                    "// schemes (\"http\", \"https\", \"ws\" and \"wss\") will also be supported. Providing",
                    "// an NULL |schemes| value and setting |include_defaults| to false (0) will",
                    "// disable all loading and saving of cookies.",
                    "//",
                    "// This state will apply to the cef_cookie_manager_t associated with the",
                    "// global cef_request_context_t. It will also be used as the initial state for",
                    "// any new cef_request_context_ts created by the client. After creating a new",
                    "// cef_request_context_t the cef_cookie_manager_t::SetSupportedSchemes",
                    "// function may be called on the associated cef_cookie_manager_t to futher",
                    "// override these values.",
                    "///"
                ],
                "decl": "void (*get_cookieable_schemes) (struct _cef_browser_process_handler_t *, cef_string_list_t, int *)",
                "name": "get_cookieable_schemes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread immediately after the CEF context",
                    "// has been initialized.",
                    "///"
                ],
                "decl": "void (*on_context_initialized) (struct _cef_browser_process_handler_t *)",
                "name": "on_context_initialized",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ],
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called before a child process is launched. Will be called on the browser",
                    "// process UI thread when launching a render process and on the browser",
                    "// process IO thread when launching a GPU or plugin process. Provides an",
                    "// opportunity to modify the child process command line. Do not keep a",
                    "// reference to |command_line| outside of this function.",
                    "///"
                ],
                "decl": "void (*on_before_child_process_launch) (struct _cef_browser_process_handler_t *, struct _cef_command_line_t *)",
                "name": "on_before_child_process_launch",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for printing on Linux. If a print handler is not",
                    "// provided then printing will not be supported on the Linux platform.",
                    "///"
                ],
                "decl": "struct _cef_print_handler_t * (*get_print_handler) (struct _cef_browser_process_handler_t *)",
                "name": "get_print_handler",
                "ret": [
                    "struct _cef_print_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ],
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Called from any thread when work has been scheduled for the browser process",
                    "// main (UI) thread. This callback is used in combination with CefSettings.",
                    "// external_message_pump and cef_do_message_loop_work() in cases where the CEF",
                    "// message loop must be integrated into an existing application message loop",
                    "// (see additional comments and warnings on CefDoMessageLoopWork). This",
                    "// callback should schedule a cef_do_message_loop_work() call to happen on the",
                    "// main (UI) thread. |delay_ms| is the requested delay in milliseconds. If",
                    "// |delay_ms| is <= 0 then the call should happen reasonably soon. If",
                    "// |delay_ms| is > 0 then the call should be scheduled to happen after the",
                    "// specified delay and any currently pending scheduled call should be",
                    "// cancelled.",
                    "///"
                ],
                "decl": "void (*on_schedule_message_pump_work) (struct _cef_browser_process_handler_t *, int64)",
                "name": "on_schedule_message_pump_work",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_process_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the default client for use with a newly created browser window. If",
                    "// null is returned the browser will be unmanaged (no callbacks will be",
                    "// executed for that browser) and application shutdown will be blocked until",
                    "// the browser window is closed manually. This function is currently only used",
                    "// with the chrome runtime.",
                    "///"
                ],
                "decl": "struct _cef_client_t * (*get_default_client) (struct _cef_browser_process_handler_t *)",
                "name": "get_default_client",
                "ret": [
                    "struct _cef_client_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_browser_settings_t": {
        "comment": [
            "///",
            "// Browser initialization settings. Specify NULL or 0 to get the recommended",
            "// default values. The consequences of using custom values may not be well",
            "// tested. Many of these and other settings can also configured using command-",
            "// line switches.",
            "///"
        ],
        "name": "cef_browser_settings_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Size of this structure.",
                    "///"
                ],
                "name": "size",
                "type": "size_t"
            },
            {
                "comment": [
                    "///",
                    "// The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint",
                    "// will be called for a windowless browser. The actual fps may be lower if",
                    "// the browser cannot generate frames at the requested rate. The minimum",
                    "// value is 1 and the maximum value is 60 (default 30). This value can also be",
                    "// changed dynamically via CefBrowserHost::SetWindowlessFrameRate.",
                    "///"
                ],
                "name": "windowless_frame_rate",
                "type": "int"
            },
            {
                "comment": [
                    "// The below values map to WebPreferences settings.",
                    "///",
                    "// Font settings.",
                    "///"
                ],
                "name": "standard_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "fixed_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "serif_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "sans_serif_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "cursive_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "fantasy_font_family",
                "type": "cef_string_t"
            },
            {
                "name": "default_font_size",
                "type": "int"
            },
            {
                "name": "default_fixed_font_size",
                "type": "int"
            },
            {
                "name": "minimum_font_size",
                "type": "int"
            },
            {
                "name": "minimum_logical_font_size",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Default encoding for Web content. If empty \"ISO-8859-1\" will be used. Also",
                    "// configurable using the \"default-encoding\" command-line switch.",
                    "///"
                ],
                "name": "default_encoding",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls the loading of fonts from remote sources. Also configurable using",
                    "// the \"disable-remote-fonts\" command-line switch.",
                    "///"
                ],
                "name": "remote_fonts",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether JavaScript can be executed. Also configurable using the",
                    "// \"disable-javascript\" command-line switch.",
                    "///"
                ],
                "name": "javascript",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether JavaScript can be used to close windows that were not",
                    "// opened via JavaScript. JavaScript can still be used to close windows that",
                    "// were opened via JavaScript or that have no back/forward history. Also",
                    "// configurable using the \"disable-javascript-close-windows\" command-line",
                    "// switch.",
                    "///"
                ],
                "name": "javascript_close_windows",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether JavaScript can access the clipboard. Also configurable",
                    "// using the \"disable-javascript-access-clipboard\" command-line switch.",
                    "///"
                ],
                "name": "javascript_access_clipboard",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether DOM pasting is supported in the editor via",
                    "// execCommand(\"paste\"). The |javascript_access_clipboard| setting must also",
                    "// be enabled. Also configurable using the \"disable-javascript-dom-paste\"",
                    "// command-line switch.",
                    "///"
                ],
                "name": "javascript_dom_paste",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether any plugins will be loaded. Also configurable using the",
                    "// \"disable-plugins\" command-line switch.",
                    "///"
                ],
                "name": "plugins",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether file URLs will have access to all URLs. Also configurable",
                    "// using the \"allow-universal-access-from-files\" command-line switch.",
                    "///"
                ],
                "name": "universal_access_from_file_urls",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether file URLs will have access to other file URLs. Also",
                    "// configurable using the \"allow-access-from-files\" command-line switch.",
                    "///"
                ],
                "name": "file_access_from_file_urls",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether web security restrictions (same-origin policy) will be",
                    "// enforced. Disabling this setting is not recommend as it will allow risky",
                    "// security behavior such as cross-site scripting (XSS). Also configurable",
                    "// using the \"disable-web-security\" command-line switch.",
                    "///"
                ],
                "name": "web_security",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether image URLs will be loaded from the network. A cached image",
                    "// will still be rendered if requested. Also configurable using the",
                    "// \"disable-image-loading\" command-line switch.",
                    "///"
                ],
                "name": "image_loading",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether standalone images will be shrunk to fit the page. Also",
                    "// configurable using the \"image-shrink-standalone-to-fit\" command-line",
                    "// switch.",
                    "///"
                ],
                "name": "image_shrink_standalone_to_fit",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether text areas can be resized. Also configurable using the",
                    "// \"disable-text-area-resize\" command-line switch.",
                    "///"
                ],
                "name": "text_area_resize",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether the tab key can advance focus to links. Also configurable",
                    "// using the \"disable-tab-to-links\" command-line switch.",
                    "///"
                ],
                "name": "tab_to_links",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether local storage can be used. Also configurable using the",
                    "// \"disable-local-storage\" command-line switch.",
                    "///"
                ],
                "name": "local_storage",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether databases can be used. Also configurable using the",
                    "// \"disable-databases\" command-line switch.",
                    "///"
                ],
                "name": "databases",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether the application cache can be used. Also configurable using",
                    "// the \"disable-application-cache\" command-line switch.",
                    "///"
                ],
                "name": "application_cache",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Controls whether WebGL can be used. Note that WebGL requires hardware",
                    "// support and may not work on all systems even when enabled. Also",
                    "// configurable using the \"disable-webgl\" command-line switch.",
                    "///"
                ],
                "name": "webgl",
                "type": "cef_state_t"
            },
            {
                "comment": [
                    "///",
                    "// Background color used for the browser before a document is loaded and when",
                    "// no document color is specified. The alpha component must be either fully",
                    "// opaque (0xFF) or fully transparent (0x00). If the alpha component is fully",
                    "// opaque then the RGB components will be used as the background color. If the",
                    "// alpha component is fully transparent for a windowed browser then the",
                    "// CefSettings.background_color value will be used. If the alpha component is",
                    "// fully transparent for a windowless (off-screen) browser then transparent",
                    "// painting will be enabled.",
                    "///"
                ],
                "name": "background_color",
                "type": "cef_color_t"
            },
            {
                "comment": [
                    "///",
                    "// Comma delimited ordered list of language codes without any whitespace that",
                    "// will be used in the \"Accept-Language\" HTTP header. May be set globally",
                    "// using the CefBrowserSettings.accept_language_list value. If both values are",
                    "// empty then \"en-US,en\" will be used.",
                    "///"
                ],
                "name": "accept_language_list",
                "type": "cef_string_t"
            }
        ]
    },
    "_cef_browser_t": {
        "comment": [
            "///",
            "// Structure used to represent a browser window. When used in the browser",
            "// process the functions of this structure may be called on any thread unless",
            "// otherwise indicated in the comments. When used in the render process the",
            "// functions of this structure may only be called on the main thread.",
            "///"
        ],
        "name": "cef_browser_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the browser host object. This function can only be called in the",
                    "// browser process.",
                    "///"
                ],
                "decl": "struct _cef_browser_host_t * (*get_host) (struct _cef_browser_t *)",
                "name": "get_host",
                "ret": [
                    "struct _cef_browser_host_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the browser can navigate backwards.",
                    "///"
                ],
                "decl": "int (*can_go_back) (struct _cef_browser_t *)",
                "name": "can_go_back",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Navigate backwards.",
                    "///"
                ],
                "decl": "void (*go_back) (struct _cef_browser_t *)",
                "name": "go_back",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the browser can navigate forwards.",
                    "///"
                ],
                "decl": "int (*can_go_forward) (struct _cef_browser_t *)",
                "name": "can_go_forward",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Navigate forwards.",
                    "///"
                ],
                "decl": "void (*go_forward) (struct _cef_browser_t *)",
                "name": "go_forward",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the browser is currently loading.",
                    "///"
                ],
                "decl": "int (*is_loading) (struct _cef_browser_t *)",
                "name": "is_loading",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Reload the current page.",
                    "///"
                ],
                "decl": "void (*reload) (struct _cef_browser_t *)",
                "name": "reload",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Reload the current page ignoring any cached data.",
                    "///"
                ],
                "decl": "void (*reload_ignore_cache) (struct _cef_browser_t *)",
                "name": "reload_ignore_cache",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Stop loading the page.",
                    "///"
                ],
                "decl": "void (*stop_load) (struct _cef_browser_t *)",
                "name": "stop_load",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the globally unique identifier for this browser. This value is also",
                    "// used as the tabId for extension APIs.",
                    "///"
                ],
                "decl": "int (*get_identifier) (struct _cef_browser_t *)",
                "name": "get_identifier",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same handle as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_browser_t *, struct _cef_browser_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the window is a popup window.",
                    "///"
                ],
                "decl": "int (*is_popup) (struct _cef_browser_t *)",
                "name": "is_popup",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if a document has been loaded in the browser.",
                    "///"
                ],
                "decl": "int (*has_document) (struct _cef_browser_t *)",
                "name": "has_document",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the main (top-level) frame for the browser window.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_main_frame) (struct _cef_browser_t *)",
                "name": "get_main_frame",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the focused frame for the browser window.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_focused_frame) (struct _cef_browser_t *)",
                "name": "get_focused_frame",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ],
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Returns the frame with the specified identifier, or NULL if not found.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_frame_byident) (struct _cef_browser_t *, int64)",
                "name": "get_frame_byident",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the frame with the specified name, or NULL if not found.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_frame) (struct _cef_browser_t *, const cef_string_t *)",
                "name": "get_frame",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of frames that currently exist.",
                    "///"
                ],
                "decl": "size_t (*get_frame_count) (struct _cef_browser_t *)",
                "name": "get_frame_count",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        "int64"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the identifiers of all existing frames.",
                    "///"
                ],
                "decl": "void (*get_frame_identifiers) (struct _cef_browser_t *, size_t *, int64 *)",
                "name": "get_frame_identifiers",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Returns the names of all existing frames.",
                    "///"
                ],
                "decl": "void (*get_frame_names) (struct _cef_browser_t *, cef_string_list_t)",
                "name": "get_frame_names",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_callback_t": {
        "comment": [
            "///",
            "// Generic callback structure used for asynchronous continuation.",
            "///"
        ],
        "name": "cef_callback_t",
        "path": "include/capi/cef_callback_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Continue processing.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_callback_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel processing.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_client_t": {
        "comment": [
            "///",
            "// Implement this structure to provide handler implementations.",
            "///"
        ],
        "name": "cef_client_t",
        "path": "include/capi/cef_client_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for audio rendering events.",
                    "///"
                ],
                "decl": "struct _cef_audio_handler_t * (*get_audio_handler) (struct _cef_client_t *)",
                "name": "get_audio_handler",
                "ret": [
                    "struct _cef_audio_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for context menus. If no handler is provided the default",
                    "// implementation will be used.",
                    "///"
                ],
                "decl": "struct _cef_context_menu_handler_t * (*get_context_menu_handler) (struct _cef_client_t *)",
                "name": "get_context_menu_handler",
                "ret": [
                    "struct _cef_context_menu_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for dialogs. If no handler is provided the default",
                    "// implementation will be used.",
                    "///"
                ],
                "decl": "struct _cef_dialog_handler_t * (*get_dialog_handler) (struct _cef_client_t *)",
                "name": "get_dialog_handler",
                "ret": [
                    "struct _cef_dialog_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for browser display state events.",
                    "///"
                ],
                "decl": "struct _cef_display_handler_t * (*get_display_handler) (struct _cef_client_t *)",
                "name": "get_display_handler",
                "ret": [
                    "struct _cef_display_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for download events. If no handler is returned downloads",
                    "// will not be allowed.",
                    "///"
                ],
                "decl": "struct _cef_download_handler_t * (*get_download_handler) (struct _cef_client_t *)",
                "name": "get_download_handler",
                "ret": [
                    "struct _cef_download_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for drag events.",
                    "///"
                ],
                "decl": "struct _cef_drag_handler_t * (*get_drag_handler) (struct _cef_client_t *)",
                "name": "get_drag_handler",
                "ret": [
                    "struct _cef_drag_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for find result events.",
                    "///"
                ],
                "decl": "struct _cef_find_handler_t * (*get_find_handler) (struct _cef_client_t *)",
                "name": "get_find_handler",
                "ret": [
                    "struct _cef_find_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for focus events.",
                    "///"
                ],
                "decl": "struct _cef_focus_handler_t * (*get_focus_handler) (struct _cef_client_t *)",
                "name": "get_focus_handler",
                "ret": [
                    "struct _cef_focus_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for JavaScript dialogs. If no handler is provided the",
                    "// default implementation will be used.",
                    "///"
                ],
                "decl": "struct _cef_jsdialog_handler_t * (*get_jsdialog_handler) (struct _cef_client_t *)",
                "name": "get_jsdialog_handler",
                "ret": [
                    "struct _cef_jsdialog_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for keyboard events.",
                    "///"
                ],
                "decl": "struct _cef_keyboard_handler_t * (*get_keyboard_handler) (struct _cef_client_t *)",
                "name": "get_keyboard_handler",
                "ret": [
                    "struct _cef_keyboard_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for browser life span events.",
                    "///"
                ],
                "decl": "struct _cef_life_span_handler_t * (*get_life_span_handler) (struct _cef_client_t *)",
                "name": "get_life_span_handler",
                "ret": [
                    "struct _cef_life_span_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for browser load status events.",
                    "///"
                ],
                "decl": "struct _cef_load_handler_t * (*get_load_handler) (struct _cef_client_t *)",
                "name": "get_load_handler",
                "ret": [
                    "struct _cef_load_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for off-screen rendering events.",
                    "///"
                ],
                "decl": "struct _cef_render_handler_t * (*get_render_handler) (struct _cef_client_t *)",
                "name": "get_render_handler",
                "ret": [
                    "struct _cef_render_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for browser request events.",
                    "///"
                ],
                "decl": "struct _cef_request_handler_t * (*get_request_handler) (struct _cef_client_t *)",
                "name": "get_request_handler",
                "ret": [
                    "struct _cef_request_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_client_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a new message is received from a different process. Return true",
                    "// (1) if the message was handled or false (0) otherwise. Do not keep a",
                    "// reference to or attempt to access the message outside of this callback.",
                    "///"
                ],
                "decl": "int (*on_process_message_received) (struct _cef_client_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "on_process_message_received",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_command_line_t": {
        "comment": [
            "///",
            "// Structure used to create and/or parse command line arguments. Arguments with",
            "// '--', '-' and, on Windows, '/' prefixes are considered switches. Switches",
            "// will always precede any arguments without switch prefixes. Switches can",
            "// optionally have a value specified using the '=' delimiter (e.g.",
            "// \"-switch=value\"). An argument of \"--\" will terminate switch parsing with all",
            "// subsequent tokens, regardless of prefix, being interpreted as non-switch",
            "// arguments. Switch names are considered case-insensitive. This structure can",
            "// be used before cef_initialize() is called.",
            "///"
        ],
        "name": "cef_command_line_t",
        "path": "include/capi/cef_command_line_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. Do not call any other functions",
                    "// if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_command_line_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the values of this object are read-only. Some APIs may",
                    "// expose read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_command_line_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a writable copy of this object.",
                    "///"
                ],
                "decl": "struct _cef_command_line_t * (*copy) (struct _cef_command_line_t *)",
                "name": "copy",
                "ret": [
                    "struct _cef_command_line_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    "int",
                    [
                        [
                            "const char"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Initialize the command line with the specified |argc| and |argv| values.",
                    "// The first argument must be the name of the program. This function is only",
                    "// supported on non-Windows platforms.",
                    "///"
                ],
                "decl": "void (*init_from_argv) (struct _cef_command_line_t *, int, const char *const *)",
                "name": "init_from_argv",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Initialize the command line with the string returned by calling",
                    "// GetCommandLineW(). This function is only supported on Windows.",
                    "///"
                ],
                "decl": "void (*init_from_string) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "init_from_string",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Reset the command-line switches and arguments but leave the program",
                    "// component unchanged.",
                    "///"
                ],
                "decl": "void (*reset) (struct _cef_command_line_t *)",
                "name": "reset",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the original command line string as a vector of strings. The argv",
                    "// array: { program, [(--|-|/)switch[=value]]*, [--], [argument]* }",
                    "///"
                ],
                "decl": "void (*get_argv) (struct _cef_command_line_t *, cef_string_list_t)",
                "name": "get_argv",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Constructs and returns the represented command line string. Use this",
                    "// function cautiously because quoting behavior is unclear.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_command_line_string) (struct _cef_command_line_t *)",
                "name": "get_command_line_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the program part of the command line string (the first item).",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_program) (struct _cef_command_line_t *)",
                "name": "get_program",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the program part of the command line string (the first item).",
                    "///"
                ],
                "decl": "void (*set_program) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "set_program",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the command line has switches.",
                    "///"
                ],
                "decl": "int (*has_switches) (struct _cef_command_line_t *)",
                "name": "has_switches",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the command line contains the given switch.",
                    "///"
                ],
                "decl": "int (*has_switch) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "has_switch",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value associated with the given switch. If the switch has no",
                    "// value or isn't present this function returns the NULL string.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_switch_value) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "get_switch_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    "cef_string_map_t"
                ],
                "comment": [
                    "///",
                    "// Returns the map of switch names and values. If a switch has no value an",
                    "// NULL string is returned.",
                    "///"
                ],
                "decl": "void (*get_switches) (struct _cef_command_line_t *, cef_string_map_t)",
                "name": "get_switches",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a switch to the end of the command line. If the switch has no value",
                    "// pass an NULL value string.",
                    "///"
                ],
                "decl": "void (*append_switch) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "append_switch",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a switch with the specified value to the end of the command line.",
                    "///"
                ],
                "decl": "void (*append_switch_with_value) (struct _cef_command_line_t *, const cef_string_t *, const cef_string_t *)",
                "name": "append_switch_with_value",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if there are remaining command line arguments.",
                    "///"
                ],
                "decl": "int (*has_arguments) (struct _cef_command_line_t *)",
                "name": "has_arguments",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Get the remaining command line arguments.",
                    "///"
                ],
                "decl": "void (*get_arguments) (struct _cef_command_line_t *, cef_string_list_t)",
                "name": "get_arguments",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add an argument to the end of the command line.",
                    "///"
                ],
                "decl": "void (*append_argument) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "append_argument",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_command_line_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Insert a command before the current command. Common for debuggers, like",
                    "// \"valgrind\" or \"gdb --args\".",
                    "///"
                ],
                "decl": "void (*prepend_wrapper) (struct _cef_command_line_t *, const cef_string_t *)",
                "name": "prepend_wrapper",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_completion_callback_t": {
        "comment": [
            "///",
            "// Generic callback structure used for asynchronous completion.",
            "///"
        ],
        "name": "cef_completion_callback_t",
        "path": "include/capi/cef_callback_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be called once the task is complete.",
                    "///"
                ],
                "decl": "void (*on_complete) (struct _cef_completion_callback_t *)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_composition_underline_t": {
        "comment": [
            "///",
            "// Structure representing IME composition underline information. This is a thin",
            "// wrapper around Blink's WebCompositionUnderline class and should be kept in",
            "// sync with that.",
            "///"
        ],
        "name": "cef_composition_underline_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Underline character range.",
                    "///"
                ],
                "name": "range",
                "type": "cef_range_t"
            },
            {
                "comment": [
                    "///",
                    "// Text color.",
                    "///"
                ],
                "name": "color",
                "type": "cef_color_t"
            },
            {
                "comment": [
                    "///",
                    "// Background color.",
                    "///"
                ],
                "name": "background_color",
                "type": "cef_color_t"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) for thick underline.",
                    "///"
                ],
                "name": "thick",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Style.",
                    "///"
                ],
                "name": "style",
                "type": "cef_composition_underline_style_t"
            }
        ]
    },
    "_cef_context_menu_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle context menu events. The functions of this",
            "// structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_context_menu_handler_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_context_menu_params_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called before a context menu is displayed. |params| provides information",
                    "// about the context menu state. |model| initially contains the default",
                    "// context menu. The |model| can be cleared to show no context menu or",
                    "// modified to show a custom menu. Do not keep references to |params| or",
                    "// |model| outside of this callback.",
                    "///"
                ],
                "decl": "void (*on_before_context_menu) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, struct _cef_menu_model_t *)",
                "name": "on_before_context_menu",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_context_menu_params_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    [
                        "struct _cef_run_context_menu_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to allow custom display of the context menu. |params| provides",
                    "// information about the context menu state. |model| contains the context menu",
                    "// model resulting from OnBeforeContextMenu. For custom display return true",
                    "// (1) and execute |callback| either synchronously or asynchronously with the",
                    "// selected command ID. For default display return false (0). Do not keep",
                    "// references to |params| or |model| outside of this callback.",
                    "///"
                ],
                "decl": "int (*run_context_menu) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, struct _cef_menu_model_t *, struct _cef_run_context_menu_callback_t *)",
                "name": "run_context_menu",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_context_menu_params_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "comment": [
                    "///",
                    "// Called to execute a command selected from the context menu. Return true (1)",
                    "// if the command was handled or false (0) for the default implementation. See",
                    "// cef_menu_id_t for the command ids that have default implementations. All",
                    "// user-defined command ids should be between MENU_ID_USER_FIRST and",
                    "// MENU_ID_USER_LAST. |params| will have the same values as what was passed to",
                    "// on_before_context_menu(). Do not keep a reference to |params| outside of",
                    "// this callback.",
                    "///"
                ],
                "decl": "int (*on_context_menu_command) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_context_menu_params_t *, int, cef_event_flags_t)",
                "name": "on_context_menu_command",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the context menu is dismissed irregardless of whether the menu",
                    "// was NULL or a command was selected.",
                    "///"
                ],
                "decl": "void (*on_context_menu_dismissed) (struct _cef_context_menu_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *)",
                "name": "on_context_menu_dismissed",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_context_menu_params_t": {
        "comment": [
            "///",
            "// Provides information about the context menu state. The ethods of this",
            "// structure can only be accessed on browser process the UI thread.",
            "///"
        ],
        "name": "cef_context_menu_params_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the X coordinate of the mouse where the context menu was invoked.",
                    "// Coords are relative to the associated RenderView's origin.",
                    "///"
                ],
                "decl": "int (*get_xcoord) (struct _cef_context_menu_params_t *)",
                "name": "get_xcoord",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the Y coordinate of the mouse where the context menu was invoked.",
                    "// Coords are relative to the associated RenderView's origin.",
                    "///"
                ],
                "decl": "int (*get_ycoord) (struct _cef_context_menu_params_t *)",
                "name": "get_ycoord",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns flags representing the type of node that the context menu was",
                    "// invoked on.",
                    "///"
                ],
                "decl": "cef_context_menu_type_flags_t (*get_type_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_type_flags",
                "ret": "cef_context_menu_type_flags_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the URL of the link, if any, that encloses the node that the",
                    "// context menu was invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_link_url) (struct _cef_context_menu_params_t *)",
                "name": "get_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the link URL, if any, to be used ONLY for \"copy link address\". We",
                    "// don't validate this field in the frontend process.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_unfiltered_link_url) (struct _cef_context_menu_params_t *)",
                "name": "get_unfiltered_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the source URL, if any, for the element that the context menu was",
                    "// invoked on. Example of elements with source URLs are img, audio, and video.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_source_url) (struct _cef_context_menu_params_t *)",
                "name": "get_source_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the context menu was invoked on an image which has non-",
                    "// NULL contents.",
                    "///"
                ],
                "decl": "int (*has_image_contents) (struct _cef_context_menu_params_t *)",
                "name": "has_image_contents",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the title text or the alt text if the context menu was invoked on",
                    "// an image.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_title_text) (struct _cef_context_menu_params_t *)",
                "name": "get_title_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the URL of the top level page that the context menu was invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_page_url) (struct _cef_context_menu_params_t *)",
                "name": "get_page_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the URL of the subframe that the context menu was invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_frame_url) (struct _cef_context_menu_params_t *)",
                "name": "get_frame_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the character encoding of the subframe that the context menu was",
                    "// invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_frame_charset) (struct _cef_context_menu_params_t *)",
                "name": "get_frame_charset",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the type of context node that the context menu was invoked on.",
                    "///"
                ],
                "decl": "cef_context_menu_media_type_t (*get_media_type) (struct _cef_context_menu_params_t *)",
                "name": "get_media_type",
                "ret": "cef_context_menu_media_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns flags representing the actions supported by the media element, if",
                    "// any, that the context menu was invoked on.",
                    "///"
                ],
                "decl": "cef_context_menu_media_state_flags_t (*get_media_state_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_media_state_flags",
                "ret": "cef_context_menu_media_state_flags_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the text of the selection, if any, that the context menu was",
                    "// invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_selection_text) (struct _cef_context_menu_params_t *)",
                "name": "get_selection_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the text of the misspelled word, if any, that the context menu was",
                    "// invoked on.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_misspelled_word) (struct _cef_context_menu_params_t *)",
                "name": "get_misspelled_word",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if suggestions exist, false (0) otherwise. Fills in",
                    "// |suggestions| from the spell check service for the misspelled word if there",
                    "// is one.",
                    "///"
                ],
                "decl": "int (*get_dictionary_suggestions) (struct _cef_context_menu_params_t *, cef_string_list_t)",
                "name": "get_dictionary_suggestions",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the context menu was invoked on an editable node.",
                    "///"
                ],
                "decl": "int (*is_editable) (struct _cef_context_menu_params_t *)",
                "name": "is_editable",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the context menu was invoked on an editable node where",
                    "// spell-check is enabled.",
                    "///"
                ],
                "decl": "int (*is_spell_check_enabled) (struct _cef_context_menu_params_t *)",
                "name": "is_spell_check_enabled",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns flags representing the actions supported by the editable node, if",
                    "// any, that the context menu was invoked on.",
                    "///"
                ],
                "decl": "cef_context_menu_edit_state_flags_t (*get_edit_state_flags) (struct _cef_context_menu_params_t *)",
                "name": "get_edit_state_flags",
                "ret": "cef_context_menu_edit_state_flags_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the context menu contains items specified by the",
                    "// renderer process (for example, plugin placeholder or pepper plugin menu",
                    "// items).",
                    "///"
                ],
                "decl": "int (*is_custom_menu) (struct _cef_context_menu_params_t *)",
                "name": "is_custom_menu",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_context_menu_params_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the context menu was invoked from a pepper plugin.",
                    "///"
                ],
                "decl": "int (*is_pepper_menu) (struct _cef_context_menu_params_t *)",
                "name": "is_pepper_menu",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_cookie_access_filter_t": {
        "comment": [
            "///",
            "// Implement this structure to filter cookies that may be sent or received from",
            "// resource requests. The functions of this structure will be called on the IO",
            "// thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_cookie_access_filter_t",
        "path": "include/capi/cef_resource_request_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_access_filter_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const struct _cef_cookie_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread before a resource request is sent. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. |request|",
                    "// cannot be modified in this callback. Return true (1) if the specified",
                    "// cookie can be sent with the request or false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*can_send_cookie) (struct _cef_cookie_access_filter_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, const struct _cef_cookie_t *)",
                "name": "can_send_cookie",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_access_filter_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const struct _cef_cookie_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread after a resource response is received. The",
                    "// |browser| and |frame| values represent the source of the request, and may",
                    "// be NULL for requests originating from service workers or cef_urlrequest_t.",
                    "// |request| cannot be modified in this callback. Return true (1) if the",
                    "// specified cookie returned with the response can be saved or false (0)",
                    "// otherwise.",
                    "///"
                ],
                "decl": "int (*can_save_cookie) (struct _cef_cookie_access_filter_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, const struct _cef_cookie_t *)",
                "name": "can_save_cookie",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_cookie_manager_t": {
        "comment": [
            "///",
            "// Structure used for managing cookies. The functions of this structure may be",
            "// called on any thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_cookie_manager_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    "cef_string_list_t",
                    "int",
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the schemes supported by this manager. If |include_defaults| is true",
                    "// (1) the default schemes (\"http\", \"https\", \"ws\" and \"wss\") will also be",
                    "// supported. Calling this function with an NULL |schemes| value and",
                    "// |include_defaults| set to false (0) will disable all loading and saving of",
                    "// cookies for this manager. If |callback| is non-NULL it will be executed",
                    "// asnychronously on the UI thread after the change has been applied. Must be",
                    "// called before any cookies are accessed.",
                    "///"
                ],
                "decl": "void (*set_supported_schemes) (struct _cef_cookie_manager_t *, cef_string_list_t, int, struct _cef_completion_callback_t *)",
                "name": "set_supported_schemes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    [
                        "struct _cef_cookie_visitor_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Visit all cookies on the UI thread. The returned cookies are ordered by",
                    "// longest path, then by earliest creation date. Returns false (0) if cookies",
                    "// cannot be accessed.",
                    "///"
                ],
                "decl": "int (*visit_all_cookies) (struct _cef_cookie_manager_t *, struct _cef_cookie_visitor_t *)",
                "name": "visit_all_cookies",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "struct _cef_cookie_visitor_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Visit a subset of cookies on the UI thread. The results are filtered by the",
                    "// given url scheme, host, domain and path. If |includeHttpOnly| is true (1)",
                    "// HTTP-only cookies will also be included in the results. The returned",
                    "// cookies are ordered by longest path, then by earliest creation date.",
                    "// Returns false (0) if cookies cannot be accessed.",
                    "///"
                ],
                "decl": "int (*visit_url_cookies) (struct _cef_cookie_manager_t *, const cef_string_t *, int, struct _cef_cookie_visitor_t *)",
                "name": "visit_url_cookies",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const struct _cef_cookie_t"
                    ],
                    [
                        "struct _cef_set_cookie_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets a cookie given a valid URL and explicit user-provided cookie",
                    "// attributes. This function expects each attribute to be well-formed. It will",
                    "// check for disallowed characters (e.g. the ';' character is disallowed",
                    "// within the cookie value attribute) and fail without setting the cookie if",
                    "// such characters are found. If |callback| is non-NULL it will be executed",
                    "// asnychronously on the UI thread after the cookie has been set. Returns",
                    "// false (0) if an invalid URL is specified or if cookies cannot be accessed.",
                    "///"
                ],
                "decl": "int (*set_cookie) (struct _cef_cookie_manager_t *, const cef_string_t *, const struct _cef_cookie_t *, struct _cef_set_cookie_callback_t *)",
                "name": "set_cookie",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_delete_cookies_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Delete all cookies that match the specified parameters. If both |url| and",
                    "// |cookie_name| values are specified all host and domain cookies matching",
                    "// both will be deleted. If only |url| is specified all host cookies (but not",
                    "// domain cookies) irrespective of path will be deleted. If |url| is NULL all",
                    "// cookies for all hosts and domains will be deleted. If |callback| is non-",
                    "// NULL it will be executed asnychronously on the UI thread after the cookies",
                    "// have been deleted. Returns false (0) if a non-NULL invalid URL is specified",
                    "// or if cookies cannot be accessed. Cookies can alternately be deleted using",
                    "// the Visit*Cookies() functions.",
                    "///"
                ],
                "decl": "int (*delete_cookies) (struct _cef_cookie_manager_t *, const cef_string_t *, const cef_string_t *, struct _cef_delete_cookies_callback_t *)",
                "name": "delete_cookies",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_manager_t"
                    ],
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Flush the backing store (if any) to disk. If |callback| is non-NULL it will",
                    "// be executed asnychronously on the UI thread after the flush is complete.",
                    "// Returns false (0) if cookies cannot be accessed.",
                    "///"
                ],
                "decl": "int (*flush_store) (struct _cef_cookie_manager_t *, struct _cef_completion_callback_t *)",
                "name": "flush_store",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_cookie_t": {
        "comment": [
            "///",
            "// Cookie information.",
            "///"
        ],
        "name": "cef_cookie_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// The cookie name.",
                    "///"
                ],
                "name": "name",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The cookie value.",
                    "///"
                ],
                "name": "value",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// If |domain| is empty a host cookie will be created instead of a domain",
                    "// cookie. Domain cookies are stored with a leading \".\" and are visible to",
                    "// sub-domains whereas host cookies are not.",
                    "///"
                ],
                "name": "domain",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// If |path| is non-empty only URLs at or below the path will get the cookie",
                    "// value.",
                    "///"
                ],
                "name": "path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// If |secure| is true the cookie will only be sent for HTTPS requests.",
                    "///"
                ],
                "name": "secure",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// If |httponly| is true the cookie will only be sent for HTTP requests.",
                    "///"
                ],
                "name": "httponly",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The cookie creation date. This is automatically populated by the system on",
                    "// cookie creation.",
                    "///"
                ],
                "name": "creation",
                "type": "cef_time_t"
            },
            {
                "comment": [
                    "///",
                    "// The cookie last access date. This is automatically populated by the system",
                    "// on access.",
                    "///"
                ],
                "name": "last_access",
                "type": "cef_time_t"
            },
            {
                "comment": [
                    "///",
                    "// The cookie expiration date is only valid if |has_expires| is true.",
                    "///"
                ],
                "name": "has_expires",
                "type": "int"
            },
            {
                "name": "expires",
                "type": "cef_time_t"
            },
            {
                "comment": [
                    "///",
                    "// Same site.",
                    "///"
                ],
                "name": "same_site",
                "type": "cef_cookie_same_site_t"
            },
            {
                "comment": [
                    "///",
                    "// Priority.",
                    "///"
                ],
                "name": "priority",
                "type": "cef_cookie_priority_t"
            }
        ]
    },
    "_cef_cookie_visitor_t": {
        "comment": [
            "///",
            "// Structure to implement for visiting cookie values. The functions of this",
            "// structure will always be called on the UI thread.",
            "///"
        ],
        "name": "cef_cookie_visitor_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_cookie_visitor_t"
                    ],
                    [
                        "const struct _cef_cookie_t"
                    ],
                    "int",
                    "int",
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be called once for each cookie. |count| is the 0-based",
                    "// index for the current cookie. |total| is the total number of cookies. Set",
                    "// |deleteCookie| to true (1) to delete the cookie currently being visited.",
                    "// Return false (0) to stop visiting cookies. This function may never be",
                    "// called if no cookies are found.",
                    "///"
                ],
                "decl": "int (*visit) (struct _cef_cookie_visitor_t *, const struct _cef_cookie_t *, int, int, int *)",
                "name": "visit",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_cursor_info_t": {
        "comment": [
            "///",
            "// Structure representing cursor information. |buffer| will be",
            "// |size.width|*|size.height|*4 bytes in size and represents a BGRA image with",
            "// an upper-left origin.",
            "///"
        ],
        "name": "cef_cursor_info_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "hotspot",
                "type": "cef_point_t"
            },
            {
                "name": "image_scale_factor",
                "type": "float"
            },
            {
                "name": "buffer",
                "type": [
                    "void"
                ]
            },
            {
                "name": "size",
                "type": "cef_size_t"
            }
        ]
    },
    "_cef_delete_cookies_callback_t": {
        "comment": [
            "///",
            "// Structure to implement to be notified of asynchronous completion via",
            "// cef_cookie_manager_t::delete_cookies().",
            "///"
        ],
        "name": "cef_delete_cookies_callback_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_delete_cookies_callback_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be called upon completion. |num_deleted| will be the",
                    "// number of cookies that were deleted.",
                    "///"
                ],
                "decl": "void (*on_complete) (struct _cef_delete_cookies_callback_t *, int)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_dev_tools_message_observer_t": {
        "comment": [
            "///",
            "// Callback structure for cef_browser_host_t::AddDevToolsMessageObserver. The",
            "// functions of this structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_dev_tools_message_observer_t",
        "path": "include/capi/cef_devtools_message_observer_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Method that will be called on receipt of a DevTools protocol message.",
                    "// |browser| is the originating browser instance. |message| is a UTF8-encoded",
                    "// JSON dictionary representing either a function result or an event.",
                    "// |message| is only valid for the scope of this callback and should be copied",
                    "// if necessary. Return true (1) if the message was handled or false (0) if",
                    "// the message should be further processed and passed to the",
                    "// OnDevToolsMethodResult or OnDevToolsEvent functions as appropriate.",
                    "//",
                    "// Method result dictionaries include an \"id\" (int) value that identifies the",
                    "// orginating function call sent from cef_browser_host_t::SendDevToolsMessage,",
                    "// and optionally either a \"result\" (dictionary) or \"error\" (dictionary)",
                    "// value. The \"error\" dictionary will contain \"code\" (int) and \"message\"",
                    "// (string) values. Event dictionaries include a \"function\" (string) value and",
                    "// optionally a \"params\" (dictionary) value. See the DevTools protocol",
                    "// documentation at https://chromedevtools.github.io/devtools-protocol/ for",
                    "// details of supported function calls and the expected \"result\" or \"params\"",
                    "// dictionary contents. JSON dictionaries can be parsed using the CefParseJSON",
                    "// function if desired, however be aware of performance considerations when",
                    "// parsing large messages (some of which may exceed 1MB in size).",
                    "///"
                ],
                "decl": "int (*on_dev_tools_message) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, const void *, size_t)",
                "name": "on_dev_tools_message",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Method that will be called after attempted execution of a DevTools protocol",
                    "// function. |browser| is the originating browser instance. |message_id| is",
                    "// the \"id\" value that identifies the originating function call message. If",
                    "// the function succeeded |success| will be true (1) and |result| will be the",
                    "// UTF8-encoded JSON \"result\" dictionary value (which may be NULL). If the",
                    "// function failed |success| will be false (0) and |result| will be the",
                    "// UTF8-encoded JSON \"error\" dictionary value. |result| is only valid for the",
                    "// scope of this callback and should be copied if necessary. See the",
                    "// OnDevToolsMessage documentation for additional details on |result|",
                    "// contents.",
                    "///"
                ],
                "decl": "void (*on_dev_tools_method_result) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, int, int, const void *, size_t)",
                "name": "on_dev_tools_method_result",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Method that will be called on receipt of a DevTools protocol event.",
                    "// |browser| is the originating browser instance. |function| is the \"function\"",
                    "// value. |params| is the UTF8-encoded JSON \"params\" dictionary value (which",
                    "// may be NULL). |params| is only valid for the scope of this callback and",
                    "// should be copied if necessary. See the OnDevToolsMessage documentation for",
                    "// additional details on |params| contents.",
                    "///"
                ],
                "decl": "void (*on_dev_tools_event) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *, const cef_string_t *, const void *, size_t)",
                "name": "on_dev_tools_event",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be called when the DevTools agent has attached. |browser|",
                    "// is the originating browser instance. This will generally occur in response",
                    "// to the first message sent while the agent is detached.",
                    "///"
                ],
                "decl": "void (*on_dev_tools_agent_attached) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *)",
                "name": "on_dev_tools_agent_attached",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dev_tools_message_observer_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be called when the DevTools agent has detached. |browser|",
                    "// is the originating browser instance. Any function results that were pending",
                    "// before the agent became detached will not be delivered, and any active",
                    "// event subscriptions will be canceled.",
                    "///"
                ],
                "decl": "void (*on_dev_tools_agent_detached) (struct _cef_dev_tools_message_observer_t *, struct _cef_browser_t *)",
                "name": "on_dev_tools_agent_detached",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_dialog_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle dialog events. The functions of this",
            "// structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_dialog_handler_t",
        "path": "include/capi/cef_dialog_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_dialog_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_file_dialog_mode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_string_list_t",
                    "int",
                    [
                        "struct _cef_file_dialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to run a file chooser dialog. |mode| represents the type of dialog",
                    "// to display. |title| to the title to be used for the dialog and may be NULL",
                    "// to show the default title (\"Open\" or \"Save\" depending on the mode).",
                    "// |default_file_path| is the path with optional directory and/or file name",
                    "// component that should be initially selected in the dialog. |accept_filters|",
                    "// are used to restrict the selectable file types and may any combination of",
                    "// (a) valid lower-cased MIME types (e.g. \"text/*\" or \"image/*\"), (b)",
                    "// individual file extensions (e.g. \".txt\" or \".png\"), or (c) combined",
                    "// description and file extension delimited using \"|\" and \";\" (e.g. \"Image",
                    "// Types|.png;.gif;.jpg\"). |selected_accept_filter| is the 0-based index of",
                    "// the filter that should be selected by default. To display a custom dialog",
                    "// return true (1) and execute |callback| either inline or at a later time. To",
                    "// display the default dialog return false (0).",
                    "///"
                ],
                "decl": "int (*on_file_dialog) (struct _cef_dialog_handler_t *, struct _cef_browser_t *, cef_file_dialog_mode_t, const cef_string_t *, const cef_string_t *, cef_string_list_t, int, struct _cef_file_dialog_callback_t *)",
                "name": "on_file_dialog",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_dictionary_value_t": {
        "comment": [
            "///",
            "// Structure representing a dictionary value. Can be used on any process and",
            "// thread.",
            "///"
        ],
        "name": "cef_dictionary_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. This object may become invalid if",
                    "// the underlying data is owned by another object (e.g. list or dictionary)",
                    "// and that other object is then modified or destroyed. Do not call any other",
                    "// functions if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_dictionary_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is currently owned by another object.",
                    "///"
                ],
                "decl": "int (*is_owned) (struct _cef_dictionary_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the values of this object are read-only. Some APIs may",
                    "// expose read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_dictionary_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have the same underlying",
                    "// data. If true (1) modifications to this object will also affect |that|",
                    "// object and vice-versa.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_dictionary_value_t *, struct _cef_dictionary_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have an equivalent",
                    "// underlying value but are not necessarily the same object.",
                    "///"
                ],
                "decl": "int (*is_equal) (struct _cef_dictionary_value_t *, struct _cef_dictionary_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns a writable copy of this object. If |exclude_NULL_children| is true",
                    "// (1) any NULL dictionaries or lists will be excluded from the copy.",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*copy) (struct _cef_dictionary_value_t *, int)",
                "name": "copy",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of values.",
                    "///"
                ],
                "decl": "size_t (*get_size) (struct _cef_dictionary_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Removes all values. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*clear) (struct _cef_dictionary_value_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the current dictionary has a value for the given key.",
                    "///"
                ],
                "decl": "int (*has_key) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "has_key",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Reads all keys for this dictionary into the specified vector.",
                    "///"
                ],
                "decl": "int (*get_keys) (struct _cef_dictionary_value_t *, cef_string_list_t)",
                "name": "get_keys",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Removes the value at the specified key. Returns true (1) is the value was",
                    "// removed successfully.",
                    "///"
                ],
                "decl": "int (*remove) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value type for the specified key.",
                    "///"
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key. For simple types the returned value",
                    "// will copy existing data and modifications to the value will not modify this",
                    "// object. For complex types (binary, dictionary and list) the returned value",
                    "// will reference existing data and modifications to the value will modify",
                    "// this object.",
                    "///"
                ],
                "decl": "struct _cef_value_t * (*get_value) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_value",
                "ret": [
                    "struct _cef_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type bool.",
                    "///"
                ],
                "decl": "int (*get_bool) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type int.",
                    "///"
                ],
                "decl": "int (*get_int) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type double.",
                    "///"
                ],
                "decl": "double (*get_double) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type string.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type binary. The returned value",
                    "// will reference existing data.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_binary",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type dictionary. The returned",
                    "// value will reference existing data and modifications to the value will",
                    "// modify this object.",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_dictionary",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified key as type list. The returned value",
                    "// will reference existing data and modifications to the value will modify",
                    "// this object.",
                    "///"
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "get_list",
                "ret": [
                    "struct _cef_list_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key. Returns true (1) if the value was set",
                    "// successfully. If |value| represents simple data then the underlying data",
                    "// will be copied and modifications to |value| will not modify this object. If",
                    "// |value| represents complex data (binary, dictionary or list) then the",
                    "// underlying data will be referenced and modifications to |value| will modify",
                    "// this object.",
                    "///"
                ],
                "decl": "int (*set_value) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_value_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type null. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_null) (struct _cef_dictionary_value_t *, const cef_string_t *)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type bool. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_bool) (struct _cef_dictionary_value_t *, const cef_string_t *, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type int. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_int) (struct _cef_dictionary_value_t *, const cef_string_t *, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "double"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type double. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_double) (struct _cef_dictionary_value_t *, const cef_string_t *, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type string. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_string) (struct _cef_dictionary_value_t *, const cef_string_t *, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type binary. Returns true (1) if the",
                    "// value was set successfully. If |value| is currently owned by another object",
                    "// then the value will be copied and the |value| reference will not change.",
                    "// Otherwise, ownership will be transferred to this object and the |value|",
                    "// reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_binary) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type dict. Returns true (1) if the",
                    "// value was set successfully. If |value| is currently owned by another object",
                    "// then the value will be copied and the |value| reference will not change.",
                    "// Otherwise, ownership will be transferred to this object and the |value|",
                    "// reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_dictionary) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified key as type list. Returns true (1) if the",
                    "// value was set successfully. If |value| is currently owned by another object",
                    "// then the value will be copied and the |value| reference will not change.",
                    "// Otherwise, ownership will be transferred to this object and the |value|",
                    "// reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_list) (struct _cef_dictionary_value_t *, const cef_string_t *, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_display_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser display state.",
            "// The functions of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_display_handler_t",
        "path": "include/capi/cef_display_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a frame's address has changed.",
                    "///"
                ],
                "decl": "void (*on_address_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *)",
                "name": "on_address_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the page title changes.",
                    "///"
                ],
                "decl": "void (*on_title_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_title_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Called when the page icon changes.",
                    "///"
                ],
                "decl": "void (*on_favicon_urlchange) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_string_list_t)",
                "name": "on_favicon_urlchange",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when web content in the page has toggled fullscreen mode. If",
                    "// |fullscreen| is true (1) the content will automatically be sized to fill",
                    "// the browser content area. If |fullscreen| is false (0) the content will",
                    "// automatically return to its original size and position. The client is",
                    "// responsible for resizing the browser if desired.",
                    "///"
                ],
                "decl": "void (*on_fullscreen_mode_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_fullscreen_mode_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the browser is about to display a tooltip. |text| contains the",
                    "// text that will be displayed in the tooltip. To handle the display of the",
                    "// tooltip yourself return true (1). Otherwise, you can optionally modify",
                    "// |text| and then return false (0) to allow the browser to display the",
                    "// tooltip. When window rendering is disabled the application is responsible",
                    "// for drawing tooltips and the return value is ignored.",
                    "///"
                ],
                "decl": "int (*on_tooltip) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_string_t *)",
                "name": "on_tooltip",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the browser receives a status message. |value| contains the",
                    "// text that will be displayed in the status message.",
                    "///"
                ],
                "decl": "void (*on_status_message) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_status_message",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_log_severity_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called to display a console message. Return true (1) to stop the message",
                    "// from being output to the console.",
                    "///"
                ],
                "decl": "int (*on_console_message) (struct _cef_display_handler_t *, struct _cef_browser_t *, cef_log_severity_t, const cef_string_t *, const cef_string_t *, int)",
                "name": "on_console_message",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_size_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when auto-resize is enabled via",
                    "// cef_browser_host_t::SetAutoResizeEnabled and the contents have auto-",
                    "// resized. |new_size| will be the desired size in view coordinates. Return",
                    "// true (1) if the resize was handled or false (0) for default handling.",
                    "///"
                ],
                "decl": "int (*on_auto_resize) (struct _cef_display_handler_t *, struct _cef_browser_t *, const cef_size_t *)",
                "name": "on_auto_resize",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "double"
                ],
                "comment": [
                    "///",
                    "// Called when the overall page loading progress has changed. |progress|",
                    "// ranges from 0.0 to 1.0.",
                    "///"
                ],
                "decl": "void (*on_loading_progress_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, double)",
                "name": "on_loading_progress_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_display_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "void"
                    ],
                    "cef_cursor_type_t",
                    [
                        "const struct _cef_cursor_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the browser's cursor has changed. If |type| is CT_CUSTOM then",
                    "// |custom_cursor_info| will be populated with the custom cursor information.",
                    "// Return true (1) if the cursor change was handled or false (0) for default",
                    "// handling.",
                    "///"
                ],
                "decl": "int (*on_cursor_change) (struct _cef_display_handler_t *, struct _cef_browser_t *, void *, cef_cursor_type_t, const struct _cef_cursor_info_t *)",
                "name": "on_cursor_change",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_domdocument_t": {
        "comment": [
            "///",
            "// Structure used to represent a DOM document. The functions of this structure",
            "// should only be called on the render process main thread thread.",
            "///"
        ],
        "name": "cef_domdocument_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the document type.",
                    "///"
                ],
                "decl": "cef_dom_document_type_t (*get_type) (struct _cef_domdocument_t *)",
                "name": "get_type",
                "ret": "cef_dom_document_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the root document node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_document) (struct _cef_domdocument_t *)",
                "name": "get_document",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the BODY node of an HTML document.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_body) (struct _cef_domdocument_t *)",
                "name": "get_body",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the HEAD node of an HTML document.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_head) (struct _cef_domdocument_t *)",
                "name": "get_head",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the title of an HTML document.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_title) (struct _cef_domdocument_t *)",
                "name": "get_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the document element with the specified ID value.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_element_by_id) (struct _cef_domdocument_t *, const cef_string_t *)",
                "name": "get_element_by_id",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the node that currently has keyboard focus.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_focused_node) (struct _cef_domdocument_t *)",
                "name": "get_focused_node",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if a portion of the document is selected.",
                    "///"
                ],
                "decl": "int (*has_selection) (struct _cef_domdocument_t *)",
                "name": "has_selection",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the selection offset within the start node.",
                    "///"
                ],
                "decl": "int (*get_selection_start_offset) (struct _cef_domdocument_t *)",
                "name": "get_selection_start_offset",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the selection offset within the end node.",
                    "///"
                ],
                "decl": "int (*get_selection_end_offset) (struct _cef_domdocument_t *)",
                "name": "get_selection_end_offset",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the contents of this selection as markup.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_selection_as_markup) (struct _cef_domdocument_t *)",
                "name": "get_selection_as_markup",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the contents of this selection as text.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_selection_as_text) (struct _cef_domdocument_t *)",
                "name": "get_selection_as_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the base URL for the document.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_base_url) (struct _cef_domdocument_t *)",
                "name": "get_base_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domdocument_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a complete URL based on the document base URL and the specified",
                    "// partial URL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_complete_url) (struct _cef_domdocument_t *, const cef_string_t *)",
                "name": "get_complete_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_domnode_t": {
        "comment": [
            "///",
            "// Structure used to represent a DOM node. The functions of this structure",
            "// should only be called on the render process main thread.",
            "///"
        ],
        "name": "cef_domnode_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the type for this node.",
                    "///"
                ],
                "decl": "cef_dom_node_type_t (*get_type) (struct _cef_domnode_t *)",
                "name": "get_type",
                "ret": "cef_dom_node_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is a text node.",
                    "///"
                ],
                "decl": "int (*is_text) (struct _cef_domnode_t *)",
                "name": "is_text",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is an element node.",
                    "///"
                ],
                "decl": "int (*is_element) (struct _cef_domnode_t *)",
                "name": "is_element",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is an editable node.",
                    "///"
                ],
                "decl": "int (*is_editable) (struct _cef_domnode_t *)",
                "name": "is_editable",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is a form control element node.",
                    "///"
                ],
                "decl": "int (*is_form_control_element) (struct _cef_domnode_t *)",
                "name": "is_form_control_element",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the type of this form control element node.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_form_control_element_type) (struct _cef_domnode_t *)",
                "name": "get_form_control_element_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same handle as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_domnode_t *, struct _cef_domnode_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name of this node.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_domnode_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value of this node.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_value) (struct _cef_domnode_t *)",
                "name": "get_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the value of this node. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_value) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the contents of this node as markup.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_as_markup) (struct _cef_domnode_t *)",
                "name": "get_as_markup",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the document associated with this node.",
                    "///"
                ],
                "decl": "struct _cef_domdocument_t * (*get_document) (struct _cef_domnode_t *)",
                "name": "get_document",
                "ret": [
                    "struct _cef_domdocument_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the parent node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_parent) (struct _cef_domnode_t *)",
                "name": "get_parent",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the previous sibling node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_previous_sibling) (struct _cef_domnode_t *)",
                "name": "get_previous_sibling",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the next sibling node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_next_sibling) (struct _cef_domnode_t *)",
                "name": "get_next_sibling",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this node has child nodes.",
                    "///"
                ],
                "decl": "int (*has_children) (struct _cef_domnode_t *)",
                "name": "has_children",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the first child node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_first_child) (struct _cef_domnode_t *)",
                "name": "get_first_child",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the last child node.",
                    "///"
                ],
                "decl": "struct _cef_domnode_t * (*get_last_child) (struct _cef_domnode_t *)",
                "name": "get_last_child",
                "ret": [
                    "struct _cef_domnode_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "// The following functions are valid only for element nodes.",
                    "///",
                    "// Returns the tag name of this element.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_element_tag_name) (struct _cef_domnode_t *)",
                "name": "get_element_tag_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this element has attributes.",
                    "///"
                ],
                "decl": "int (*has_element_attributes) (struct _cef_domnode_t *)",
                "name": "has_element_attributes",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this element has an attribute named |attrName|.",
                    "///"
                ],
                "decl": "int (*has_element_attribute) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "has_element_attribute",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the element attribute named |attrName|.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_element_attribute) (struct _cef_domnode_t *, const cef_string_t *)",
                "name": "get_element_attribute",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    "cef_string_map_t"
                ],
                "comment": [
                    "///",
                    "// Returns a map of all element attributes.",
                    "///"
                ],
                "decl": "void (*get_element_attributes) (struct _cef_domnode_t *, cef_string_map_t)",
                "name": "get_element_attributes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the value for the element attribute named |attrName|. Returns true (1)",
                    "// on success.",
                    "///"
                ],
                "decl": "int (*set_element_attribute) (struct _cef_domnode_t *, const cef_string_t *, const cef_string_t *)",
                "name": "set_element_attribute",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the inner text of the element.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_element_inner_text) (struct _cef_domnode_t *)",
                "name": "get_element_inner_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the bounds of the element.",
                    "///"
                ],
                "decl": "cef_rect_t (*get_element_bounds) (struct _cef_domnode_t *)",
                "name": "get_element_bounds",
                "ret": "cef_rect_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_domvisitor_t": {
        "comment": [
            "///",
            "// Structure to implement for visiting the DOM. The functions of this structure",
            "// will be called on the render process main thread.",
            "///"
        ],
        "name": "cef_domvisitor_t",
        "path": "include/capi/cef_dom_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_domvisitor_t"
                    ],
                    [
                        "struct _cef_domdocument_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method executed for visiting the DOM. The document object passed to this",
                    "// function represents a snapshot of the DOM at the time this function is",
                    "// executed. DOM objects are only valid for the scope of this function. Do not",
                    "// keep references to or attempt to access any DOM objects outside the scope",
                    "// of this function.",
                    "///"
                ],
                "decl": "void (*visit) (struct _cef_domvisitor_t *, struct _cef_domdocument_t *)",
                "name": "visit",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_download_handler_t": {
        "comment": [
            "///",
            "// Structure used to handle file downloads. The functions of this structure will",
            "// called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_download_handler_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_download_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_download_item_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_before_download_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called before a download begins. |suggested_name| is the suggested name for",
                    "// the download file. By default the download will be canceled. Execute",
                    "// |callback| either asynchronously or in this function to continue the",
                    "// download if desired. Do not keep a reference to |download_item| outside of",
                    "// this function.",
                    "///"
                ],
                "decl": "void (*on_before_download) (struct _cef_download_handler_t *, struct _cef_browser_t *, struct _cef_download_item_t *, const cef_string_t *, struct _cef_before_download_callback_t *)",
                "name": "on_before_download",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_download_item_t"
                    ],
                    [
                        "struct _cef_download_item_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a download's status or progress information has been updated.",
                    "// This may be called multiple times before and after on_before_download().",
                    "// Execute |callback| either asynchronously or in this function to cancel the",
                    "// download if desired. Do not keep a reference to |download_item| outside of",
                    "// this function.",
                    "///"
                ],
                "decl": "void (*on_download_updated) (struct _cef_download_handler_t *, struct _cef_browser_t *, struct _cef_download_item_t *, struct _cef_download_item_callback_t *)",
                "name": "on_download_updated",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_download_image_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_browser_host_t::DownloadImage. The functions of",
            "// this structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_download_image_callback_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_download_image_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "struct _cef_image_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be executed when the image download has completed.",
                    "// |image_url| is the URL that was downloaded and |http_status_code| is the",
                    "// resulting HTTP status code. |image| is the resulting image, possibly at",
                    "// multiple scale factors, or NULL if the download failed.",
                    "///"
                ],
                "decl": "void (*on_download_image_finished) (struct _cef_download_image_callback_t *, const cef_string_t *, int, struct _cef_image_t *)",
                "name": "on_download_image_finished",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_download_item_callback_t": {
        "comment": [
            "///",
            "// Callback structure used to asynchronously cancel a download.",
            "///"
        ],
        "name": "cef_download_item_callback_t",
        "path": "include/capi/cef_download_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call to cancel the download.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_download_item_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call to pause the download.",
                    "///"
                ],
                "decl": "void (*pause) (struct _cef_download_item_callback_t *)",
                "name": "pause",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Call to resume the download.",
                    "///"
                ],
                "decl": "void (*resume) (struct _cef_download_item_callback_t *)",
                "name": "resume",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_download_item_t": {
        "comment": [
            "///",
            "// Structure used to represent a download item.",
            "///"
        ],
        "name": "cef_download_item_t",
        "path": "include/capi/cef_download_item_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. Do not call any other functions",
                    "// if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_download_item_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the download is in progress.",
                    "///"
                ],
                "decl": "int (*is_in_progress) (struct _cef_download_item_t *)",
                "name": "is_in_progress",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the download is complete.",
                    "///"
                ],
                "decl": "int (*is_complete) (struct _cef_download_item_t *)",
                "name": "is_complete",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the download has been canceled or interrupted.",
                    "///"
                ],
                "decl": "int (*is_canceled) (struct _cef_download_item_t *)",
                "name": "is_canceled",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a simple speed estimate in bytes/s.",
                    "///"
                ],
                "decl": "int64 (*get_current_speed) (struct _cef_download_item_t *)",
                "name": "get_current_speed",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the rough percent complete or -1 if the receive total size is",
                    "// unknown.",
                    "///"
                ],
                "decl": "int (*get_percent_complete) (struct _cef_download_item_t *)",
                "name": "get_percent_complete",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the total number of bytes.",
                    "///"
                ],
                "decl": "int64 (*get_total_bytes) (struct _cef_download_item_t *)",
                "name": "get_total_bytes",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of received bytes.",
                    "///"
                ],
                "decl": "int64 (*get_received_bytes) (struct _cef_download_item_t *)",
                "name": "get_received_bytes",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the time that the download started.",
                    "///"
                ],
                "decl": "cef_time_t (*get_start_time) (struct _cef_download_item_t *)",
                "name": "get_start_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the time that the download ended.",
                    "///"
                ],
                "decl": "cef_time_t (*get_end_time) (struct _cef_download_item_t *)",
                "name": "get_end_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the full path to the downloaded or downloading file.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_full_path) (struct _cef_download_item_t *)",
                "name": "get_full_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the unique identifier for this download.",
                    "///"
                ],
                "decl": "uint32 (*get_id) (struct _cef_download_item_t *)",
                "name": "get_id",
                "ret": "uint32",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the URL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_download_item_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the original URL before any redirections.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_original_url) (struct _cef_download_item_t *)",
                "name": "get_original_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the suggested file name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_suggested_file_name) (struct _cef_download_item_t *)",
                "name": "get_suggested_file_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the content disposition.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_content_disposition) (struct _cef_download_item_t *)",
                "name": "get_content_disposition",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_download_item_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the mime type.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_mime_type) (struct _cef_download_item_t *)",
                "name": "get_mime_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_drag_data_t": {
        "comment": [
            "///",
            "// Structure used to represent drag data. The functions of this structure may be",
            "// called on any thread.",
            "///"
        ],
        "name": "cef_drag_data_t",
        "path": "include/capi/cef_drag_data_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a copy of the current object.",
                    "///"
                ],
                "decl": "struct _cef_drag_data_t * (*clone) (struct _cef_drag_data_t *)",
                "name": "clone",
                "ret": [
                    "struct _cef_drag_data_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is read-only.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_drag_data_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the drag data is a link.",
                    "///"
                ],
                "decl": "int (*is_link) (struct _cef_drag_data_t *)",
                "name": "is_link",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the drag data is a text or html fragment.",
                    "///"
                ],
                "decl": "int (*is_fragment) (struct _cef_drag_data_t *)",
                "name": "is_fragment",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the drag data is a file.",
                    "///"
                ],
                "decl": "int (*is_file) (struct _cef_drag_data_t *)",
                "name": "is_file",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the link URL that is being dragged.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_link_url) (struct _cef_drag_data_t *)",
                "name": "get_link_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the title associated with the link being dragged.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_link_title) (struct _cef_drag_data_t *)",
                "name": "get_link_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the metadata, if any, associated with the link being dragged.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_link_metadata) (struct _cef_drag_data_t *)",
                "name": "get_link_metadata",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the plain text fragment that is being dragged.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_fragment_text) (struct _cef_drag_data_t *)",
                "name": "get_fragment_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the text/html fragment that is being dragged.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_fragment_html) (struct _cef_drag_data_t *)",
                "name": "get_fragment_html",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the base URL that the fragment came from. This value is used for",
                    "// resolving relative URLs and may be NULL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_fragment_base_url) (struct _cef_drag_data_t *)",
                "name": "get_fragment_base_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the name of the file being dragged out of the browser window.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_file_name) (struct _cef_drag_data_t *)",
                "name": "get_file_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "struct _cef_stream_writer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Write the contents of the file being dragged out of the web view into",
                    "// |writer|. Returns the number of bytes sent to |writer|. If |writer| is NULL",
                    "// this function will return the size of the file contents in bytes. Call",
                    "// get_file_name() to get a suggested name for the file.",
                    "///"
                ],
                "decl": "size_t (*get_file_contents) (struct _cef_drag_data_t *, struct _cef_stream_writer_t *)",
                "name": "get_file_contents",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of file names that are being dragged into the browser",
                    "// window.",
                    "///"
                ],
                "decl": "int (*get_file_names) (struct _cef_drag_data_t *, cef_string_list_t)",
                "name": "get_file_names",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the link URL that is being dragged.",
                    "///"
                ],
                "decl": "void (*set_link_url) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_url",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the title associated with the link being dragged.",
                    "///"
                ],
                "decl": "void (*set_link_title) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_title",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the metadata associated with the link being dragged.",
                    "///"
                ],
                "decl": "void (*set_link_metadata) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_link_metadata",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the plain text fragment that is being dragged.",
                    "///"
                ],
                "decl": "void (*set_fragment_text) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_text",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the text/html fragment that is being dragged.",
                    "///"
                ],
                "decl": "void (*set_fragment_html) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_html",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the base URL that the fragment came from.",
                    "///"
                ],
                "decl": "void (*set_fragment_base_url) (struct _cef_drag_data_t *, const cef_string_t *)",
                "name": "set_fragment_base_url",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Reset the file contents. You should do this before calling",
                    "// cef_browser_host_t::DragTargetDragEnter as the web view does not allow us",
                    "// to drag in this kind of data.",
                    "///"
                ],
                "decl": "void (*reset_file_contents) (struct _cef_drag_data_t *)",
                "name": "reset_file_contents",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a file that is being dragged into the webview.",
                    "///"
                ],
                "decl": "void (*add_file) (struct _cef_drag_data_t *, const cef_string_t *, const cef_string_t *)",
                "name": "add_file",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the image representation of drag data. May return NULL if no image",
                    "// representation is available.",
                    "///"
                ],
                "decl": "struct _cef_image_t * (*get_image) (struct _cef_drag_data_t *)",
                "name": "get_image",
                "ret": [
                    "struct _cef_image_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the image hotspot (drag start location relative to image dimensions).",
                    "///"
                ],
                "decl": "cef_point_t (*get_image_hotspot) (struct _cef_drag_data_t *)",
                "name": "get_image_hotspot",
                "ret": "cef_point_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if an image representation of drag data is available.",
                    "///"
                ],
                "decl": "int (*has_image) (struct _cef_drag_data_t *)",
                "name": "has_image",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_drag_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to dragging. The functions",
            "// of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_drag_handler_t",
        "path": "include/capi/cef_drag_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_drag_data_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "comment": [
                    "///",
                    "// Called when an external drag event enters the browser window. |dragData|",
                    "// contains the drag event data and |mask| represents the type of drag",
                    "// operation. Return false (0) for default drag handling behavior or true (1)",
                    "// to cancel the drag event.",
                    "///"
                ],
                "decl": "int (*on_drag_enter) (struct _cef_drag_handler_t *, struct _cef_browser_t *, struct _cef_drag_data_t *, cef_drag_operations_mask_t)",
                "name": "on_drag_enter",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_drag_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "size_t",
                    [
                        "const cef_draggable_region_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called whenever draggable regions for the browser window change. These can",
                    "// be specified using the '-webkit-app-region: drag/no-drag' CSS-property. If",
                    "// draggable regions are never defined in a document this function will also",
                    "// never be called. If the last draggable region is removed from a document",
                    "// this function will be called with an NULL vector.",
                    "///"
                ],
                "decl": "void (*on_draggable_regions_changed) (struct _cef_drag_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, size_t, const cef_draggable_region_t *)",
                "name": "on_draggable_regions_changed",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_draggable_region_t": {
        "comment": [
            "///",
            "// Structure representing a draggable region.",
            "///"
        ],
        "name": "cef_draggable_region_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Bounds of the region.",
                    "///"
                ],
                "name": "bounds",
                "type": "cef_rect_t"
            },
            {
                "comment": [
                    "///",
                    "// True (1) this this region is draggable and false (0) otherwise.",
                    "///"
                ],
                "name": "draggable",
                "type": "int"
            }
        ]
    },
    "_cef_extension_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser extensions. The",
            "// functions of this structure will be called on the UI thread. See",
            "// cef_request_context_t::LoadExtension for information about extension loading.",
            "///"
        ],
        "name": "cef_extension_handler_t",
        "path": "include/capi/cef_extension_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    "cef_errorcode_t"
                ],
                "comment": [
                    "///",
                    "// Called if the cef_request_context_t::LoadExtension request fails. |result|",
                    "// will be the error code.",
                    "///"
                ],
                "decl": "void (*on_extension_load_failed) (struct _cef_extension_handler_t *, cef_errorcode_t)",
                "name": "on_extension_load_failed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called if the cef_request_context_t::LoadExtension request succeeds.",
                    "// |extension| is the loaded extension.",
                    "///"
                ],
                "decl": "void (*on_extension_loaded) (struct _cef_extension_handler_t *, struct _cef_extension_t *)",
                "name": "on_extension_loaded",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after the cef_extension_t::Unload request has completed.",
                    "///"
                ],
                "decl": "void (*on_extension_unloaded) (struct _cef_extension_handler_t *, struct _cef_extension_t *)",
                "name": "on_extension_unloaded",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        [
                            "struct _cef_client_t"
                        ]
                    ],
                    [
                        "struct _cef_browser_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when an extension needs a browser to host a background script",
                    "// specified via the \"background\" manifest key. The browser will have no",
                    "// visible window and cannot be displayed. |extension| is the extension that",
                    "// is loading the background script. |url| is an internally generated",
                    "// reference to an HTML page that will be used to load the background script",
                    "// via a <script> src attribute. To allow creation of the browser optionally",
                    "// modify |client| and |settings| and return false (0). To cancel creation of",
                    "// the browser (and consequently cancel load of the background script) return",
                    "// true (1). Successful creation will be indicated by a call to",
                    "// cef_life_span_handler_t::OnAfterCreated, and",
                    "// cef_browser_host_t::IsBackgroundHost will return true (1) for the resulting",
                    "// browser. See https://developer.chrome.com/extensions/event_pages for more",
                    "// information about extension background script usage.",
                    "///"
                ],
                "decl": "int (*on_before_background_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, const cef_string_t *, struct _cef_client_t **, struct _cef_browser_settings_t *)",
                "name": "on_before_background_browser",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "struct _cef_window_info_t"
                    ],
                    [
                        [
                            "struct _cef_client_t"
                        ]
                    ],
                    [
                        "struct _cef_browser_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when an extension API (e.g. chrome.tabs.create) requests creation of",
                    "// a new browser. |extension| and |browser| are the source of the API call.",
                    "// |active_browser| may optionally be specified via the windowId property or",
                    "// returned via the get_active_browser() callback and provides the default",
                    "// |client| and |settings| values for the new browser. |index| is the position",
                    "// value optionally specified via the index property. |url| is the URL that",
                    "// will be loaded in the browser. |active| is true (1) if the new browser",
                    "// should be active when opened.  To allow creation of the browser optionally",
                    "// modify |windowInfo|, |client| and |settings| and return false (0). To",
                    "// cancel creation of the browser return true (1). Successful creation will be",
                    "// indicated by a call to cef_life_span_handler_t::OnAfterCreated. Any",
                    "// modifications to |windowInfo| will be ignored if |active_browser| is",
                    "// wrapped in a cef_browser_view_t.",
                    "///"
                ],
                "decl": "int (*on_before_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, struct _cef_browser_t *, int, const cef_string_t *, int, struct _cef_window_info_t *, struct _cef_client_t **, struct _cef_browser_settings_t *)",
                "name": "on_before_browser",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when no tabId is specified to an extension API call that accepts a",
                    "// tabId parameter (e.g. chrome.tabs.*). |extension| and |browser| are the",
                    "// source of the API call. Return the browser that will be acted on by the API",
                    "// call or return NULL to act on |browser|. The returned browser must share",
                    "// the same cef_request_context_t as |browser|. Incognito browsers should not",
                    "// be considered unless the source extension has incognito access enabled, in",
                    "// which case |include_incognito| will be true (1).",
                    "///"
                ],
                "decl": "struct _cef_browser_t * (*get_active_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, int)",
                "name": "get_active_browser",
                "ret": [
                    "struct _cef_browser_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the tabId associated with |target_browser| is specified to an",
                    "// extension API call that accepts a tabId parameter (e.g. chrome.tabs.*).",
                    "// |extension| and |browser| are the source of the API call. Return true (1)",
                    "// to allow access of false (0) to deny access. Access to incognito browsers",
                    "// should not be allowed unless the source extension has incognito access",
                    "// enabled, in which case |include_incognito| will be true (1).",
                    "///"
                ],
                "decl": "int (*can_access_browser) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, int, struct _cef_browser_t *)",
                "name": "can_access_browser",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_handler_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_get_extension_resource_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve an extension resource that would normally be loaded from",
                    "// disk (e.g. if a file parameter is specified to chrome.tabs.executeScript).",
                    "// |extension| and |browser| are the source of the resource request. |file| is",
                    "// the requested relative file path. To handle the resource request return",
                    "// true (1) and execute |callback| either synchronously or asynchronously. For",
                    "// the default behavior which reads the resource from the extension directory",
                    "// on disk return false (0). Localization substitutions will not be applied to",
                    "// resources handled via this function.",
                    "///"
                ],
                "decl": "int (*get_extension_resource) (struct _cef_extension_handler_t *, struct _cef_extension_t *, struct _cef_browser_t *, const cef_string_t *, struct _cef_get_extension_resource_callback_t *)",
                "name": "get_extension_resource",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_extension_t": {
        "comment": [
            "///",
            "// Object representing an extension. Methods may be called on any thread unless",
            "// otherwise indicated.",
            "///"
        ],
        "name": "cef_extension_t",
        "path": "include/capi/cef_extension_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the unique extension identifier. This is calculated based on the",
                    "// extension public key, if available, or on the extension path. See",
                    "// https://developer.chrome.com/extensions/manifest/key for details.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_identifier) (struct _cef_extension_t *)",
                "name": "get_identifier",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the absolute path to the extension directory on disk. This value",
                    "// will be prefixed with PK_DIR_RESOURCES if a relative path was passed to",
                    "// cef_request_context_t::LoadExtension.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_path) (struct _cef_extension_t *)",
                "name": "get_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the extension manifest contents as a cef_dictionary_value_t object.",
                    "// See https://developer.chrome.com/extensions/manifest for details.",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_manifest) (struct _cef_extension_t *)",
                "name": "get_manifest",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ],
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is the same extension as |that| object.",
                    "// Extensions are considered the same if identifier, path and loader context",
                    "// match.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_extension_t *, struct _cef_extension_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the handler for this extension. Will return NULL for internal",
                    "// extensions or if no handler was passed to",
                    "// cef_request_context_t::LoadExtension.",
                    "///"
                ],
                "decl": "struct _cef_extension_handler_t * (*get_handler) (struct _cef_extension_t *)",
                "name": "get_handler",
                "ret": [
                    "struct _cef_extension_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the request context that loaded this extension. Will return NULL",
                    "// for internal extensions or if the extension has been unloaded. See the",
                    "// cef_request_context_t::LoadExtension documentation for more information",
                    "// about loader contexts. Must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "struct _cef_request_context_t * (*get_loader_context) (struct _cef_extension_t *)",
                "name": "get_loader_context",
                "ret": [
                    "struct _cef_request_context_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this extension is currently loaded. Must be called on",
                    "// the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*is_loaded) (struct _cef_extension_t *)",
                "name": "is_loaded",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_extension_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Unload this extension if it is not an internal extension and is currently",
                    "// loaded. Will result in a call to",
                    "// cef_extension_handler_t::OnExtensionUnloaded on success.",
                    "///"
                ],
                "decl": "void (*unload) (struct _cef_extension_t *)",
                "name": "unload",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_file_dialog_callback_t": {
        "comment": [
            "///",
            "// Callback structure for asynchronous continuation of file dialog requests.",
            "///"
        ],
        "name": "cef_file_dialog_callback_t",
        "path": "include/capi/cef_dialog_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_file_dialog_callback_t"
                    ],
                    "int",
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Continue the file selection. |selected_accept_filter| should be the 0-based",
                    "// index of the value selected from the accept filters array passed to",
                    "// cef_dialog_handler_t::OnFileDialog. |file_paths| should be a single value",
                    "// or a list of values depending on the dialog mode. An NULL |file_paths|",
                    "// value is treated the same as calling cancel().",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_file_dialog_callback_t *, int, cef_string_list_t)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_file_dialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the file selection.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_file_dialog_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_find_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to find results. The",
            "// functions of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_find_handler_t",
        "path": "include/capi/cef_find_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_find_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_rect_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called to report find results returned by cef_browser_host_t::find().",
                    "// |identifer| is the identifier passed to find(), |count| is the number of",
                    "// matches currently identified, |selectionRect| is the location of where the",
                    "// match was found (in window coordinates), |activeMatchOrdinal| is the",
                    "// current position in the search results, and |finalUpdate| is true (1) if",
                    "// this is the last find notification.",
                    "///"
                ],
                "decl": "void (*on_find_result) (struct _cef_find_handler_t *, struct _cef_browser_t *, int, int, const cef_rect_t *, int, int)",
                "name": "on_find_result",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_focus_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to focus. The functions of",
            "// this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_focus_handler_t",
        "path": "include/capi/cef_focus_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_focus_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when the browser component is about to loose focus. For instance, if",
                    "// focus was on the last HTML element and the user pressed the TAB key. |next|",
                    "// will be true (1) if the browser is giving focus to the next component and",
                    "// false (0) if the browser is giving focus to the previous component.",
                    "///"
                ],
                "decl": "void (*on_take_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_take_focus",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_focus_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_focus_source_t"
                ],
                "comment": [
                    "///",
                    "// Called when the browser component is requesting focus. |source| indicates",
                    "// where the focus request is originating from. Return false (0) to allow the",
                    "// focus to be set or true (1) to cancel setting the focus.",
                    "///"
                ],
                "decl": "int (*on_set_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *, cef_focus_source_t)",
                "name": "on_set_focus",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_focus_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the browser component has received focus.",
                    "///"
                ],
                "decl": "void (*on_got_focus) (struct _cef_focus_handler_t *, struct _cef_browser_t *)",
                "name": "on_got_focus",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_frame_t": {
        "comment": [
            "///",
            "// Structure used to represent a frame in the browser window. When used in the",
            "// browser process the functions of this structure may be called on any thread",
            "// unless otherwise indicated in the comments. When used in the render process",
            "// the functions of this structure may only be called on the main thread.",
            "///"
        ],
        "name": "cef_frame_t",
        "path": "include/capi/cef_frame_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if this object is currently attached to a valid frame.",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_frame_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute undo in this frame.",
                    "///"
                ],
                "decl": "void (*undo) (struct _cef_frame_t *)",
                "name": "undo",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute redo in this frame.",
                    "///"
                ],
                "decl": "void (*redo) (struct _cef_frame_t *)",
                "name": "redo",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute cut in this frame.",
                    "///"
                ],
                "decl": "void (*cut) (struct _cef_frame_t *)",
                "name": "cut",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute copy in this frame.",
                    "///"
                ],
                "decl": "void (*copy) (struct _cef_frame_t *)",
                "name": "copy",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute paste in this frame.",
                    "///"
                ],
                "decl": "void (*paste) (struct _cef_frame_t *)",
                "name": "paste",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute delete in this frame.",
                    "///"
                ],
                "decl": "void (*del) (struct _cef_frame_t *)",
                "name": "del",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute select all in this frame.",
                    "///"
                ],
                "decl": "void (*select_all) (struct _cef_frame_t *)",
                "name": "select_all",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Save this frame's HTML source to a temporary file and open it in the",
                    "// default text viewing application. This function can only be called from the",
                    "// browser process.",
                    "///"
                ],
                "decl": "void (*view_source) (struct _cef_frame_t *)",
                "name": "view_source",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_string_visitor_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieve this frame's HTML source as a string sent to the specified",
                    "// visitor.",
                    "///"
                ],
                "decl": "void (*get_source) (struct _cef_frame_t *, struct _cef_string_visitor_t *)",
                "name": "get_source",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_string_visitor_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieve this frame's display text as a string sent to the specified",
                    "// visitor.",
                    "///"
                ],
                "decl": "void (*get_text) (struct _cef_frame_t *, struct _cef_string_visitor_t *)",
                "name": "get_text",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Load the request represented by the |request| object.",
                    "//",
                    "// WARNING: This function will fail with \"bad IPC message\" reason",
                    "// INVALID_INITIATOR_ORIGIN (213) unless you first navigate to the request",
                    "// origin using some other mechanism (LoadURL, link click, etc).",
                    "///"
                ],
                "decl": "void (*load_request) (struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "load_request",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Load the specified |url|.",
                    "///"
                ],
                "decl": "void (*load_url) (struct _cef_frame_t *, const cef_string_t *)",
                "name": "load_url",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Execute a string of JavaScript code in this frame. The |script_url|",
                    "// parameter is the URL where the script in question can be found, if any. The",
                    "// renderer may request this URL to show the developer the source of the",
                    "// error.  The |start_line| parameter is the base line number to use for error",
                    "// reporting.",
                    "///"
                ],
                "decl": "void (*execute_java_script) (struct _cef_frame_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "execute_java_script",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is the main (top-level) frame.",
                    "///"
                ],
                "decl": "int (*is_main) (struct _cef_frame_t *)",
                "name": "is_main",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this is the focused frame.",
                    "///"
                ],
                "decl": "int (*is_focused) (struct _cef_frame_t *)",
                "name": "is_focused",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name for this frame. If the frame has an assigned name (for",
                    "// example, set via the iframe \"name\" attribute) then that value will be",
                    "// returned. Otherwise a unique name will be constructed based on the frame",
                    "// parent hierarchy. The main (top-level) frame will always have an NULL name",
                    "// value.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_frame_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the globally unique identifier for this frame or < 0 if the",
                    "// underlying frame does not yet exist.",
                    "///"
                ],
                "decl": "int64 (*get_identifier) (struct _cef_frame_t *)",
                "name": "get_identifier",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the parent of this frame or NULL if this is the main (top-level)",
                    "// frame.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_parent) (struct _cef_frame_t *)",
                "name": "get_parent",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the URL currently loaded in this frame.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_frame_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the browser that this frame belongs to.",
                    "///"
                ],
                "decl": "struct _cef_browser_t * (*get_browser) (struct _cef_frame_t *)",
                "name": "get_browser",
                "ret": [
                    "struct _cef_browser_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the V8 context associated with the frame. This function can only be",
                    "// called from the render process.",
                    "///"
                ],
                "decl": "struct _cef_v8context_t * (*get_v8context) (struct _cef_frame_t *)",
                "name": "get_v8context",
                "ret": [
                    "struct _cef_v8context_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_domvisitor_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Visit the DOM document. This function can only be called from the render",
                    "// process.",
                    "///"
                ],
                "decl": "void (*visit_dom) (struct _cef_frame_t *, struct _cef_domvisitor_t *)",
                "name": "visit_dom",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_urlrequest_client_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Create a new URL request that will be treated as originating from this",
                    "// frame and the associated browser. This request may be intercepted by the",
                    "// client via cef_resource_request_handler_t or cef_scheme_handler_factory_t.",
                    "// Use cef_urlrequest_t::Create instead if you do not want the request to have",
                    "// this association, in which case it may be handled differently (see",
                    "// documentation on that function). Requests may originate from both the",
                    "// browser process and the render process.",
                    "//",
                    "// For requests originating from the browser process:",
                    "//   - POST data may only contain a single element of type PDE_TYPE_FILE or",
                    "//     PDE_TYPE_BYTES.",
                    "// For requests originating from the render process:",
                    "//   - POST data may only contain a single element of type PDE_TYPE_BYTES.",
                    "//   - If the response contains Content-Disposition or Mime-Type header values",
                    "//     that would not normally be rendered then the response may receive",
                    "//     special handling inside the browser (for example, via the file download",
                    "//     code path instead of the URL request code path).",
                    "//",
                    "// The |request| object will be marked as read-only after calling this",
                    "// function.",
                    "///"
                ],
                "decl": "struct _cef_urlrequest_t * (*create_urlrequest) (struct _cef_frame_t *, struct _cef_request_t *, struct _cef_urlrequest_client_t *)",
                "name": "create_urlrequest",
                "ret": [
                    "struct _cef_urlrequest_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send a message to the specified |target_process|. Message delivery is not",
                    "// guaranteed in all cases (for example, if the browser is closing,",
                    "// navigating, or if the target process crashes). Send an ACK message back",
                    "// from the target process if confirmation is required.",
                    "///"
                ],
                "decl": "void (*send_process_message) (struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "send_process_message",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_get_extension_resource_callback_t": {
        "comment": [
            "///",
            "// Callback structure used for asynchronous continuation of",
            "// cef_extension_handler_t::GetExtensionResource.",
            "///"
        ],
        "name": "cef_get_extension_resource_callback_t",
        "path": "include/capi/cef_extension_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_get_extension_resource_callback_t"
                    ],
                    [
                        "struct _cef_stream_reader_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Continue the request. Read the resource contents from |stream|.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_get_extension_resource_callback_t *, struct _cef_stream_reader_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_get_extension_resource_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the request.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_get_extension_resource_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_image_t": {
        "comment": [
            "///",
            "// Container for a single image represented at different scale factors. All",
            "// image representations should be the same size in density independent pixel",
            "// (DIP) units. For example, if the image at scale factor 1.0 is 100x100 pixels",
            "// then the image at scale factor 2.0 should be 200x200 pixels -- both images",
            "// will display with a DIP size of 100x100 units. The functions of this",
            "// structure can be called on any browser process thread.",
            "///"
        ],
        "name": "cef_image_t",
        "path": "include/capi/cef_image_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this Image is NULL.",
                    "///"
                ],
                "decl": "int (*is_empty) (struct _cef_image_t *)",
                "name": "is_empty",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    [
                        "struct _cef_image_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this Image and |that| Image share the same underlying",
                    "// storage. Will also return true (1) if both images are NULL.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_image_t *, struct _cef_image_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    "int",
                    "int",
                    "cef_color_type_t",
                    "cef_alpha_type_t",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Add a bitmap image representation for |scale_factor|. Only 32-bit RGBA/BGRA",
                    "// formats are supported. |pixel_width| and |pixel_height| are the bitmap",
                    "// representation size in pixel coordinates. |pixel_data| is the array of",
                    "// pixel data and should be |pixel_width| x |pixel_height| x 4 bytes in size.",
                    "// |color_type| and |alpha_type| values specify the pixel format.",
                    "///"
                ],
                "decl": "int (*add_bitmap) (struct _cef_image_t *, float, int, int, cef_color_type_t, cef_alpha_type_t, const void *, size_t)",
                "name": "add_bitmap",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Add a PNG image representation for |scale_factor|. |png_data| is the image",
                    "// data of size |png_data_size|. Any alpha transparency in the PNG data will",
                    "// be maintained.",
                    "///"
                ],
                "decl": "int (*add_png) (struct _cef_image_t *, float, const void *, size_t)",
                "name": "add_png",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Create a JPEG image representation for |scale_factor|. |jpeg_data| is the",
                    "// image data of size |jpeg_data_size|. The JPEG format does not support",
                    "// transparency so the alpha byte will be set to 0xFF for all pixels.",
                    "///"
                ],
                "decl": "int (*add_jpeg) (struct _cef_image_t *, float, const void *, size_t)",
                "name": "add_jpeg",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the image width in density independent pixel (DIP) units.",
                    "///"
                ],
                "decl": "size_t (*get_width) (struct _cef_image_t *)",
                "name": "get_width",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the image height in density independent pixel (DIP) units.",
                    "///"
                ],
                "decl": "size_t (*get_height) (struct _cef_image_t *)",
                "name": "get_height",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this image contains a representation for",
                    "// |scale_factor|.",
                    "///"
                ],
                "decl": "int (*has_representation) (struct _cef_image_t *, float)",
                "name": "has_representation",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float"
                ],
                "comment": [
                    "///",
                    "// Removes the representation for |scale_factor|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*remove_representation) (struct _cef_image_t *, float)",
                "name": "remove_representation",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    [
                        "float"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns information for the representation that most closely matches",
                    "// |scale_factor|. |actual_scale_factor| is the actual scale factor for the",
                    "// representation. |pixel_width| and |pixel_height| are the representation",
                    "// size in pixel coordinates. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*get_representation_info) (struct _cef_image_t *, float, float *, int *, int *)",
                "name": "get_representation_info",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    "cef_color_type_t",
                    "cef_alpha_type_t",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the bitmap representation that most closely matches |scale_factor|.",
                    "// Only 32-bit RGBA/BGRA formats are supported. |color_type| and |alpha_type|",
                    "// values specify the desired output pixel format. |pixel_width| and",
                    "// |pixel_height| are the output representation size in pixel coordinates.",
                    "// Returns a cef_binary_value_t containing the pixel data on success or NULL",
                    "// on failure.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_bitmap) (struct _cef_image_t *, float, cef_color_type_t, cef_alpha_type_t, int *, int *)",
                "name": "get_as_bitmap",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the PNG representation that most closely matches |scale_factor|. If",
                    "// |with_transparency| is true (1) any alpha transparency in the image will be",
                    "// represented in the resulting PNG data. |pixel_width| and |pixel_height| are",
                    "// the output representation size in pixel coordinates. Returns a",
                    "// cef_binary_value_t containing the PNG image data on success or NULL on",
                    "// failure.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_png) (struct _cef_image_t *, float, int, int *, int *)",
                "name": "get_as_png",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_image_t"
                    ],
                    "float",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the JPEG representation that most closely matches |scale_factor|.",
                    "// |quality| determines the compression level with 0 == lowest and 100 ==",
                    "// highest. The JPEG format does not support alpha transparency and the alpha",
                    "// channel, if any, will be discarded. |pixel_width| and |pixel_height| are",
                    "// the output representation size in pixel coordinates. Returns a",
                    "// cef_binary_value_t containing the JPEG image data on success or NULL on",
                    "// failure.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_as_jpeg) (struct _cef_image_t *, float, int, int *, int *)",
                "name": "get_as_jpeg",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_insets_t": {
        "comment": [
            "///",
            "// Structure representing insets.",
            "///"
        ],
        "name": "cef_insets_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "top",
                "type": "int"
            },
            {
                "name": "left",
                "type": "int"
            },
            {
                "name": "bottom",
                "type": "int"
            },
            {
                "name": "right",
                "type": "int"
            }
        ]
    },
    "_cef_jsdialog_callback_t": {
        "comment": [
            "///",
            "// Callback structure used for asynchronous continuation of JavaScript dialog",
            "// requests.",
            "///"
        ],
        "name": "cef_jsdialog_callback_t",
        "path": "include/capi/cef_jsdialog_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_jsdialog_callback_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Continue the JS dialog request. Set |success| to true (1) if the OK button",
                    "// was pressed. The |user_input| value should be specified for prompt dialogs.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_jsdialog_callback_t *, int, const cef_string_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_jsdialog_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to JavaScript dialogs. The",
            "// functions of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_jsdialog_handler_t",
        "path": "include/capi/cef_jsdialog_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_jsdialog_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_jsdialog_type_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_jsdialog_callback_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to run a JavaScript dialog. If |origin_url| is non-NULL it can be",
                    "// passed to the CefFormatUrlForSecurityDisplay function to retrieve a secure",
                    "// and user-friendly display string. The |default_prompt_text| value will be",
                    "// specified for prompt dialogs only. Set |suppress_message| to true (1) and",
                    "// return false (0) to suppress the message (suppressing messages is",
                    "// preferable to immediately executing the callback as this is used to detect",
                    "// presumably malicious behavior like spamming alert messages in",
                    "// onbeforeunload). Set |suppress_message| to false (0) and return false (0)",
                    "// to use the default implementation (the default implementation will show one",
                    "// modal dialog at a time and suppress any additional dialog requests until",
                    "// the displayed dialog is dismissed). Return true (1) if the application will",
                    "// use a custom dialog or if the callback has been executed immediately.",
                    "// Custom dialogs may be either modal or modeless. If a custom dialog is used",
                    "// the application must execute |callback| once the custom dialog is",
                    "// dismissed.",
                    "///"
                ],
                "decl": "int (*on_jsdialog) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *, const cef_string_t *, cef_jsdialog_type_t, const cef_string_t *, const cef_string_t *, struct _cef_jsdialog_callback_t *, int *)",
                "name": "on_jsdialog",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_jsdialog_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "struct _cef_jsdialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to run a dialog asking the user if they want to leave a page. Return",
                    "// false (0) to use the default dialog implementation. Return true (1) if the",
                    "// application will use a custom dialog or if the callback has been executed",
                    "// immediately. Custom dialogs may be either modal or modeless. If a custom",
                    "// dialog is used the application must execute |callback| once the custom",
                    "// dialog is dismissed.",
                    "///"
                ],
                "decl": "int (*on_before_unload_dialog) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *, const cef_string_t *, int, struct _cef_jsdialog_callback_t *)",
                "name": "on_before_unload_dialog",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_jsdialog_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to cancel any pending dialogs and reset any saved dialog state. Will",
                    "// be called due to events like page navigation irregardless of whether any",
                    "// dialogs are currently pending.",
                    "///"
                ],
                "decl": "void (*on_reset_dialog_state) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *)",
                "name": "on_reset_dialog_state",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_jsdialog_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the default implementation dialog is closed.",
                    "///"
                ],
                "decl": "void (*on_dialog_closed) (struct _cef_jsdialog_handler_t *, struct _cef_browser_t *)",
                "name": "on_dialog_closed",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_key_event_t": {
        "comment": [
            "///",
            "// Structure representing keyboard event information.",
            "///"
        ],
        "name": "cef_key_event_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// The type of keyboard event.",
                    "///"
                ],
                "name": "type",
                "type": "cef_key_event_type_t"
            },
            {
                "comment": [
                    "///",
                    "// Bit flags describing any pressed modifier keys. See",
                    "// cef_event_flags_t for values.",
                    "///"
                ],
                "name": "modifiers",
                "type": "uint32"
            },
            {
                "comment": [
                    "///",
                    "// The Windows key code for the key event. This value is used by the DOM",
                    "// specification. Sometimes it comes directly from the event (i.e. on",
                    "// Windows) and sometimes it's determined using a mapping function. See",
                    "// WebCore/platform/chromium/KeyboardCodes.h for the list of values.",
                    "///"
                ],
                "name": "windows_key_code",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The actual key code genenerated by the platform.",
                    "///"
                ],
                "name": "native_key_code",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Indicates whether the event is considered a \"system key\" event (see",
                    "// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).",
                    "// This value will always be false on non-Windows platforms.",
                    "///"
                ],
                "name": "is_system_key",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The character generated by the keystroke.",
                    "///"
                ],
                "name": "character",
                "type": "char16"
            },
            {
                "comment": [
                    "///",
                    "// Same as |character| but unmodified by any concurrently-held modifiers",
                    "// (except shift). This is useful for working out shortcut keys.",
                    "///"
                ],
                "name": "unmodified_character",
                "type": "char16"
            },
            {
                "comment": [
                    "///",
                    "// True if the focus is currently on an editable field on the page. This is",
                    "// useful for determining if standard key events should be intercepted.",
                    "///"
                ],
                "name": "focus_on_editable_field",
                "type": "int"
            }
        ]
    },
    "_cef_keyboard_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to keyboard input. The",
            "// functions of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_keyboard_handler_t",
        "path": "include/capi/cef_keyboard_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_keyboard_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const struct _cef_key_event_t"
                    ],
                    [
                        "void"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called before a keyboard event is sent to the renderer. |event| contains",
                    "// information about the keyboard event. |os_event| is the operating system",
                    "// event message, if any. Return true (1) if the event was handled or false",
                    "// (0) otherwise. If the event will be handled in on_key_event() as a keyboard",
                    "// shortcut set |is_keyboard_shortcut| to true (1) and return false (0).",
                    "///"
                ],
                "decl": "int (*on_pre_key_event) (struct _cef_keyboard_handler_t *, struct _cef_browser_t *, const struct _cef_key_event_t *, void *, int *)",
                "name": "on_pre_key_event",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_keyboard_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const struct _cef_key_event_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after the renderer and JavaScript in the page has had a chance to",
                    "// handle the event. |event| contains information about the keyboard event.",
                    "// |os_event| is the operating system event message, if any. Return true (1)",
                    "// if the keyboard event was handled or false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*on_key_event) (struct _cef_keyboard_handler_t *, struct _cef_browser_t *, const struct _cef_key_event_t *, void *)",
                "name": "on_key_event",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_life_span_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser life span. The",
            "// functions of this structure will be called on the UI thread unless otherwise",
            "// indicated.",
            "///"
        ],
        "name": "cef_life_span_handler_t",
        "path": "include/capi/cef_life_span_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_life_span_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_window_open_disposition_t",
                    "int",
                    [
                        "const struct _cef_popup_features_t"
                    ],
                    [
                        "struct _cef_window_info_t"
                    ],
                    [
                        [
                            "struct _cef_client_t"
                        ]
                    ],
                    [
                        "struct _cef_browser_settings_t"
                    ],
                    [
                        [
                            "struct _cef_dictionary_value_t"
                        ]
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread before a new popup browser is created. The",
                    "// |browser| and |frame| values represent the source of the popup request. The",
                    "// |target_url| and |target_frame_name| values indicate where the popup",
                    "// browser should navigate and may be NULL if not specified with the request.",
                    "// The |target_disposition| value indicates where the user intended to open",
                    "// the popup (e.g. current tab, new tab, etc). The |user_gesture| value will",
                    "// be true (1) if the popup was opened via explicit user gesture (e.g.",
                    "// clicking a link) or false (0) if the popup opened automatically (e.g. via",
                    "// the DomContentLoaded event). The |popupFeatures| structure contains",
                    "// additional information about the requested popup window. To allow creation",
                    "// of the popup browser optionally modify |windowInfo|, |client|, |settings|",
                    "// and |no_javascript_access| and return false (0). To cancel creation of the",
                    "// popup browser return true (1). The |client| and |settings| values will",
                    "// default to the source browser's values. If the |no_javascript_access| value",
                    "// is set to false (0) the new browser will not be scriptable and may not be",
                    "// hosted in the same renderer process as the source browser. Any",
                    "// modifications to |windowInfo| will be ignored if the parent browser is",
                    "// wrapped in a cef_browser_view_t. Popup browser creation will be canceled if",
                    "// the parent browser is destroyed before the popup browser creation completes",
                    "// (indicated by a call to OnAfterCreated for the popup browser). The",
                    "// |extra_info| parameter provides an opportunity to specify extra information",
                    "// specific to the created popup browser that will be passed to",
                    "// cef_render_process_handler_t::on_browser_created() in the render process.",
                    "///"
                ],
                "decl": "int (*on_before_popup) (struct _cef_life_span_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, const cef_string_t *, cef_window_open_disposition_t, int, const struct _cef_popup_features_t *, struct _cef_window_info_t *, struct _cef_client_t **, struct _cef_browser_settings_t *, struct _cef_dictionary_value_t **, int *)",
                "name": "on_before_popup",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_life_span_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after a new browser is created. This callback will be the first",
                    "// notification that references |browser|.",
                    "///"
                ],
                "decl": "void (*on_after_created) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "on_after_created",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_life_span_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a browser has recieved a request to close. This may result",
                    "// directly from a call to cef_browser_host_t::*close_browser() or indirectly",
                    "// if the browser is parented to a top-level window created by CEF and the",
                    "// user attempts to close that window (by clicking the 'X', for example). The",
                    "// do_close() function will be called after the JavaScript 'onunload' event",
                    "// has been fired.",
                    "//",
                    "// An application should handle top-level owner window close notifications by",
                    "// calling cef_browser_host_t::try_close_browser() or",
                    "// cef_browser_host_t::CloseBrowser(false (0)) instead of allowing the window",
                    "// to close immediately (see the examples below). This gives CEF an",
                    "// opportunity to process the 'onbeforeunload' event and optionally cancel the",
                    "// close before do_close() is called.",
                    "//",
                    "// When windowed rendering is enabled CEF will internally create a window or",
                    "// view to host the browser. In that case returning false (0) from do_close()",
                    "// will send the standard close notification to the browser's top-level owner",
                    "// window (e.g. WM_CLOSE on Windows, performClose: on OS X, \"delete_event\" on",
                    "// Linux or cef_window_delegate_t::can_close() callback from Views). If the",
                    "// browser's host window/view has already been destroyed (via view hierarchy",
                    "// tear-down, for example) then do_close() will not be called for that browser",
                    "// since is no longer possible to cancel the close.",
                    "//",
                    "// When windowed rendering is disabled returning false (0) from do_close()",
                    "// will cause the browser object to be destroyed immediately.",
                    "//",
                    "// If the browser's top-level owner window requires a non-standard close",
                    "// notification then send that notification from do_close() and return true",
                    "// (1).",
                    "//",
                    "// The cef_life_span_handler_t::on_before_close() function will be called",
                    "// after do_close() (if do_close() is called) and immediately before the",
                    "// browser object is destroyed. The application should only exit after",
                    "// on_before_close() has been called for all existing browsers.",
                    "//",
                    "// The below examples describe what should happen during window close when the",
                    "// browser is parented to an application-provided top-level window.",
                    "//",
                    "// Example 1: Using cef_browser_host_t::try_close_browser(). This is",
                    "// recommended for clients using standard close handling and windows created",
                    "// on the browser process UI thread. 1.  User clicks the window close button",
                    "// which sends a close notification to",
                    "//     the application's top-level window.",
                    "// 2.  Application's top-level window receives the close notification and",
                    "//     calls TryCloseBrowser() (which internally calls CloseBrowser(false)).",
                    "//     TryCloseBrowser() returns false so the client cancels the window close.",
                    "// 3.  JavaScript 'onbeforeunload' handler executes and shows the close",
                    "//     confirmation dialog (which can be overridden via",
                    "//     CefJSDialogHandler::OnBeforeUnloadDialog()).",
                    "// 4.  User approves the close. 5.  JavaScript 'onunload' handler executes. 6.",
                    "// CEF sends a close notification to the application's top-level window",
                    "//     (because DoClose() returned false by default).",
                    "// 7.  Application's top-level window receives the close notification and",
                    "//     calls TryCloseBrowser(). TryCloseBrowser() returns true so the client",
                    "//     allows the window close.",
                    "// 8.  Application's top-level window is destroyed. 9.  Application's",
                    "// on_before_close() handler is called and the browser object",
                    "//     is destroyed.",
                    "// 10. Application exits by calling cef_quit_message_loop() if no other",
                    "// browsers",
                    "//     exist.",
                    "//",
                    "// Example 2: Using cef_browser_host_t::CloseBrowser(false (0)) and",
                    "// implementing the do_close() callback. This is recommended for clients using",
                    "// non-standard close handling or windows that were not created on the browser",
                    "// process UI thread. 1.  User clicks the window close button which sends a",
                    "// close notification to",
                    "//     the application's top-level window.",
                    "// 2.  Application's top-level window receives the close notification and:",
                    "//     A. Calls CefBrowserHost::CloseBrowser(false).",
                    "//     B. Cancels the window close.",
                    "// 3.  JavaScript 'onbeforeunload' handler executes and shows the close",
                    "//     confirmation dialog (which can be overridden via",
                    "//     CefJSDialogHandler::OnBeforeUnloadDialog()).",
                    "// 4.  User approves the close. 5.  JavaScript 'onunload' handler executes. 6.",
                    "// Application's do_close() handler is called. Application will:",
                    "//     A. Set a flag to indicate that the next close attempt will be allowed.",
                    "//     B. Return false.",
                    "// 7.  CEF sends an close notification to the application's top-level window.",
                    "// 8.  Application's top-level window receives the close notification and",
                    "//     allows the window to close based on the flag from #6B.",
                    "// 9.  Application's top-level window is destroyed. 10. Application's",
                    "// on_before_close() handler is called and the browser object",
                    "//     is destroyed.",
                    "// 11. Application exits by calling cef_quit_message_loop() if no other",
                    "// browsers",
                    "//     exist.",
                    "///"
                ],
                "decl": "int (*do_close) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "do_close",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_life_span_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called just before a browser is destroyed. Release all references to the",
                    "// browser object and do not attempt to execute any functions on the browser",
                    "// object (other than GetIdentifier or IsSame) after this callback returns.",
                    "// This callback will be the last notification that references |browser| on",
                    "// the UI thread. Any in-progress network requests associated with |browser|",
                    "// will be aborted when the browser is destroyed, and",
                    "// cef_resource_request_handler_t callbacks related to those requests may",
                    "// still arrive on the IO thread after this function is called. See do_close()",
                    "// documentation for additional usage information.",
                    "///"
                ],
                "decl": "void (*on_before_close) (struct _cef_life_span_handler_t *, struct _cef_browser_t *)",
                "name": "on_before_close",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_list_value_t": {
        "comment": [
            "///",
            "// Structure representing a list value. Can be used on any process and thread.",
            "///"
        ],
        "name": "cef_list_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. This object may become invalid if",
                    "// the underlying data is owned by another object (e.g. list or dictionary)",
                    "// and that other object is then modified or destroyed. Do not call any other",
                    "// functions if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_list_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is currently owned by another object.",
                    "///"
                ],
                "decl": "int (*is_owned) (struct _cef_list_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the values of this object are read-only. Some APIs may",
                    "// expose read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_list_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have the same underlying",
                    "// data. If true (1) modifications to this object will also affect |that|",
                    "// object and vice-versa.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_list_value_t *, struct _cef_list_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have an equivalent",
                    "// underlying value but are not necessarily the same object.",
                    "///"
                ],
                "decl": "int (*is_equal) (struct _cef_list_value_t *, struct _cef_list_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a writable copy of this object.",
                    "///"
                ],
                "decl": "struct _cef_list_value_t * (*copy) (struct _cef_list_value_t *)",
                "name": "copy",
                "ret": [
                    "struct _cef_list_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Sets the number of values. If the number of values is expanded all new",
                    "// value slots will default to type null. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_size) (struct _cef_list_value_t *, size_t)",
                "name": "set_size",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of values.",
                    "///"
                ],
                "decl": "size_t (*get_size) (struct _cef_list_value_t *)",
                "name": "get_size",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Removes all values. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*clear) (struct _cef_list_value_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Removes the value at the specified index.",
                    "///"
                ],
                "decl": "int (*remove) (struct _cef_list_value_t *, size_t)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value type at the specified index.",
                    "///"
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_list_value_t *, size_t)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index. For simple types the returned",
                    "// value will copy existing data and modifications to the value will not",
                    "// modify this object. For complex types (binary, dictionary and list) the",
                    "// returned value will reference existing data and modifications to the value",
                    "// will modify this object.",
                    "///"
                ],
                "decl": "struct _cef_value_t * (*get_value) (struct _cef_list_value_t *, size_t)",
                "name": "get_value",
                "ret": [
                    "struct _cef_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type bool.",
                    "///"
                ],
                "decl": "int (*get_bool) (struct _cef_list_value_t *, size_t)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type int.",
                    "///"
                ],
                "decl": "int (*get_int) (struct _cef_list_value_t *, size_t)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type double.",
                    "///"
                ],
                "decl": "double (*get_double) (struct _cef_list_value_t *, size_t)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type string.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_list_value_t *, size_t)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type binary. The returned value",
                    "// will reference existing data.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_list_value_t *, size_t)",
                "name": "get_binary",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type dictionary. The returned",
                    "// value will reference existing data and modifications to the value will",
                    "// modify this object.",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_list_value_t *, size_t)",
                "name": "get_dictionary",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Returns the value at the specified index as type list. The returned value",
                    "// will reference existing data and modifications to the value will modify",
                    "// this object.",
                    "///"
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_list_value_t *, size_t)",
                "name": "get_list",
                "ret": [
                    "struct _cef_list_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index. Returns true (1) if the value was",
                    "// set successfully. If |value| represents simple data then the underlying",
                    "// data will be copied and modifications to |value| will not modify this",
                    "// object. If |value| represents complex data (binary, dictionary or list)",
                    "// then the underlying data will be referenced and modifications to |value|",
                    "// will modify this object.",
                    "///"
                ],
                "decl": "int (*set_value) (struct _cef_list_value_t *, size_t, struct _cef_value_t *)",
                "name": "set_value",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type null. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_null) (struct _cef_list_value_t *, size_t)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type bool. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_bool) (struct _cef_list_value_t *, size_t, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type int. Returns true (1) if the",
                    "// value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_int) (struct _cef_list_value_t *, size_t, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    "double"
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type double. Returns true (1) if",
                    "// the value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_double) (struct _cef_list_value_t *, size_t, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type string. Returns true (1) if",
                    "// the value was set successfully.",
                    "///"
                ],
                "decl": "int (*set_string) (struct _cef_list_value_t *, size_t, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type binary. Returns true (1) if",
                    "// the value was set successfully. If |value| is currently owned by another",
                    "// object then the value will be copied and the |value| reference will not",
                    "// change. Otherwise, ownership will be transferred to this object and the",
                    "// |value| reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_binary) (struct _cef_list_value_t *, size_t, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type dict. Returns true (1) if the",
                    "// value was set successfully. If |value| is currently owned by another object",
                    "// then the value will be copied and the |value| reference will not change.",
                    "// Otherwise, ownership will be transferred to this object and the |value|",
                    "// reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_dictionary) (struct _cef_list_value_t *, size_t, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_list_value_t"
                    ],
                    "size_t",
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the value at the specified index as type list. Returns true (1) if the",
                    "// value was set successfully. If |value| is currently owned by another object",
                    "// then the value will be copied and the |value| reference will not change.",
                    "// Otherwise, ownership will be transferred to this object and the |value|",
                    "// reference will be invalidated.",
                    "///"
                ],
                "decl": "int (*set_list) (struct _cef_list_value_t *, size_t, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_load_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser load status. The",
            "// functions of this structure will be called on the browser process UI thread",
            "// or render process main thread (TID_RENDERER).",
            "///"
        ],
        "name": "cef_load_handler_t",
        "path": "include/capi/cef_load_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_load_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when the loading state has changed. This callback will be executed",
                    "// twice -- once when loading is initiated either programmatically or by user",
                    "// action, and once when loading is terminated due to completion, cancellation",
                    "// of failure. It will be called before any calls to OnLoadStart and after all",
                    "// calls to OnLoadError and/or OnLoadEnd.",
                    "///"
                ],
                "decl": "void (*on_loading_state_change) (struct _cef_load_handler_t *, struct _cef_browser_t *, int, int, int)",
                "name": "on_loading_state_change",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_load_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "cef_transition_type_t"
                ],
                "comment": [
                    "///",
                    "// Called after a navigation has been committed and before the browser begins",
                    "// loading contents in the frame. The |frame| value will never be NULL -- call",
                    "// the is_main() function to check if this frame is the main frame.",
                    "// |transition_type| provides information about the source of the navigation",
                    "// and an accurate value is only available in the browser process. Multiple",
                    "// frames may be loading at the same time. Sub-frames may start or continue",
                    "// loading after the main frame load has ended. This function will not be",
                    "// called for same page navigations (fragments, history state, etc.) or for",
                    "// navigations that fail or are canceled before commit. For notification of",
                    "// overall browser load status use OnLoadingStateChange instead.",
                    "///"
                ],
                "decl": "void (*on_load_start) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_transition_type_t)",
                "name": "on_load_start",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_load_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when the browser is done loading a frame. The |frame| value will",
                    "// never be NULL -- call the is_main() function to check if this frame is the",
                    "// main frame. Multiple frames may be loading at the same time. Sub-frames may",
                    "// start or continue loading after the main frame load has ended. This",
                    "// function will not be called for same page navigations (fragments, history",
                    "// state, etc.) or for navigations that fail or are canceled before commit.",
                    "// For notification of overall browser load status use OnLoadingStateChange",
                    "// instead.",
                    "///"
                ],
                "decl": "void (*on_load_end) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, int)",
                "name": "on_load_end",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_load_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "cef_errorcode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a navigation fails or is canceled. This function may be called",
                    "// by itself if before commit or in combination with OnLoadStart/OnLoadEnd if",
                    "// after commit. |errorCode| is the error code number, |errorText| is the",
                    "// error text and |failedUrl| is the URL that failed to load. See",
                    "// net\\base\\net_error_list.h for complete descriptions of the error codes.",
                    "///"
                ],
                "decl": "void (*on_load_error) (struct _cef_load_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_errorcode_t, const cef_string_t *, const cef_string_t *)",
                "name": "on_load_error",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_main_args_t": {
        "comment": [
            "///",
            "// Structure representing CefExecuteProcess arguments.",
            "///"
        ],
        "name": "cef_main_args_t",
        "path": "include/internal/cef_types_mac.h",
        "props": [
            {
                "name": "argc",
                "type": "int"
            },
            {
                "name": "argv",
                "type": [
                    [
                        "char"
                    ]
                ]
            }
        ]
    },
    "_cef_media_observer_t": {
        "comment": [
            "///",
            "// Implemented by the client to observe MediaRouter events and registered via",
            "// cef_media_router_t::AddObserver. The functions of this structure will be",
            "// called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_media_observer_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_observer_t"
                    ],
                    "size_t",
                    [
                        [
                            "struct _cef_media_sink_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// The list of available media sinks has changed or",
                    "// cef_media_router_t::NotifyCurrentSinks was called.",
                    "///"
                ],
                "decl": "void (*on_sinks) (struct _cef_media_observer_t *, size_t, struct _cef_media_sink_t *const *)",
                "name": "on_sinks",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_observer_t"
                    ],
                    "size_t",
                    [
                        [
                            "struct _cef_media_route_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// The list of available media routes has changed or",
                    "// cef_media_router_t::NotifyCurrentRoutes was called.",
                    "///"
                ],
                "decl": "void (*on_routes) (struct _cef_media_observer_t *, size_t, struct _cef_media_route_t *const *)",
                "name": "on_routes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_observer_t"
                    ],
                    [
                        "struct _cef_media_route_t"
                    ],
                    "cef_media_route_connection_state_t"
                ],
                "comment": [
                    "///",
                    "// The connection state of |route| has changed.",
                    "///"
                ],
                "decl": "void (*on_route_state_changed) (struct _cef_media_observer_t *, struct _cef_media_route_t *, cef_media_route_connection_state_t)",
                "name": "on_route_state_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_observer_t"
                    ],
                    [
                        "struct _cef_media_route_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// A message was recieved over |route|. |message| is only valid for the scope",
                    "// of this callback and should be copied if necessary.",
                    "///"
                ],
                "decl": "void (*on_route_message_received) (struct _cef_media_observer_t *, struct _cef_media_route_t *, const void *, size_t)",
                "name": "on_route_message_received",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_route_create_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_media_router_t::CreateRoute. The functions of this",
            "// structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_media_route_create_callback_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_create_callback_t"
                    ],
                    "cef_media_route_create_result_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_media_route_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be executed when the route creation has finished. |result|",
                    "// will be CEF_MRCR_OK if the route creation succeeded. |error| will be a",
                    "// description of the error if the route creation failed. |route| is the",
                    "// resulting route, or NULL if the route creation failed.",
                    "///"
                ],
                "decl": "void (*on_media_route_create_finished) (struct _cef_media_route_create_callback_t *, cef_media_route_create_result_t, const cef_string_t *, struct _cef_media_route_t *)",
                "name": "on_media_route_create_finished",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_route_t": {
        "comment": [
            "///",
            "// Represents the route between a media source and sink. Instances of this",
            "// object are created via cef_media_router_t::CreateRoute and retrieved via",
            "// cef_media_observer_t::OnRoutes. Contains the status and metadata of a routing",
            "// operation. The functions of this structure may be called on any browser",
            "// process thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_media_route_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the ID for this route.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_route_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the source associated with this route.",
                    "///"
                ],
                "decl": "struct _cef_media_source_t * (*get_source) (struct _cef_media_route_t *)",
                "name": "get_source",
                "ret": [
                    "struct _cef_media_source_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the sink associated with this route.",
                    "///"
                ],
                "decl": "struct _cef_media_sink_t * (*get_sink) (struct _cef_media_route_t *)",
                "name": "get_sink",
                "ret": [
                    "struct _cef_media_sink_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Send a message over this route. |message| will be copied if necessary.",
                    "///"
                ],
                "decl": "void (*send_route_message) (struct _cef_media_route_t *, const void *, size_t)",
                "name": "send_route_message",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_route_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Terminate this route. Will result in an asynchronous call to",
                    "// cef_media_observer_t::OnRoutes on all registered observers.",
                    "///"
                ],
                "decl": "void (*terminate) (struct _cef_media_route_t *)",
                "name": "terminate",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_router_t": {
        "comment": [
            "///",
            "// Supports discovery of and communication with media devices on the local",
            "// network via the Cast and DIAL protocols. The functions of this structure may",
            "// be called on any browser process thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_media_router_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_router_t"
                    ],
                    [
                        "struct _cef_media_observer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add an observer for MediaRouter events. The observer will remain registered",
                    "// until the returned Registration object is destroyed.",
                    "///"
                ],
                "decl": "struct _cef_registration_t * (*add_observer) (struct _cef_media_router_t *, struct _cef_media_observer_t *)",
                "name": "add_observer",
                "ret": [
                    "struct _cef_registration_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_router_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a MediaSource object for the specified media source URN. Supported",
                    "// URN schemes include \"cast:\" and \"dial:\", and will be already known by the",
                    "// client application (e.g. \"cast:<appId>?clientId=<clientId>\").",
                    "///"
                ],
                "decl": "struct _cef_media_source_t * (*get_source) (struct _cef_media_router_t *, const cef_string_t *)",
                "name": "get_source",
                "ret": [
                    "struct _cef_media_source_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_router_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Trigger an asynchronous call to cef_media_observer_t::OnSinks on all",
                    "// registered observers.",
                    "///"
                ],
                "decl": "void (*notify_current_sinks) (struct _cef_media_router_t *)",
                "name": "notify_current_sinks",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_router_t"
                    ],
                    [
                        "struct _cef_media_source_t"
                    ],
                    [
                        "struct _cef_media_sink_t"
                    ],
                    [
                        "struct _cef_media_route_create_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Create a new route between |source| and |sink|. Source and sink must be",
                    "// valid, compatible (as reported by cef_media_sink_t::IsCompatibleWith), and",
                    "// a route between them must not already exist. |callback| will be executed on",
                    "// success or failure. If route creation succeeds it will also trigger an",
                    "// asynchronous call to cef_media_observer_t::OnRoutes on all registered",
                    "// observers.",
                    "///"
                ],
                "decl": "void (*create_route) (struct _cef_media_router_t *, struct _cef_media_source_t *, struct _cef_media_sink_t *, struct _cef_media_route_create_callback_t *)",
                "name": "create_route",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_router_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Trigger an asynchronous call to cef_media_observer_t::OnRoutes on all",
                    "// registered observers.",
                    "///"
                ],
                "decl": "void (*notify_current_routes) (struct _cef_media_router_t *)",
                "name": "notify_current_routes",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_sink_device_info_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_media_sink_t::GetDeviceInfo. The functions of this",
            "// structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_media_sink_device_info_callback_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_device_info_callback_t"
                    ],
                    [
                        "const struct _cef_media_sink_device_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be executed asyncronously once device information has been",
                    "// retrieved.",
                    "///"
                ],
                "decl": "void (*on_media_sink_device_info) (struct _cef_media_sink_device_info_callback_t *, const struct _cef_media_sink_device_info_t *)",
                "name": "on_media_sink_device_info",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_sink_device_info_t": {
        "comment": [
            "///",
            "// Device information for a MediaSink object.",
            "///"
        ],
        "name": "cef_media_sink_device_info_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "ip_address",
                "type": "cef_string_t"
            },
            {
                "name": "port",
                "type": "int"
            },
            {
                "name": "model_name",
                "type": "cef_string_t"
            }
        ]
    },
    "_cef_media_sink_t": {
        "comment": [
            "///",
            "// Represents a sink to which media can be routed. Instances of this object are",
            "// retrieved via cef_media_observer_t::OnSinks. The functions of this structure",
            "// may be called on any browser process thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_media_sink_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the ID for this sink.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_sink_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name of this sink.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_media_sink_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the description of this sink.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_description) (struct _cef_media_sink_t *)",
                "name": "get_description",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the icon type for this sink.",
                    "///"
                ],
                "decl": "cef_media_sink_icon_type_t (*get_icon_type) (struct _cef_media_sink_t *)",
                "name": "get_icon_type",
                "ret": "cef_media_sink_icon_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ],
                    [
                        "struct _cef_media_sink_device_info_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Asynchronously retrieves device info.",
                    "///"
                ],
                "decl": "void (*get_device_info) (struct _cef_media_sink_t *, struct _cef_media_sink_device_info_callback_t *)",
                "name": "get_device_info",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this sink accepts content via Cast.",
                    "///"
                ],
                "decl": "int (*is_cast_sink) (struct _cef_media_sink_t *)",
                "name": "is_cast_sink",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this sink accepts content via DIAL.",
                    "///"
                ],
                "decl": "int (*is_dial_sink) (struct _cef_media_sink_t *)",
                "name": "is_dial_sink",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_sink_t"
                    ],
                    [
                        "struct _cef_media_source_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this sink is compatible with |source|.",
                    "///"
                ],
                "decl": "int (*is_compatible_with) (struct _cef_media_sink_t *, struct _cef_media_source_t *)",
                "name": "is_compatible_with",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_media_source_t": {
        "comment": [
            "///",
            "// Represents a source from which media can be routed. Instances of this object",
            "// are retrieved via cef_media_router_t::GetSource. The functions of this",
            "// structure may be called on any browser process thread unless otherwise",
            "// indicated.",
            "///"
        ],
        "name": "cef_media_source_t",
        "path": "include/capi/cef_media_router_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_media_source_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the ID (media source URN or URL) for this source.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_id) (struct _cef_media_source_t *)",
                "name": "get_id",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_source_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this source outputs its content via Cast.",
                    "///"
                ],
                "decl": "int (*is_cast_source) (struct _cef_media_source_t *)",
                "name": "is_cast_source",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_media_source_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this source outputs its content via DIAL.",
                    "///"
                ],
                "decl": "int (*is_dial_source) (struct _cef_media_source_t *)",
                "name": "is_dial_source",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_menu_model_delegate_t": {
        "comment": [
            "///",
            "// Implement this structure to handle menu model events. The functions of this",
            "// structure will be called on the browser process UI thread unless otherwise",
            "// indicated.",
            "///"
        ],
        "name": "cef_menu_model_delegate_t",
        "path": "include/capi/cef_menu_model_delegate_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "comment": [
                    "///",
                    "// Perform the action associated with the specified |command_id| and optional",
                    "// |event_flags|.",
                    "///"
                ],
                "decl": "void (*execute_command) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int, cef_event_flags_t)",
                "name": "execute_command",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    [
                        "const cef_point_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the user moves the mouse outside the menu and over the owning",
                    "// window.",
                    "///"
                ],
                "decl": "void (*mouse_outside_menu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, const cef_point_t *)",
                "name": "mouse_outside_menu",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called on unhandled open submenu keyboard commands. |is_rtl| will be true",
                    "// (1) if the menu is displaying a right-to-left language.",
                    "///"
                ],
                "decl": "void (*unhandled_open_submenu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int)",
                "name": "unhandled_open_submenu",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called on unhandled close submenu keyboard commands. |is_rtl| will be true",
                    "// (1) if the menu is displaying a right-to-left language.",
                    "///"
                ],
                "decl": "void (*unhandled_close_submenu) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, int)",
                "name": "unhandled_close_submenu",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// The menu is about to show.",
                    "///"
                ],
                "decl": "void (*menu_will_show) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *)",
                "name": "menu_will_show",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// The menu has closed.",
                    "///"
                ],
                "decl": "void (*menu_closed) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *)",
                "name": "menu_closed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_delegate_t"
                    ],
                    [
                        "struct _cef_menu_model_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Optionally modify a menu item label. Return true (1) if |label| was",
                    "// modified.",
                    "///"
                ],
                "decl": "int (*format_label) (struct _cef_menu_model_delegate_t *, struct _cef_menu_model_t *, cef_string_t *)",
                "name": "format_label",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_menu_model_t": {
        "comment": [
            "///",
            "// Supports creation and modification of menus. See cef_menu_id_t for the",
            "// command ids that have default implementations. All user-defined command ids",
            "// should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The functions of",
            "// this structure can only be accessed on the browser process the UI thread.",
            "///"
        ],
        "name": "cef_menu_model_t",
        "path": "include/capi/cef_menu_model_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this menu is a submenu.",
                    "///"
                ],
                "decl": "int (*is_sub_menu) (struct _cef_menu_model_t *)",
                "name": "is_sub_menu",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clears the menu. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*clear) (struct _cef_menu_model_t *)",
                "name": "clear",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of items in this menu.",
                    "///"
                ],
                "decl": "int (*get_count) (struct _cef_menu_model_t *)",
                "name": "get_count",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a separator to the menu. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*add_separator) (struct _cef_menu_model_t *)",
                "name": "add_separator",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add an item to the menu. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*add_item) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_item",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a check item to the menu. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*add_check_item) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_check_item",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Add a radio item to the menu. Only a single item with the specified",
                    "// |group_id| can be checked at a time. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*add_radio_item) (struct _cef_menu_model_t *, int, const cef_string_t *, int)",
                "name": "add_radio_item",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add a sub-menu to the menu. The new sub-menu is returned.",
                    "///"
                ],
                "decl": "struct _cef_menu_model_t * (*add_sub_menu) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "add_sub_menu",
                "ret": [
                    "struct _cef_menu_model_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Insert a separator in the menu at the specified |index|. Returns true (1)",
                    "// on success.",
                    "///"
                ],
                "decl": "int (*insert_separator_at) (struct _cef_menu_model_t *, int)",
                "name": "insert_separator_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Insert an item in the menu at the specified |index|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*insert_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_item_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Insert a check item in the menu at the specified |index|. Returns true (1)",
                    "// on success.",
                    "///"
                ],
                "decl": "int (*insert_check_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_check_item_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Insert a radio item in the menu at the specified |index|. Only a single",
                    "// item with the specified |group_id| can be checked at a time. Returns true",
                    "// (1) on success.",
                    "///"
                ],
                "decl": "int (*insert_radio_item_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *, int)",
                "name": "insert_radio_item_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Insert a sub-menu in the menu at the specified |index|. The new sub-menu is",
                    "// returned.",
                    "///"
                ],
                "decl": "struct _cef_menu_model_t * (*insert_sub_menu_at) (struct _cef_menu_model_t *, int, int, const cef_string_t *)",
                "name": "insert_sub_menu_at",
                "ret": [
                    "struct _cef_menu_model_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Removes the item with the specified |command_id|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*remove) (struct _cef_menu_model_t *, int)",
                "name": "remove",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Removes the item at the specified |index|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*remove_at) (struct _cef_menu_model_t *, int)",
                "name": "remove_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the index associated with the specified |command_id| or -1 if not",
                    "// found due to the command id not existing in the menu.",
                    "///"
                ],
                "decl": "int (*get_index_of) (struct _cef_menu_model_t *, int)",
                "name": "get_index_of",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the command id at the specified |index| or -1 if not found due to",
                    "// invalid range or the index being a separator.",
                    "///"
                ],
                "decl": "int (*get_command_id_at) (struct _cef_menu_model_t *, int)",
                "name": "get_command_id_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the command id at the specified |index|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_command_id_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_command_id_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the label for the specified |command_id| or NULL if not found.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_label) (struct _cef_menu_model_t *, int)",
                "name": "get_label",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the label at the specified |index| or NULL if not found due to",
                    "// invalid range or the index being a separator.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_label_at) (struct _cef_menu_model_t *, int)",
                "name": "get_label_at",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the label for the specified |command_id|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_label) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_label",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the label at the specified |index|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_label_at) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_label_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the item type for the specified |command_id|.",
                    "///"
                ],
                "decl": "cef_menu_item_type_t (*get_type) (struct _cef_menu_model_t *, int)",
                "name": "get_type",
                "ret": "cef_menu_item_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the item type at the specified |index|.",
                    "///"
                ],
                "decl": "cef_menu_item_type_t (*get_type_at) (struct _cef_menu_model_t *, int)",
                "name": "get_type_at",
                "ret": "cef_menu_item_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the group id for the specified |command_id| or -1 if invalid.",
                    "///"
                ],
                "decl": "int (*get_group_id) (struct _cef_menu_model_t *, int)",
                "name": "get_group_id",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the group id at the specified |index| or -1 if invalid.",
                    "///"
                ],
                "decl": "int (*get_group_id_at) (struct _cef_menu_model_t *, int)",
                "name": "get_group_id_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the group id for the specified |command_id|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*set_group_id) (struct _cef_menu_model_t *, int, int)",
                "name": "set_group_id",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the group id at the specified |index|. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_group_id_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_group_id_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the submenu for the specified |command_id| or NULL if invalid.",
                    "///"
                ],
                "decl": "struct _cef_menu_model_t * (*get_sub_menu) (struct _cef_menu_model_t *, int)",
                "name": "get_sub_menu",
                "ret": [
                    "struct _cef_menu_model_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the submenu at the specified |index| or NULL if invalid.",
                    "///"
                ],
                "decl": "struct _cef_menu_model_t * (*get_sub_menu_at) (struct _cef_menu_model_t *, int)",
                "name": "get_sub_menu_at",
                "ret": [
                    "struct _cef_menu_model_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |command_id| is visible.",
                    "///"
                ],
                "decl": "int (*is_visible) (struct _cef_menu_model_t *, int)",
                "name": "is_visible",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |index| is visible.",
                    "///"
                ],
                "decl": "int (*is_visible_at) (struct _cef_menu_model_t *, int)",
                "name": "is_visible_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Change the visibility of the specified |command_id|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*set_visible) (struct _cef_menu_model_t *, int, int)",
                "name": "set_visible",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Change the visibility at the specified |index|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*set_visible_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_visible_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |command_id| is enabled.",
                    "///"
                ],
                "decl": "int (*is_enabled) (struct _cef_menu_model_t *, int)",
                "name": "is_enabled",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |index| is enabled.",
                    "///"
                ],
                "decl": "int (*is_enabled_at) (struct _cef_menu_model_t *, int)",
                "name": "is_enabled_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Change the enabled status of the specified |command_id|. Returns true (1)",
                    "// on success.",
                    "///"
                ],
                "decl": "int (*set_enabled) (struct _cef_menu_model_t *, int, int)",
                "name": "set_enabled",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Change the enabled status at the specified |index|. Returns true (1) on",
                    "// success.",
                    "///"
                ],
                "decl": "int (*set_enabled_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_enabled_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |command_id| is checked. Only applies to",
                    "// check and radio items.",
                    "///"
                ],
                "decl": "int (*is_checked) (struct _cef_menu_model_t *, int)",
                "name": "is_checked",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |index| is checked. Only applies to check",
                    "// and radio items.",
                    "///"
                ],
                "decl": "int (*is_checked_at) (struct _cef_menu_model_t *, int)",
                "name": "is_checked_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Check the specified |command_id|. Only applies to check and radio items.",
                    "// Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_checked) (struct _cef_menu_model_t *, int, int)",
                "name": "set_checked",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Check the specified |index|. Only applies to check and radio items. Returns",
                    "// true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_checked_at) (struct _cef_menu_model_t *, int, int)",
                "name": "set_checked_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |command_id| has a keyboard accelerator",
                    "// assigned.",
                    "///"
                ],
                "decl": "int (*has_accelerator) (struct _cef_menu_model_t *, int)",
                "name": "has_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the specified |index| has a keyboard accelerator",
                    "// assigned.",
                    "///"
                ],
                "decl": "int (*has_accelerator_at) (struct _cef_menu_model_t *, int)",
                "name": "has_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    "int",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the keyboard accelerator for the specified |command_id|. |key_code| can",
                    "// be any virtual key or character value. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_accelerator) (struct _cef_menu_model_t *, int, int, int, int, int)",
                "name": "set_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "int",
                    "int",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the keyboard accelerator at the specified |index|. |key_code| can be",
                    "// any virtual key or character value. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_accelerator_at) (struct _cef_menu_model_t *, int, int, int, int, int)",
                "name": "set_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Remove the keyboard accelerator for the specified |command_id|. Returns",
                    "// true (1) on success.",
                    "///"
                ],
                "decl": "int (*remove_accelerator) (struct _cef_menu_model_t *, int)",
                "name": "remove_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Remove the keyboard accelerator at the specified |index|. Returns true (1)",
                    "// on success.",
                    "///"
                ],
                "decl": "int (*remove_accelerator_at) (struct _cef_menu_model_t *, int)",
                "name": "remove_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieves the keyboard accelerator for the specified |command_id|. Returns",
                    "// true (1) on success.",
                    "///"
                ],
                "decl": "int (*get_accelerator) (struct _cef_menu_model_t *, int, int *, int *, int *, int *)",
                "name": "get_accelerator",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieves the keyboard accelerator for the specified |index|. Returns true",
                    "// (1) on success.",
                    "///"
                ],
                "decl": "int (*get_accelerator_at) (struct _cef_menu_model_t *, int, int *, int *, int *, int *)",
                "name": "get_accelerator_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    "cef_color_t"
                ],
                "comment": [
                    "///",
                    "// Set the explicit color for |command_id| and |color_type| to |color|.",
                    "// Specify a |color| value of 0 to remove the explicit color. If no explicit",
                    "// color or default color is set for |color_type| then the system color will",
                    "// be used. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_color) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t)",
                "name": "set_color",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    "cef_color_t"
                ],
                "comment": [
                    "///",
                    "// Set the explicit color for |command_id| and |index| to |color|. Specify a",
                    "// |color| value of 0 to remove the explicit color. Specify an |index| value",
                    "// of -1 to set the default color for items that do not have an explicit color",
                    "// set. If no explicit color or default color is set for |color_type| then the",
                    "// system color will be used. Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*set_color_at) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t)",
                "name": "set_color_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    [
                        "cef_color_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns in |color| the color that was explicitly set for |command_id| and",
                    "// |color_type|. If a color was not set then 0 will be returned in |color|.",
                    "// Returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*get_color) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t *)",
                "name": "get_color",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    "cef_menu_color_type_t",
                    [
                        "cef_color_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns in |color| the color that was explicitly set for |command_id| and",
                    "// |color_type|. Specify an |index| value of -1 to return the default color in",
                    "// |color|. If a color was not set then 0 will be returned in |color|. Returns",
                    "// true (1) on success.",
                    "///"
                ],
                "decl": "int (*get_color_at) (struct _cef_menu_model_t *, int, cef_menu_color_type_t, cef_color_t *)",
                "name": "get_color_at",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the font list for the specified |command_id|. If |font_list| is NULL",
                    "// the system font will be used. Returns true (1) on success. The format is",
                    "// \"<FONT_FAMILY_LIST>,[STYLES] <SIZE>\", where: - FONT_FAMILY_LIST is a comma-",
                    "// separated list of font family names, - STYLES is an optional space-",
                    "// separated list of style names (case-sensitive",
                    "//   \"Bold\" and \"Italic\" are supported), and",
                    "// - SIZE is an integer font size in pixels with the suffix \"px\".",
                    "//",
                    "// Here are examples of valid font description strings: - \"Arial, Helvetica,",
                    "// Bold Italic 14px\" - \"Arial, 14px\"",
                    "///"
                ],
                "decl": "int (*set_font_list) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_font_list",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_menu_model_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the font list for the specified |index|. Specify an |index| value of",
                    "// -1 to set the default font. If |font_list| is NULL the system font will be",
                    "// used. Returns true (1) on success. The format is",
                    "// \"<FONT_FAMILY_LIST>,[STYLES] <SIZE>\", where: - FONT_FAMILY_LIST is a comma-",
                    "// separated list of font family names, - STYLES is an optional space-",
                    "// separated list of style names (case-sensitive",
                    "//   \"Bold\" and \"Italic\" are supported), and",
                    "// - SIZE is an integer font size in pixels with the suffix \"px\".",
                    "//",
                    "// Here are examples of valid font description strings: - \"Arial, Helvetica,",
                    "// Bold Italic 14px\" - \"Arial, 14px\"",
                    "///"
                ],
                "decl": "int (*set_font_list_at) (struct _cef_menu_model_t *, int, const cef_string_t *)",
                "name": "set_font_list_at",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_mouse_event_t": {
        "comment": [
            "///",
            "// Structure representing mouse event information.",
            "///"
        ],
        "name": "cef_mouse_event_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// X coordinate relative to the left side of the view.",
                    "///"
                ],
                "name": "x",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Y coordinate relative to the top side of the view.",
                    "///"
                ],
                "name": "y",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Bit flags describing any pressed modifier keys. See",
                    "// cef_event_flags_t for values.",
                    "///"
                ],
                "name": "modifiers",
                "type": "uint32"
            }
        ]
    },
    "_cef_navigation_entry_t": {
        "comment": [
            "///",
            "// Structure used to represent an entry in navigation history.",
            "///"
        ],
        "name": "cef_navigation_entry_t",
        "path": "include/capi/cef_navigation_entry_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. Do not call any other functions",
                    "// if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_navigation_entry_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the actual URL of the page. For some pages this may be data: URL or",
                    "// similar. Use get_display_url() to return a display-friendly version.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_navigation_entry_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a display-friendly version of the URL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_display_url) (struct _cef_navigation_entry_t *)",
                "name": "get_display_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the original URL that was entered by the user before any redirects.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_original_url) (struct _cef_navigation_entry_t *)",
                "name": "get_original_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the title set by the page. This value may be NULL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_title) (struct _cef_navigation_entry_t *)",
                "name": "get_title",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the transition type which indicates what the user did to move to",
                    "// this page from the previous page.",
                    "///"
                ],
                "decl": "cef_transition_type_t (*get_transition_type) (struct _cef_navigation_entry_t *)",
                "name": "get_transition_type",
                "ret": "cef_transition_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this navigation includes post data.",
                    "///"
                ],
                "decl": "int (*has_post_data) (struct _cef_navigation_entry_t *)",
                "name": "has_post_data",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the time for the last known successful navigation completion. A",
                    "// navigation may be completed more than once if the page is reloaded. May be",
                    "// 0 if the navigation has not yet completed.",
                    "///"
                ],
                "decl": "cef_time_t (*get_completion_time) (struct _cef_navigation_entry_t *)",
                "name": "get_completion_time",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the HTTP status code for the last known successful navigation",
                    "// response. May be 0 if the response has not yet been received or if the",
                    "// navigation has not yet completed.",
                    "///"
                ],
                "decl": "int (*get_http_status_code) (struct _cef_navigation_entry_t *)",
                "name": "get_http_status_code",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the SSL information for this navigation entry.",
                    "///"
                ],
                "decl": "struct _cef_sslstatus_t * (*get_sslstatus) (struct _cef_navigation_entry_t *)",
                "name": "get_sslstatus",
                "ret": [
                    "struct _cef_sslstatus_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_navigation_entry_visitor_t": {
        "comment": [
            "///",
            "// Callback structure for cef_browser_host_t::GetNavigationEntries. The",
            "// functions of this structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_navigation_entry_visitor_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_navigation_entry_visitor_t"
                    ],
                    [
                        "struct _cef_navigation_entry_t"
                    ],
                    "int",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be executed. Do not keep a reference to |entry| outside of",
                    "// this callback. Return true (1) to continue visiting entries or false (0) to",
                    "// stop. |current| is true (1) if this entry is the currently loaded",
                    "// navigation entry. |index| is the 0-based index of this entry and |total| is",
                    "// the total number of entries.",
                    "///"
                ],
                "decl": "int (*visit) (struct _cef_navigation_entry_visitor_t *, struct _cef_navigation_entry_t *, int, int, int)",
                "name": "visit",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_pdf_print_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_browser_host_t::PrintToPDF. The functions of this",
            "// structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_pdf_print_callback_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_pdf_print_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be executed when the PDF printing has completed. |path| is",
                    "// the output path. |ok| will be true (1) if the printing completed",
                    "// successfully or false (0) otherwise.",
                    "///"
                ],
                "decl": "void (*on_pdf_print_finished) (struct _cef_pdf_print_callback_t *, const cef_string_t *, int)",
                "name": "on_pdf_print_finished",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_pdf_print_settings_t": {
        "comment": [
            "///",
            "// Structure representing PDF print settings.",
            "///"
        ],
        "name": "cef_pdf_print_settings_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Page title to display in the header. Only used if |header_footer_enabled|",
                    "// is set to true (1).",
                    "///"
                ],
                "name": "header_footer_title",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// URL to display in the footer. Only used if |header_footer_enabled| is set",
                    "// to true (1).",
                    "///"
                ],
                "name": "header_footer_url",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Output page size in microns. If either of these values is less than or",
                    "// equal to zero then the default paper size (A4) will be used.",
                    "///"
                ],
                "name": "page_width",
                "type": "int"
            },
            {
                "name": "page_height",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The percentage to scale the PDF by before printing (e.g. 50 is 50%).",
                    "// If this value is less than or equal to zero the default value of 100",
                    "// will be used.",
                    "///"
                ],
                "name": "scale_factor",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Margins in points. Only used if |margin_type| is set to",
                    "// PDF_PRINT_MARGIN_CUSTOM.",
                    "///"
                ],
                "name": "margin_top",
                "type": "int"
            },
            {
                "name": "margin_right",
                "type": "int"
            },
            {
                "name": "margin_bottom",
                "type": "int"
            },
            {
                "name": "margin_left",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Margin type.",
                    "///"
                ],
                "name": "margin_type",
                "type": "cef_pdf_print_margin_type_t"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to print headers and footers or false (0) to not print",
                    "// headers and footers.",
                    "///"
                ],
                "name": "header_footer_enabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to print the selection only or false (0) to print all.",
                    "///"
                ],
                "name": "selection_only",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) for landscape mode or false (0) for portrait mode.",
                    "///"
                ],
                "name": "landscape",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to print background graphics or false (0) to not print",
                    "// background graphics.",
                    "///"
                ],
                "name": "backgrounds_enabled",
                "type": "int"
            }
        ]
    },
    "_cef_point_t": {
        "comment": [
            "///",
            "// Structure representing a point.",
            "///"
        ],
        "name": "cef_point_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "x",
                "type": "int"
            },
            {
                "name": "y",
                "type": "int"
            }
        ]
    },
    "_cef_popup_features_t": {
        "comment": [
            "///",
            "// Popup window features.",
            "///"
        ],
        "name": "cef_popup_features_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "x",
                "type": "int"
            },
            {
                "name": "xSet",
                "type": "int"
            },
            {
                "name": "y",
                "type": "int"
            },
            {
                "name": "ySet",
                "type": "int"
            },
            {
                "name": "width",
                "type": "int"
            },
            {
                "name": "widthSet",
                "type": "int"
            },
            {
                "name": "height",
                "type": "int"
            },
            {
                "name": "heightSet",
                "type": "int"
            },
            {
                "name": "menuBarVisible",
                "type": "int"
            },
            {
                "name": "statusBarVisible",
                "type": "int"
            },
            {
                "name": "toolBarVisible",
                "type": "int"
            },
            {
                "name": "scrollbarsVisible",
                "type": "int"
            }
        ]
    },
    "_cef_post_data_element_t": {
        "comment": [
            "///",
            "// Structure used to represent a single element in the request post data. The",
            "// functions of this structure may be called on any thread.",
            "///"
        ],
        "name": "cef_post_data_element_t",
        "path": "include/capi/cef_request_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is read-only.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_post_data_element_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Remove all contents from the post data element.",
                    "///"
                ],
                "decl": "void (*set_to_empty) (struct _cef_post_data_element_t *)",
                "name": "set_to_empty",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// The post data element will represent a file.",
                    "///"
                ],
                "decl": "void (*set_to_file) (struct _cef_post_data_element_t *, const cef_string_t *)",
                "name": "set_to_file",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ],
                    "size_t",
                    [
                        "const void"
                    ]
                ],
                "comment": [
                    "///",
                    "// The post data element will represent bytes.  The bytes passed in will be",
                    "// copied.",
                    "///"
                ],
                "decl": "void (*set_to_bytes) (struct _cef_post_data_element_t *, size_t, const void *)",
                "name": "set_to_bytes",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the type of this post data element.",
                    "///"
                ],
                "decl": "cef_postdataelement_type_t (*get_type) (struct _cef_post_data_element_t *)",
                "name": "get_type",
                "ret": "cef_postdataelement_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the file name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_file) (struct _cef_post_data_element_t *)",
                "name": "get_file",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the number of bytes.",
                    "///"
                ],
                "decl": "size_t (*get_bytes_count) (struct _cef_post_data_element_t *)",
                "name": "get_bytes_count",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_element_t"
                    ],
                    "size_t",
                    [
                        "void"
                    ]
                ],
                "comment": [
                    "///",
                    "// Read up to |size| bytes into |bytes| and return the number of bytes",
                    "// actually read.",
                    "///"
                ],
                "decl": "size_t (*get_bytes) (struct _cef_post_data_element_t *, size_t, void *)",
                "name": "get_bytes",
                "ret": "size_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_post_data_t": {
        "comment": [
            "///",
            "// Structure used to represent post data for a web request. The functions of",
            "// this structure may be called on any thread.",
            "///"
        ],
        "name": "cef_post_data_t",
        "path": "include/capi/cef_request_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is read-only.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_post_data_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying POST data includes elements that are not",
                    "// represented by this cef_post_data_t object (for example, multi-part file",
                    "// upload data). Modifying cef_post_data_t objects with excluded elements may",
                    "// result in the request failing.",
                    "///"
                ],
                "decl": "int (*has_excluded_elements) (struct _cef_post_data_t *)",
                "name": "has_excluded_elements",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of existing post data elements.",
                    "///"
                ],
                "decl": "size_t (*get_element_count) (struct _cef_post_data_t *)",
                "name": "get_element_count",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "struct _cef_post_data_element_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieve the post data elements.",
                    "///"
                ],
                "decl": "void (*get_elements) (struct _cef_post_data_t *, size_t *, struct _cef_post_data_element_t **)",
                "name": "get_elements",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ],
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Remove the specified post data element.  Returns true (1) if the removal",
                    "// succeeds.",
                    "///"
                ],
                "decl": "int (*remove_element) (struct _cef_post_data_t *, struct _cef_post_data_element_t *)",
                "name": "remove_element",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ],
                    [
                        "struct _cef_post_data_element_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Add the specified post data element.  Returns true (1) if the add succeeds.",
                    "///"
                ],
                "decl": "int (*add_element) (struct _cef_post_data_t *, struct _cef_post_data_element_t *)",
                "name": "add_element",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_post_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Remove all existing post data elements.",
                    "///"
                ],
                "decl": "void (*remove_elements) (struct _cef_post_data_t *)",
                "name": "remove_elements",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_print_dialog_callback_t": {
        "comment": [
            "///",
            "// Callback structure for asynchronous continuation of print dialog requests.",
            "///"
        ],
        "name": "cef_print_dialog_callback_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_print_dialog_callback_t"
                    ],
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Continue printing with the specified |settings|.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_print_dialog_callback_t *, struct _cef_print_settings_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_dialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the printing.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_print_dialog_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_print_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle printing on Linux. Each browser will have",
            "// only one print job in progress at a time. The functions of this structure",
            "// will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_print_handler_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when printing has started for the specified |browser|. This function",
                    "// will be called before the other OnPrint*() functions and irrespective of",
                    "// how printing was initiated (e.g. cef_browser_host_t::print(), JavaScript",
                    "// window.print() or PDF extension print button).",
                    "///"
                ],
                "decl": "void (*on_print_start) (struct _cef_print_handler_t *, struct _cef_browser_t *)",
                "name": "on_print_start",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Synchronize |settings| with client state. If |get_defaults| is true (1)",
                    "// then populate |settings| with the default print settings. Do not keep a",
                    "// reference to |settings| outside of this callback.",
                    "///"
                ],
                "decl": "void (*on_print_settings) (struct _cef_print_handler_t *, struct _cef_browser_t *, struct _cef_print_settings_t *, int)",
                "name": "on_print_settings",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    [
                        "struct _cef_print_dialog_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Show the print dialog. Execute |callback| once the dialog is dismissed.",
                    "// Return true (1) if the dialog will be displayed or false (0) to cancel the",
                    "// printing immediately.",
                    "///"
                ],
                "decl": "int (*on_print_dialog) (struct _cef_print_handler_t *, struct _cef_browser_t *, int, struct _cef_print_dialog_callback_t *)",
                "name": "on_print_dialog",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_print_job_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Send the print job to the printer. Execute |callback| once the job is",
                    "// completed. Return true (1) if the job will proceed or false (0) to cancel",
                    "// the job immediately.",
                    "///"
                ],
                "decl": "int (*on_print_job) (struct _cef_print_handler_t *, struct _cef_browser_t *, const cef_string_t *, const cef_string_t *, struct _cef_print_job_callback_t *)",
                "name": "on_print_job",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Reset client state related to printing.",
                    "///"
                ],
                "decl": "void (*on_print_reset) (struct _cef_print_handler_t *, struct _cef_browser_t *)",
                "name": "on_print_reset",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_handler_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Return the PDF paper size in device units. Used in combination with",
                    "// cef_browser_host_t::print_to_pdf().",
                    "///"
                ],
                "decl": "cef_size_t (*get_pdf_paper_size) (struct _cef_print_handler_t *, int)",
                "name": "get_pdf_paper_size",
                "ret": "cef_size_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_print_job_callback_t": {
        "comment": [
            "///",
            "// Callback structure for asynchronous continuation of print job requests.",
            "///"
        ],
        "name": "cef_print_job_callback_t",
        "path": "include/capi/cef_print_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_print_job_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Indicate completion of the print job.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_print_job_callback_t *)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_print_settings_t": {
        "comment": [
            "///",
            "// Structure representing print settings.",
            "///"
        ],
        "name": "cef_print_settings_t",
        "path": "include/capi/cef_print_settings_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. Do not call any other functions",
                    "// if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_print_settings_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the values of this object are read-only. Some APIs may",
                    "// expose read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_print_settings_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the page orientation.",
                    "///"
                ],
                "decl": "void (*set_orientation) (struct _cef_print_settings_t *, int)",
                "name": "set_orientation",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the orientation is landscape.",
                    "///"
                ],
                "decl": "int (*is_landscape) (struct _cef_print_settings_t *)",
                "name": "is_landscape",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    [
                        "const cef_size_t"
                    ],
                    [
                        "const cef_rect_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the printer printable area in device units. Some platforms already",
                    "// provide flipped area. Set |landscape_needs_flip| to false (0) on those",
                    "// platforms to avoid double flipping.",
                    "///"
                ],
                "decl": "void (*set_printer_printable_area) (struct _cef_print_settings_t *, const cef_size_t *, const cef_rect_t *, int)",
                "name": "set_printer_printable_area",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the device name.",
                    "///"
                ],
                "decl": "void (*set_device_name) (struct _cef_print_settings_t *, const cef_string_t *)",
                "name": "set_device_name",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the device name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_device_name) (struct _cef_print_settings_t *)",
                "name": "get_device_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the DPI (dots per inch).",
                    "///"
                ],
                "decl": "void (*set_dpi) (struct _cef_print_settings_t *, int)",
                "name": "set_dpi",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the DPI (dots per inch).",
                    "///"
                ],
                "decl": "int (*get_dpi) (struct _cef_print_settings_t *)",
                "name": "get_dpi",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "size_t",
                    [
                        "const cef_range_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the page ranges.",
                    "///"
                ],
                "decl": "void (*set_page_ranges) (struct _cef_print_settings_t *, size_t, const cef_range_t *)",
                "name": "set_page_ranges",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of page ranges that currently exist.",
                    "///"
                ],
                "decl": "size_t (*get_page_ranges_count) (struct _cef_print_settings_t *)",
                "name": "get_page_ranges_count",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        "cef_range_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieve the page ranges.",
                    "///"
                ],
                "decl": "void (*get_page_ranges) (struct _cef_print_settings_t *, size_t *, cef_range_t *)",
                "name": "get_page_ranges",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set whether only the selection will be printed.",
                    "///"
                ],
                "decl": "void (*set_selection_only) (struct _cef_print_settings_t *, int)",
                "name": "set_selection_only",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if only the selection will be printed.",
                    "///"
                ],
                "decl": "int (*is_selection_only) (struct _cef_print_settings_t *)",
                "name": "is_selection_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set whether pages will be collated.",
                    "///"
                ],
                "decl": "void (*set_collate) (struct _cef_print_settings_t *, int)",
                "name": "set_collate",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if pages will be collated.",
                    "///"
                ],
                "decl": "int (*will_collate) (struct _cef_print_settings_t *)",
                "name": "will_collate",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "cef_color_model_t"
                ],
                "comment": [
                    "///",
                    "// Set the color model.",
                    "///"
                ],
                "decl": "void (*set_color_model) (struct _cef_print_settings_t *, cef_color_model_t)",
                "name": "set_color_model",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the color model.",
                    "///"
                ],
                "decl": "cef_color_model_t (*get_color_model) (struct _cef_print_settings_t *)",
                "name": "get_color_model",
                "ret": "cef_color_model_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the number of copies.",
                    "///"
                ],
                "decl": "void (*set_copies) (struct _cef_print_settings_t *, int)",
                "name": "set_copies",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the number of copies.",
                    "///"
                ],
                "decl": "int (*get_copies) (struct _cef_print_settings_t *)",
                "name": "get_copies",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ],
                    "cef_duplex_mode_t"
                ],
                "comment": [
                    "///",
                    "// Set the duplex mode.",
                    "///"
                ],
                "decl": "void (*set_duplex_mode) (struct _cef_print_settings_t *, cef_duplex_mode_t)",
                "name": "set_duplex_mode",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_print_settings_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the duplex mode.",
                    "///"
                ],
                "decl": "cef_duplex_mode_t (*get_duplex_mode) (struct _cef_print_settings_t *)",
                "name": "get_duplex_mode",
                "ret": "cef_duplex_mode_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_process_message_t": {
        "comment": [
            "///",
            "// Structure representing a message. Can be used on any process and thread.",
            "///"
        ],
        "name": "cef_process_message_t",
        "path": "include/capi/cef_process_message_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is valid. Do not call any other functions",
                    "// if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_process_message_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the values of this object are read-only. Some APIs may",
                    "// expose read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_process_message_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a writable copy of this object.",
                    "///"
                ],
                "decl": "struct _cef_process_message_t * (*copy) (struct _cef_process_message_t *)",
                "name": "copy",
                "ret": [
                    "struct _cef_process_message_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the message name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_process_message_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the list of arguments.",
                    "///"
                ],
                "decl": "struct _cef_list_value_t * (*get_argument_list) (struct _cef_process_message_t *)",
                "name": "get_argument_list",
                "ret": [
                    "struct _cef_list_value_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_range_t": {
        "comment": [
            "///",
            "// Structure representing a range.",
            "///"
        ],
        "name": "cef_range_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "from",
                "type": "int"
            },
            {
                "name": "to",
                "type": "int"
            }
        ]
    },
    "_cef_read_handler_t": {
        "comment": [
            "///",
            "// Structure the client can implement to provide a custom stream reader. The",
            "// functions of this structure may be called on any thread.",
            "///"
        ],
        "name": "cef_read_handler_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_read_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Read raw binary data.",
                    "///"
                ],
                "decl": "size_t (*read) (struct _cef_read_handler_t *, void *, size_t, size_t)",
                "name": "read",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_read_handler_t"
                    ],
                    "int64",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Seek to the specified offset position. |whence| may be any one of SEEK_CUR,",
                    "// SEEK_END or SEEK_SET. Return zero on success and non-zero on failure.",
                    "///"
                ],
                "decl": "int (*seek) (struct _cef_read_handler_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_read_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the current offset position.",
                    "///"
                ],
                "decl": "int64 (*tell) (struct _cef_read_handler_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_read_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return non-zero if at end of file.",
                    "///"
                ],
                "decl": "int (*eof) (struct _cef_read_handler_t *)",
                "name": "eof",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_read_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return true (1) if this handler performs work like accessing the file",
                    "// system which may block. Used as a hint for determining the thread to access",
                    "// the handler from.",
                    "///"
                ],
                "decl": "int (*may_block) (struct _cef_read_handler_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_rect_t": {
        "comment": [
            "///",
            "// Structure representing a rectangle.",
            "///"
        ],
        "name": "cef_rect_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "x",
                "type": "int"
            },
            {
                "name": "y",
                "type": "int"
            },
            {
                "name": "width",
                "type": "int"
            },
            {
                "name": "height",
                "type": "int"
            }
        ]
    },
    "_cef_register_cdm_callback_t": {
        "comment": [
            "///",
            "// Implement this structure to receive notification when CDM registration is",
            "// complete. The functions of this structure will be called on the browser",
            "// process UI thread.",
            "///"
        ],
        "name": "cef_register_cdm_callback_t",
        "path": "include/capi/cef_web_plugin_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_register_cdm_callback_t"
                    ],
                    "cef_cdm_registration_error_t",
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be called when CDM registration is complete. |result| will",
                    "// be CEF_CDM_REGISTRATION_ERROR_NONE if registration completed successfully.",
                    "// Otherwise, |result| and |error_message| will contain additional information",
                    "// about why registration failed.",
                    "///"
                ],
                "decl": "void (*on_cdm_registration_complete) (struct _cef_register_cdm_callback_t *, cef_cdm_registration_error_t, const cef_string_t *)",
                "name": "on_cdm_registration_complete",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_registration_t": {
        "comment": [
            "///",
            "// Generic callback structure used for managing the lifespan of a registration.",
            "///"
        ],
        "name": "cef_registration_t",
        "path": "include/capi/cef_registration_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            }
        ]
    },
    "_cef_render_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events when window rendering is disabled.",
            "// The functions of this structure will be called on the UI thread.",
            "///"
        ],
        "name": "cef_render_handler_t",
        "path": "include/capi/cef_render_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for accessibility notifications. If no handler is",
                    "// provided the default implementation will be used.",
                    "///"
                ],
                "decl": "struct _cef_accessibility_handler_t * (*get_accessibility_handler) (struct _cef_render_handler_t *)",
                "name": "get_accessibility_handler",
                "ret": [
                    "struct _cef_accessibility_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "cef_rect_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve the root window rectangle in screen coordinates. Return",
                    "// true (1) if the rectangle was provided. If this function returns false (0)",
                    "// the rectangle from GetViewRect will be used.",
                    "///"
                ],
                "decl": "int (*get_root_screen_rect) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_rect_t *)",
                "name": "get_root_screen_rect",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "cef_rect_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve the view rectangle which is relative to screen",
                    "// coordinates. This function must always provide a non-NULL rectangle.",
                    "///"
                ],
                "decl": "void (*get_view_rect) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_rect_t *)",
                "name": "get_view_rect",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    "int",
                    [
                        "int"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve the translation from view coordinates to actual screen",
                    "// coordinates. Return true (1) if the screen coordinates were provided.",
                    "///"
                ],
                "decl": "int (*get_screen_point) (struct _cef_render_handler_t *, struct _cef_browser_t *, int, int, int *, int *)",
                "name": "get_screen_point",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_screen_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to allow the client to fill in the CefScreenInfo object with",
                    "// appropriate values. Return true (1) if the |screen_info| structure has been",
                    "// modified.",
                    "//",
                    "// If the screen info rectangle is left NULL the rectangle from GetViewRect",
                    "// will be used. If the rectangle is still NULL or invalid popups may not be",
                    "// drawn correctly.",
                    "///"
                ],
                "decl": "int (*get_screen_info) (struct _cef_render_handler_t *, struct _cef_browser_t *, struct _cef_screen_info_t *)",
                "name": "get_screen_info",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when the browser wants to show or hide the popup widget. The popup",
                    "// should be shown if |show| is true (1) and hidden if |show| is false (0).",
                    "///"
                ],
                "decl": "void (*on_popup_show) (struct _cef_render_handler_t *, struct _cef_browser_t *, int)",
                "name": "on_popup_show",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_rect_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the browser wants to move or resize the popup widget. |rect|",
                    "// contains the new location and size in view coordinates.",
                    "///"
                ],
                "decl": "void (*on_popup_size) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_rect_t *)",
                "name": "on_popup_size",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_paint_element_type_t",
                    "size_t",
                    [
                        "const cef_rect_t"
                    ],
                    [
                        "const void"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when an element should be painted. Pixel values passed to this",
                    "// function are scaled relative to view coordinates based on the value of",
                    "// CefScreenInfo.device_scale_factor returned from GetScreenInfo. |type|",
                    "// indicates whether the element is the view or the popup widget. |buffer|",
                    "// contains the pixel data for the whole image. |dirtyRects| contains the set",
                    "// of rectangles in pixel coordinates that need to be repainted. |buffer| will",
                    "// be |width|*|height|*4 bytes in size and represents a BGRA image with an",
                    "// upper-left origin. This function is only called when",
                    "// cef_window_tInfo::shared_texture_enabled is set to false (0).",
                    "///"
                ],
                "decl": "void (*on_paint) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_paint_element_type_t, size_t, const cef_rect_t *, const void *, int, int)",
                "name": "on_paint",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_paint_element_type_t",
                    "size_t",
                    [
                        "const cef_rect_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when an element has been rendered to the shared texture handle.",
                    "// |type| indicates whether the element is the view or the popup widget.",
                    "// |dirtyRects| contains the set of rectangles in pixel coordinates that need",
                    "// to be repainted. |shared_handle| is the handle for a D3D11 Texture2D that",
                    "// can be accessed via ID3D11Device using the OpenSharedResource function.",
                    "// This function is only called when cef_window_tInfo::shared_texture_enabled",
                    "// is set to true (1), and is currently only supported on Windows.",
                    "///"
                ],
                "decl": "void (*on_accelerated_paint) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_paint_element_type_t, size_t, const cef_rect_t *, void *)",
                "name": "on_accelerated_paint",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_drag_data_t"
                    ],
                    "cef_drag_operations_mask_t",
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called when the user starts dragging content in the web view. Contextual",
                    "// information about the dragged content is supplied by |drag_data|. (|x|,",
                    "// |y|) is the drag start location in screen coordinates. OS APIs that run a",
                    "// system message loop may be used within the StartDragging call.",
                    "//",
                    "// Return false (0) to abort the drag operation. Don't call any of",
                    "// cef_browser_host_t::DragSource*Ended* functions after returning false (0).",
                    "//",
                    "// Return true (1) to handle the drag operation. Call",
                    "// cef_browser_host_t::DragSourceEndedAt and DragSourceSystemDragEnded either",
                    "// synchronously or asynchronously to inform the web view that the drag",
                    "// operation has ended.",
                    "///"
                ],
                "decl": "int (*start_dragging) (struct _cef_render_handler_t *, struct _cef_browser_t *, struct _cef_drag_data_t *, cef_drag_operations_mask_t, int, int)",
                "name": "start_dragging",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_drag_operations_mask_t"
                ],
                "comment": [
                    "///",
                    "// Called when the web view wants to update the mouse cursor during a drag &",
                    "// drop operation. |operation| describes the allowed operation (none, move,",
                    "// copy, link).",
                    "///"
                ],
                "decl": "void (*update_drag_cursor) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_drag_operations_mask_t)",
                "name": "update_drag_cursor",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "double",
                    "double"
                ],
                "comment": [
                    "///",
                    "// Called when the scroll offset has changed.",
                    "///"
                ],
                "decl": "void (*on_scroll_offset_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, double, double)",
                "name": "on_scroll_offset_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_range_t"
                    ],
                    "size_t",
                    [
                        "const cef_rect_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when the IME composition range has changed. |selected_range| is the",
                    "// range of characters that have been selected. |character_bounds| is the",
                    "// bounds of each character in view coordinates.",
                    "///"
                ],
                "decl": "void (*on_ime_composition_range_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_range_t *, size_t, const cef_rect_t *)",
                "name": "on_ime_composition_range_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_range_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when text selection has changed for the specified |browser|.",
                    "// |selected_text| is the currently selected text and |selected_range| is the",
                    "// character range.",
                    "///"
                ],
                "decl": "void (*on_text_selection_changed) (struct _cef_render_handler_t *, struct _cef_browser_t *, const cef_string_t *, const cef_range_t *)",
                "name": "on_text_selection_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_text_input_mode_t"
                ],
                "comment": [
                    "///",
                    "// Called when an on-screen keyboard should be shown or hidden for the",
                    "// specified |browser|. |input_mode| specifies what kind of keyboard should be",
                    "// opened. If |input_mode| is CEF_TEXT_INPUT_MODE_NONE, any existing keyboard",
                    "// for this browser should be hidden.",
                    "///"
                ],
                "decl": "void (*on_virtual_keyboard_requested) (struct _cef_render_handler_t *, struct _cef_browser_t *, cef_text_input_mode_t)",
                "name": "on_virtual_keyboard_requested",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_render_process_handler_t": {
        "comment": [
            "///",
            "// Structure used to implement render process callbacks. The functions of this",
            "// structure will be called on the render process main thread (TID_RENDERER)",
            "// unless otherwise indicated.",
            "///"
        ],
        "name": "cef_render_process_handler_t",
        "path": "include/capi/cef_render_process_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after WebKit has been initialized.",
                    "///"
                ],
                "decl": "void (*on_web_kit_initialized) (struct _cef_render_process_handler_t *)",
                "name": "on_web_kit_initialized",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called after a browser has been created. When browsing cross-origin a new",
                    "// browser will be created before the old browser with the same identifier is",
                    "// destroyed. |extra_info| is a read-only value originating from",
                    "// cef_browser_host_t::cef_browser_host_create_browser(),",
                    "// cef_browser_host_t::cef_browser_host_create_browser_sync(),",
                    "// cef_life_span_handler_t::on_before_popup() or",
                    "// cef_browser_view_t::cef_browser_view_create().",
                    "///"
                ],
                "decl": "void (*on_browser_created) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_dictionary_value_t *)",
                "name": "on_browser_created",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called before a browser is destroyed.",
                    "///"
                ],
                "decl": "void (*on_browser_destroyed) (struct _cef_render_process_handler_t *, struct _cef_browser_t *)",
                "name": "on_browser_destroyed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the handler for browser load status events.",
                    "///"
                ],
                "decl": "struct _cef_load_handler_t * (*get_load_handler) (struct _cef_render_process_handler_t *)",
                "name": "get_load_handler",
                "ret": [
                    "struct _cef_load_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called immediately after the V8 context for a frame has been created. To",
                    "// retrieve the JavaScript 'window' object use the",
                    "// cef_v8context_t::get_global() function. V8 handles can only be accessed",
                    "// from the thread on which they are created. A task runner for posting tasks",
                    "// on the associated thread can be retrieved via the",
                    "// cef_v8context_t::get_task_runner() function.",
                    "///"
                ],
                "decl": "void (*on_context_created) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *)",
                "name": "on_context_created",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called immediately before the V8 context for a frame is released. No",
                    "// references to the context should be kept after this function is called.",
                    "///"
                ],
                "decl": "void (*on_context_released) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *)",
                "name": "on_context_released",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_v8context_t"
                    ],
                    [
                        "struct _cef_v8exception_t"
                    ],
                    [
                        "struct _cef_v8stack_trace_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called for global uncaught exceptions in a frame. Execution of this",
                    "// callback is disabled by default. To enable set",
                    "// CefSettings.uncaught_exception_stack_size > 0.",
                    "///"
                ],
                "decl": "void (*on_uncaught_exception) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_v8context_t *, struct _cef_v8exception_t *, struct _cef_v8stack_trace_t *)",
                "name": "on_uncaught_exception",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_domnode_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a new node in the the browser gets focus. The |node| value may",
                    "// be NULL if no specific node has gained focus. The node object passed to",
                    "// this function represents a snapshot of the DOM at the time this function is",
                    "// executed. DOM objects are only valid for the scope of this function. Do not",
                    "// keep references to or attempt to access any DOM objects outside the scope",
                    "// of this function.",
                    "///"
                ],
                "decl": "void (*on_focused_node_changed) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_domnode_t *)",
                "name": "on_focused_node_changed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_render_process_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    "cef_process_id_t",
                    [
                        "struct _cef_process_message_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called when a new message is received from a different process. Return true",
                    "// (1) if the message was handled or false (0) otherwise. Do not keep a",
                    "// reference to or attempt to access the message outside of this callback.",
                    "///"
                ],
                "decl": "int (*on_process_message_received) (struct _cef_render_process_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, cef_process_id_t, struct _cef_process_message_t *)",
                "name": "on_process_message_received",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_request_callback_t": {
        "comment": [
            "///",
            "// Callback structure used for asynchronous continuation of url requests.",
            "///"
        ],
        "name": "cef_request_callback_t",
        "path": "include/capi/cef_request_callback_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_request_callback_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Continue the url request. If |allow| is true (1) the request will be",
                    "// continued. Otherwise, the request will be canceled.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_request_callback_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the url request.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_request_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_request_context_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to provide handler implementations. The handler",
            "// instance will not be released until all objects related to the context have",
            "// been destroyed.",
            "///"
        ],
        "name": "cef_request_context_handler_t",
        "path": "include/capi/cef_request_context_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_handler_t"
                    ],
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread immediately after the request",
                    "// context has been initialized.",
                    "///"
                ],
                "decl": "void (*on_request_context_initialized) (struct _cef_request_context_handler_t *, struct _cef_request_context_t *)",
                "name": "on_request_context_initialized",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_handler_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_web_plugin_info_t"
                    ],
                    [
                        "cef_plugin_policy_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on multiple browser process threads before a plugin instance is",
                    "// loaded. |mime_type| is the mime type of the plugin that will be loaded.",
                    "// |plugin_url| is the content URL that the plugin will load and may be NULL.",
                    "// |is_main_frame| will be true (1) if the plugin is being loaded in the main",
                    "// (top-level) frame, |top_origin_url| is the URL for the top-level frame that",
                    "// contains the plugin when loading a specific plugin instance or NULL when",
                    "// building the initial list of enabled plugins for 'navigator.plugins'",
                    "// JavaScript state. |plugin_info| includes additional information about the",
                    "// plugin that will be loaded. |plugin_policy| is the recommended policy.",
                    "// Modify |plugin_policy| and return true (1) to change the policy. Return",
                    "// false (0) to use the recommended policy. The default plugin policy can be",
                    "// set at runtime using the `--plugin-policy=[allow|detect|block]` command-",
                    "// line flag. Decisions to mark a plugin as disabled by setting",
                    "// |plugin_policy| to PLUGIN_POLICY_DISABLED may be cached when",
                    "// |top_origin_url| is NULL. To purge the plugin list cache and potentially",
                    "// trigger new calls to this function call",
                    "// cef_request_context_t::PurgePluginListCache.",
                    "///"
                ],
                "decl": "int (*on_before_plugin_load) (struct _cef_request_context_handler_t *, const cef_string_t *, const cef_string_t *, int, const cef_string_t *, struct _cef_web_plugin_info_t *, cef_plugin_policy_t *)",
                "name": "on_before_plugin_load",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process IO thread before a resource request is",
                    "// initiated. The |browser| and |frame| values represent the source of the",
                    "// request, and may be NULL for requests originating from service workers or",
                    "// cef_urlrequest_t. |request| represents the request contents and cannot be",
                    "// modified in this callback. |is_navigation| will be true (1) if the resource",
                    "// request is a navigation. |is_download| will be true (1) if the resource",
                    "// request is a download. |request_initiator| is the origin (scheme + domain)",
                    "// of the page that initiated the request. Set |disable_default_handling| to",
                    "// true (1) to disable default handling of the request, in which case it will",
                    "// need to be handled via cef_resource_request_handler_t::GetResourceHandler",
                    "// or it will be canceled. To allow the resource load to proceed with default",
                    "// handling return NULL. To specify a handler for the resource return a",
                    "// cef_resource_request_handler_t object. This function will not be called if",
                    "// the client associated with |browser| returns a non-NULL value from",
                    "// cef_request_handler_t::GetResourceRequestHandler for the same request",
                    "// (identified by cef_request_t::GetIdentifier).",
                    "///"
                ],
                "decl": "struct _cef_resource_request_handler_t * (*get_resource_request_handler) (struct _cef_request_context_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int, int, const cef_string_t *, int *)",
                "name": "get_resource_request_handler",
                "ret": [
                    "struct _cef_resource_request_handler_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_request_context_settings_t": {
        "comment": [
            "///",
            "// Request context initialization settings. Specify NULL or 0 to get the",
            "// recommended default values.",
            "///"
        ],
        "name": "cef_request_context_settings_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Size of this structure.",
                    "///"
                ],
                "name": "size",
                "type": "size_t"
            },
            {
                "comment": [
                    "///",
                    "// The location where cache data for this request context will be stored on",
                    "// disk. If this value is non-empty then it must be an absolute path that is",
                    "// either equal to or a child directory of CefSettings.root_cache_path. If",
                    "// this value is empty then browsers will be created in \"incognito mode\" where",
                    "// in-memory caches are used for storage and no data is persisted to disk.",
                    "// HTML5 databases such as localStorage will only persist across sessions if a",
                    "// cache path is specified. To share the global browser cache and related",
                    "// configuration set this value to match the CefSettings.cache_path value.",
                    "///"
                ],
                "name": "cache_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// To persist session cookies (cookies without an expiry date or validity",
                    "// interval) by default when using the global cookie manager set this value to",
                    "// true (1). Session cookies are generally intended to be transient and most",
                    "// Web browsers do not persist them. Can be set globally using the",
                    "// CefSettings.persist_session_cookies value. This value will be ignored if",
                    "// |cache_path| is empty or if it matches the CefSettings.cache_path value.",
                    "///"
                ],
                "name": "persist_session_cookies",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// To persist user preferences as a JSON file in the cache path directory set",
                    "// this value to true (1). Can be set globally using the",
                    "// CefSettings.persist_user_preferences value. This value will be ignored if",
                    "// |cache_path| is empty or if it matches the CefSettings.cache_path value.",
                    "///"
                ],
                "name": "persist_user_preferences",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to ignore errors related to invalid SSL certificates.",
                    "// Enabling this setting can lead to potential security vulnerabilities like",
                    "// \"man in the middle\" attacks. Applications that load content from the",
                    "// internet should not enable this setting. Can be set globally using the",
                    "// CefSettings.ignore_certificate_errors value. This value will be ignored if",
                    "// |cache_path| matches the CefSettings.cache_path value.",
                    "///"
                ],
                "name": "ignore_certificate_errors",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Comma delimited ordered list of language codes without any whitespace that",
                    "// will be used in the \"Accept-Language\" HTTP header. Can be set globally",
                    "// using the CefSettings.accept_language_list value or overridden on a per-",
                    "// browser basis using the CefBrowserSettings.accept_language_list value. If",
                    "// all values are empty then \"en-US,en\" will be used. This value will be",
                    "// ignored if |cache_path| matches the CefSettings.cache_path value.",
                    "///"
                ],
                "name": "accept_language_list",
                "type": "cef_string_t"
            }
        ]
    },
    "_cef_request_context_t": {
        "comment": [
            "///",
            "// A request context provides request handling for a set of related browser or",
            "// URL request objects. A request context can be specified when creating a new",
            "// browser via the cef_browser_host_t static factory functions or when creating",
            "// a new URL request via the cef_urlrequest_t static factory functions. Browser",
            "// objects with different request contexts will never be hosted in the same",
            "// render process. Browser objects with the same request context may or may not",
            "// be hosted in the same render process depending on the process model. Browser",
            "// objects created indirectly via the JavaScript window.open function or",
            "// targeted links will share the same render process and the same request",
            "// context as the source browser. When running in single-process mode there is",
            "// only a single render process (the main process) and so all browsers created",
            "// in single-process mode will share the same request context. This will be the",
            "// first request context passed into a cef_browser_host_t static factory",
            "// function and all other request context objects will be ignored.",
            "///"
        ],
        "name": "cef_request_context_t",
        "path": "include/capi/cef_request_context_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same context as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_request_context_t *, struct _cef_request_context_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is sharing the same storage as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_sharing_with) (struct _cef_request_context_t *, struct _cef_request_context_t *)",
                "name": "is_sharing_with",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is the global context. The global context",
                    "// is used by default when creating a browser or URL request with a NULL",
                    "// context argument.",
                    "///"
                ],
                "decl": "int (*is_global) (struct _cef_request_context_t *)",
                "name": "is_global",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the handler for this context if any.",
                    "///"
                ],
                "decl": "struct _cef_request_context_handler_t * (*get_handler) (struct _cef_request_context_t *)",
                "name": "get_handler",
                "ret": [
                    "struct _cef_request_context_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the cache path for this object. If NULL an \"incognito mode\" in-",
                    "// memory cache is being used.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_cache_path) (struct _cef_request_context_t *)",
                "name": "get_cache_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the cookie manager for this object. If |callback| is non-NULL it",
                    "// will be executed asnychronously on the IO thread after the manager's",
                    "// storage has been initialized.",
                    "///"
                ],
                "decl": "struct _cef_cookie_manager_t * (*get_cookie_manager) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "get_cookie_manager",
                "ret": [
                    "struct _cef_cookie_manager_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_scheme_handler_factory_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Register a scheme handler factory for the specified |scheme_name| and",
                    "// optional |domain_name|. An NULL |domain_name| value for a standard scheme",
                    "// will cause the factory to match all domain names. The |domain_name| value",
                    "// will be ignored for non-standard schemes. If |scheme_name| is a built-in",
                    "// scheme and no handler is returned by |factory| then the built-in scheme",
                    "// handler factory will be called. If |scheme_name| is a custom scheme then",
                    "// you must also implement the cef_app_t::on_register_custom_schemes()",
                    "// function in all processes. This function may be called multiple times to",
                    "// change or remove the factory that matches the specified |scheme_name| and",
                    "// optional |domain_name|. Returns false (0) if an error occurs. This function",
                    "// may be called on any thread in the browser process.",
                    "///"
                ],
                "decl": "int (*register_scheme_handler_factory) (struct _cef_request_context_t *, const cef_string_t *, const cef_string_t *, struct _cef_scheme_handler_factory_t *)",
                "name": "register_scheme_handler_factory",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clear all registered scheme handler factories. Returns false (0) on error.",
                    "// This function may be called on any thread in the browser process.",
                    "///"
                ],
                "decl": "int (*clear_scheme_handler_factories) (struct _cef_request_context_t *)",
                "name": "clear_scheme_handler_factories",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Tells all renderer processes associated with this context to throw away",
                    "// their plugin list cache. If |reload_pages| is true (1) they will also",
                    "// reload all pages with plugins.",
                    "// cef_request_context_handler_t::OnBeforePluginLoad may be called to rebuild",
                    "// the plugin list cache.",
                    "///"
                ],
                "decl": "void (*purge_plugin_list_cache) (struct _cef_request_context_t *, int)",
                "name": "purge_plugin_list_cache",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if a preference with the specified |name| exists. This",
                    "// function must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*has_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "has_preference",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value for the preference with the specified |name|. Returns",
                    "// NULL if the preference does not exist. The returned object contains a copy",
                    "// of the underlying preference value and modifications to the returned object",
                    "// will not modify the underlying preference value. This function must be",
                    "// called on the browser process UI thread.",
                    "///"
                ],
                "decl": "struct _cef_value_t * (*get_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "get_preference",
                "ret": [
                    "struct _cef_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns all preferences as a dictionary. If |include_defaults| is true (1)",
                    "// then preferences currently at their default value will be included. The",
                    "// returned object contains a copy of the underlying preference values and",
                    "// modifications to the returned object will not modify the underlying",
                    "// preference values. This function must be called on the browser process UI",
                    "// thread.",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_all_preferences) (struct _cef_request_context_t *, int)",
                "name": "get_all_preferences",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the preference with the specified |name| can be",
                    "// modified using SetPreference. As one example preferences set via the",
                    "// command-line usually cannot be modified. This function must be called on",
                    "// the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*can_set_preference) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "can_set_preference",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the |value| associated with preference |name|. Returns true (1) if the",
                    "// value is set successfully and false (0) otherwise. If |value| is NULL the",
                    "// preference will be restored to its default value. If setting the preference",
                    "// fails then |error| will be populated with a detailed description of the",
                    "// problem. This function must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*set_preference) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_value_t *, cef_string_t *)",
                "name": "set_preference",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clears all certificate exceptions that were added as part of handling",
                    "// cef_request_handler_t::on_certificate_error(). If you call this it is",
                    "// recommended that you also call close_all_connections() or you risk not",
                    "// being prompted again for server certificates if you reconnect quickly. If",
                    "// |callback| is non-NULL it will be executed on the UI thread after",
                    "// completion.",
                    "///"
                ],
                "decl": "void (*clear_certificate_exceptions) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "clear_certificate_exceptions",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clears all HTTP authentication credentials that were added as part of",
                    "// handling GetAuthCredentials. If |callback| is non-NULL it will be executed",
                    "// on the UI thread after completion.",
                    "///"
                ],
                "decl": "void (*clear_http_auth_credentials) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "clear_http_auth_credentials",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "struct _cef_completion_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clears all active and idle connections that Chromium currently has. This is",
                    "// only recommended if you have released all other CEF objects but don't yet",
                    "// want to call cef_shutdown(). If |callback| is non-NULL it will be executed",
                    "// on the UI thread after completion.",
                    "///"
                ],
                "decl": "void (*close_all_connections) (struct _cef_request_context_t *, struct _cef_completion_callback_t *)",
                "name": "close_all_connections",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_resolve_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Attempts to resolve |origin| to a list of associated IP addresses.",
                    "// |callback| will be executed on the UI thread after completion.",
                    "///"
                ],
                "decl": "void (*resolve_host) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_resolve_callback_t *)",
                "name": "resolve_host",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ],
                    [
                        "struct _cef_extension_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Load an extension.",
                    "//",
                    "// If extension resources will be read from disk using the default load",
                    "// implementation then |root_directory| should be the absolute path to the",
                    "// extension resources directory and |manifest| should be NULL. If extension",
                    "// resources will be provided by the client (e.g. via cef_request_handler_t",
                    "// and/or cef_extension_handler_t) then |root_directory| should be a path",
                    "// component unique to the extension (if not absolute this will be internally",
                    "// prefixed with the PK_DIR_RESOURCES path) and |manifest| should contain the",
                    "// contents that would otherwise be read from the \"manifest.json\" file on",
                    "// disk.",
                    "//",
                    "// The loaded extension will be accessible in all contexts sharing the same",
                    "// storage (HasExtension returns true (1)). However, only the context on which",
                    "// this function was called is considered the loader (DidLoadExtension returns",
                    "// true (1)) and only the loader will receive cef_request_context_handler_t",
                    "// callbacks for the extension.",
                    "//",
                    "// cef_extension_handler_t::OnExtensionLoaded will be called on load success",
                    "// or cef_extension_handler_t::OnExtensionLoadFailed will be called on load",
                    "// failure.",
                    "//",
                    "// If the extension specifies a background script via the \"background\"",
                    "// manifest key then cef_extension_handler_t::OnBeforeBackgroundBrowser will",
                    "// be called to create the background browser. See that function for",
                    "// additional information about background scripts.",
                    "//",
                    "// For visible extension views the client application should evaluate the",
                    "// manifest to determine the correct extension URL to load and then pass that",
                    "// URL to the cef_browser_host_t::CreateBrowser* function after the extension",
                    "// has loaded. For example, the client can look for the \"browser_action\"",
                    "// manifest key as documented at",
                    "// https://developer.chrome.com/extensions/browserAction. Extension URLs take",
                    "// the form \"chrome-extension://<extension_id>/<path>\".",
                    "//",
                    "// Browsers that host extensions differ from normal browsers as follows:",
                    "//  - Can access chrome.* JavaScript APIs if allowed by the manifest. Visit",
                    "//    chrome://extensions-support for the list of extension APIs currently",
                    "//    supported by CEF.",
                    "//  - Main frame navigation to non-extension content is blocked.",
                    "//  - Pinch-zooming is disabled.",
                    "//  - CefBrowserHost::GetExtension returns the hosted extension.",
                    "//  - CefBrowserHost::IsBackgroundHost returns true for background hosts.",
                    "//",
                    "// See https://developer.chrome.com/extensions for extension implementation",
                    "// and usage documentation.",
                    "///"
                ],
                "decl": "void (*load_extension) (struct _cef_request_context_t *, const cef_string_t *, struct _cef_dictionary_value_t *, struct _cef_extension_handler_t *)",
                "name": "load_extension",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this context was used to load the extension identified",
                    "// by |extension_id|. Other contexts sharing the same storage will also have",
                    "// access to the extension (see HasExtension). This function must be called on",
                    "// the browser process UI thread.",
                    "///"
                ],
                "decl": "int (*did_load_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "did_load_extension",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this context has access to the extension identified by",
                    "// |extension_id|. This may not be the context that was used to load the",
                    "// extension (see DidLoadExtension). This function must be called on the",
                    "// browser process UI thread.",
                    "///"
                ],
                "decl": "int (*has_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "has_extension",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of all extensions that this context has access to (see",
                    "// HasExtension). |extension_ids| will be populated with the list of extension",
                    "// ID values. Returns true (1) on success. This function must be called on the",
                    "// browser process UI thread.",
                    "///"
                ],
                "decl": "int (*get_extensions) (struct _cef_request_context_t *, cef_string_list_t)",
                "name": "get_extensions",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the extension matching |extension_id| or NULL if no matching",
                    "// extension is accessible in this context (see HasExtension). This function",
                    "// must be called on the browser process UI thread.",
                    "///"
                ],
                "decl": "struct _cef_extension_t * (*get_extension) (struct _cef_request_context_t *, const cef_string_t *)",
                "name": "get_extension",
                "ret": [
                    "struct _cef_extension_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the MediaRouter object associated with this context.",
                    "///"
                ],
                "decl": "struct _cef_media_router_t * (*get_media_router) (struct _cef_request_context_t *)",
                "name": "get_media_router",
                "ret": [
                    "struct _cef_media_router_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_request_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser requests. The",
            "// functions of this structure will be called on the thread indicated.",
            "///"
        ],
        "name": "cef_request_handler_t",
        "path": "include/capi/cef_request_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread before browser navigation. Return true (1) to",
                    "// cancel the navigation or false (0) to allow the navigation to proceed. The",
                    "// |request| object cannot be modified in this callback.",
                    "// cef_load_handler_t::OnLoadingStateChange will be called twice in all cases.",
                    "// If the navigation is allowed cef_load_handler_t::OnLoadStart and",
                    "// cef_load_handler_t::OnLoadEnd will be called. If the navigation is canceled",
                    "// cef_load_handler_t::OnLoadError will be called with an |errorCode| value of",
                    "// ERR_ABORTED. The |user_gesture| value will be true (1) if the browser",
                    "// navigated via explicit user gesture (e.g. clicking a link) or false (0) if",
                    "// it navigated automatically (e.g. via the DomContentLoaded event).",
                    "///"
                ],
                "decl": "int (*on_before_browse) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int, int)",
                "name": "on_before_browse",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_window_open_disposition_t",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread before OnBeforeBrowse in certain limited cases",
                    "// where navigating a new or different browser might be desirable. This",
                    "// includes user-initiated navigation that might open in a special way (e.g.",
                    "// links clicked via middle-click or ctrl + left-click) and certain types of",
                    "// cross-origin navigation initiated from the renderer process (e.g.",
                    "// navigating the top-level frame to/from a file URL). The |browser| and",
                    "// |frame| values represent the source of the navigation. The",
                    "// |target_disposition| value indicates where the user intended to navigate",
                    "// the browser based on standard Chromium behaviors (e.g. current tab, new",
                    "// tab, etc). The |user_gesture| value will be true (1) if the browser",
                    "// navigated via explicit user gesture (e.g. clicking a link) or false (0) if",
                    "// it navigated automatically (e.g. via the DomContentLoaded event). Return",
                    "// true (1) to cancel the navigation or false (0) to allow the navigation to",
                    "// proceed in the source browser's top-level frame.",
                    "///"
                ],
                "decl": "int (*on_open_urlfrom_tab) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, cef_window_open_disposition_t, int)",
                "name": "on_open_urlfrom_tab",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    "int",
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process IO thread before a resource request is",
                    "// initiated. The |browser| and |frame| values represent the source of the",
                    "// request. |request| represents the request contents and cannot be modified",
                    "// in this callback. |is_navigation| will be true (1) if the resource request",
                    "// is a navigation. |is_download| will be true (1) if the resource request is",
                    "// a download. |request_initiator| is the origin (scheme + domain) of the page",
                    "// that initiated the request. Set |disable_default_handling| to true (1) to",
                    "// disable default handling of the request, in which case it will need to be",
                    "// handled via cef_resource_request_handler_t::GetResourceHandler or it will",
                    "// be canceled. To allow the resource load to proceed with default handling",
                    "// return NULL. To specify a handler for the resource return a",
                    "// cef_resource_request_handler_t object. If this callback returns NULL the",
                    "// same function will be called on the associated",
                    "// cef_request_context_handler_t, if any.",
                    "///"
                ],
                "decl": "struct _cef_resource_request_handler_t * (*get_resource_request_handler) (struct _cef_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int, int, const cef_string_t *, int *)",
                "name": "get_resource_request_handler",
                "ret": [
                    "struct _cef_resource_request_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_auth_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when the browser needs credentials from the user.",
                    "// |origin_url| is the origin making this authentication request. |isProxy|",
                    "// indicates whether the host is a proxy server. |host| contains the hostname",
                    "// and |port| contains the port number. |realm| is the realm of the challenge",
                    "// and may be NULL. |scheme| is the authentication scheme used, such as",
                    "// \"basic\" or \"digest\", and will be NULL if the source of the request is an",
                    "// FTP server. Return true (1) to continue the request and call",
                    "// cef_auth_callback_t::cont() either in this function or at a later time when",
                    "// the authentication information is available. Return false (0) to cancel the",
                    "// request immediately.",
                    "///"
                ],
                "decl": "int (*get_auth_credentials) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *, int, const cef_string_t *, int, const cef_string_t *, const cef_string_t *, struct _cef_auth_callback_t *)",
                "name": "get_auth_credentials",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int64",
                    [
                        "struct _cef_request_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when JavaScript requests a specific storage quota",
                    "// size via the webkitStorageInfo.requestQuota function. |origin_url| is the",
                    "// origin of the page making the request. |new_size| is the requested quota",
                    "// size in bytes. Return true (1) to continue the request and call",
                    "// cef_request_callback_t::cont() either in this function or at a later time",
                    "// to grant or deny the request. Return false (0) to cancel the request",
                    "// immediately.",
                    "///"
                ],
                "decl": "int (*on_quota_request) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *, int64, struct _cef_request_callback_t *)",
                "name": "on_quota_request",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_errorcode_t",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_sslinfo_t"
                    ],
                    [
                        "struct _cef_request_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread to handle requests for URLs with an invalid SSL",
                    "// certificate. Return true (1) and call cef_request_callback_t::cont() either",
                    "// in this function or at a later time to continue or cancel the request.",
                    "// Return false (0) to cancel the request immediately. If",
                    "// CefSettings.ignore_certificate_errors is set all invalid certificates will",
                    "// be accepted without calling this function.",
                    "///"
                ],
                "decl": "int (*on_certificate_error) (struct _cef_request_handler_t *, struct _cef_browser_t *, cef_errorcode_t, const cef_string_t *, struct _cef_sslinfo_t *, struct _cef_request_callback_t *)",
                "name": "on_certificate_error",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    "size_t",
                    [
                        [
                            "struct _cef_x509certificate_t"
                        ]
                    ],
                    [
                        "struct _cef_select_client_certificate_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread when a client certificate is being requested for",
                    "// authentication. Return false (0) to use the default behavior and",
                    "// automatically select the first certificate available. Return true (1) and",
                    "// call cef_select_client_certificate_callback_t::Select either in this",
                    "// function or at a later time to select a certificate. Do not call Select or",
                    "// call it with NULL to continue without using any certificate. |isProxy|",
                    "// indicates whether the host is an HTTPS proxy or the origin server. |host|",
                    "// and |port| contains the hostname and port of the SSL server. |certificates|",
                    "// is the list of certificates to choose from; this list has already been",
                    "// pruned by Chromium so that it only contains certificates from issuers that",
                    "// the server trusts.",
                    "///"
                ],
                "decl": "int (*on_select_client_certificate) (struct _cef_request_handler_t *, struct _cef_browser_t *, int, const cef_string_t *, int, size_t, struct _cef_x509certificate_t *const *, struct _cef_select_client_certificate_callback_t *)",
                "name": "on_select_client_certificate",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread when a plugin has crashed.",
                    "// |plugin_path| is the path of the plugin that crashed.",
                    "///"
                ],
                "decl": "void (*on_plugin_crashed) (struct _cef_request_handler_t *, struct _cef_browser_t *, const cef_string_t *)",
                "name": "on_plugin_crashed",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread when the render view associated",
                    "// with |browser| is ready to receive/handle IPC messages in the render",
                    "// process.",
                    "///"
                ],
                "decl": "void (*on_render_view_ready) (struct _cef_request_handler_t *, struct _cef_browser_t *)",
                "name": "on_render_view_ready",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    "cef_termination_status_t"
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread when the render process terminates",
                    "// unexpectedly. |status| indicates how the process terminated.",
                    "///"
                ],
                "decl": "void (*on_render_process_terminated) (struct _cef_request_handler_t *, struct _cef_browser_t *, cef_termination_status_t)",
                "name": "on_render_process_terminated",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the browser process UI thread when the window.document object of",
                    "// the main frame has been created.",
                    "///"
                ],
                "decl": "void (*on_document_available_in_main_frame) (struct _cef_request_handler_t *, struct _cef_browser_t *)",
                "name": "on_document_available_in_main_frame",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_request_t": {
        "comment": [
            "///",
            "// Structure used to represent a web request. The functions of this structure",
            "// may be called on any thread.",
            "///"
        ],
        "name": "cef_request_t",
        "path": "include/capi/cef_request_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is read-only.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_request_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the fully qualified URL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_request_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the fully qualified URL.",
                    "///"
                ],
                "decl": "void (*set_url) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_url",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the request function type. The value will default to POST if post data",
                    "// is provided and GET otherwise.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_method) (struct _cef_request_t *)",
                "name": "get_method",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the request function type.",
                    "///"
                ],
                "decl": "void (*set_method) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_method",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_referrer_policy_t"
                ],
                "comment": [
                    "///",
                    "// Set the referrer URL and policy. If non-NULL the referrer URL must be fully",
                    "// qualified with an HTTP or HTTPS scheme component. Any username, password or",
                    "// ref component will be removed.",
                    "///"
                ],
                "decl": "void (*set_referrer) (struct _cef_request_t *, const cef_string_t *, cef_referrer_policy_t)",
                "name": "set_referrer",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the referrer URL.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_referrer_url) (struct _cef_request_t *)",
                "name": "get_referrer_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the referrer policy.",
                    "///"
                ],
                "decl": "cef_referrer_policy_t (*get_referrer_policy) (struct _cef_request_t *)",
                "name": "get_referrer_policy",
                "ret": "cef_referrer_policy_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the post data.",
                    "///"
                ],
                "decl": "struct _cef_post_data_t * (*get_post_data) (struct _cef_request_t *)",
                "name": "get_post_data",
                "ret": [
                    "struct _cef_post_data_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_post_data_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the post data.",
                    "///"
                ],
                "decl": "void (*set_post_data) (struct _cef_request_t *, struct _cef_post_data_t *)",
                "name": "set_post_data",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "comment": [
                    "///",
                    "// Get the header values. Will not include the Referer value if any.",
                    "///"
                ],
                "decl": "void (*get_header_map) (struct _cef_request_t *, cef_string_multimap_t)",
                "name": "get_header_map",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "comment": [
                    "///",
                    "// Set the header values. If a Referer value exists in the header map it will",
                    "// be removed and ignored.",
                    "///"
                ],
                "decl": "void (*set_header_map) (struct _cef_request_t *, cef_string_multimap_t)",
                "name": "set_header_map",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the first header value for |name| or an NULL string if not found.",
                    "// Will not return the Referer value if any. Use GetHeaderMap instead if",
                    "// |name| might have multiple values.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_header_by_name) (struct _cef_request_t *, const cef_string_t *)",
                "name": "get_header_by_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the header |name| to |value|. If |overwrite| is true (1) any existing",
                    "// values will be replaced with the new value. If |overwrite| is false (0) any",
                    "// existing values will not be overwritten. The Referer value cannot be set",
                    "// using this function.",
                    "///"
                ],
                "decl": "void (*set_header_by_name) (struct _cef_request_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "set_header_by_name",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_post_data_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "comment": [
                    "///",
                    "// Set all values at one time.",
                    "///"
                ],
                "decl": "void (*set) (struct _cef_request_t *, const cef_string_t *, const cef_string_t *, struct _cef_post_data_t *, cef_string_multimap_t)",
                "name": "set",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the flags used in combination with cef_urlrequest_t. See",
                    "// cef_urlrequest_flags_t for supported values.",
                    "///"
                ],
                "decl": "int (*get_flags) (struct _cef_request_t *)",
                "name": "get_flags",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the flags used in combination with cef_urlrequest_t.  See",
                    "// cef_urlrequest_flags_t for supported values.",
                    "///"
                ],
                "decl": "void (*set_flags) (struct _cef_request_t *, int)",
                "name": "set_flags",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the URL to the first party for cookies used in combination with",
                    "// cef_urlrequest_t.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_first_party_for_cookies) (struct _cef_request_t *)",
                "name": "get_first_party_for_cookies",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the URL to the first party for cookies used in combination with",
                    "// cef_urlrequest_t.",
                    "///"
                ],
                "decl": "void (*set_first_party_for_cookies) (struct _cef_request_t *, const cef_string_t *)",
                "name": "set_first_party_for_cookies",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the resource type for this request. Only available in the browser",
                    "// process.",
                    "///"
                ],
                "decl": "cef_resource_type_t (*get_resource_type) (struct _cef_request_t *)",
                "name": "get_resource_type",
                "ret": "cef_resource_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the transition type for this request. Only available in the browser",
                    "// process and only applies to requests that represent a main frame or sub-",
                    "// frame navigation.",
                    "///"
                ],
                "decl": "cef_transition_type_t (*get_transition_type) (struct _cef_request_t *)",
                "name": "get_transition_type",
                "ret": "cef_transition_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the globally unique identifier for this request or 0 if not",
                    "// specified. Can be used by cef_resource_request_handler_t implementations in",
                    "// the browser process to track a single request across multiple callbacks.",
                    "///"
                ],
                "decl": "uint64 (*get_identifier) (struct _cef_request_t *)",
                "name": "get_identifier",
                "ret": "uint64",
                "type": "fptr"
            }
        ]
    },
    "_cef_resolve_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_request_context_t::ResolveHost.",
            "///"
        ],
        "name": "cef_resolve_callback_t",
        "path": "include/capi/cef_request_context_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resolve_callback_t"
                    ],
                    "cef_errorcode_t",
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Called on the UI thread after the ResolveHost request has completed.",
                    "// |result| will be the result code. |resolved_ips| will be the list of",
                    "// resolved IP addresses or NULL if the resolution failed.",
                    "///"
                ],
                "decl": "void (*on_resolve_completed) (struct _cef_resolve_callback_t *, cef_errorcode_t, cef_string_list_t)",
                "name": "on_resolve_completed",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_resource_bundle_handler_t": {
        "comment": [
            "///",
            "// Structure used to implement a custom resource bundle structure. See",
            "// CefSettings for additional options related to resource bundle loading. The",
            "// functions of this structure may be called on multiple threads.",
            "///"
        ],
        "name": "cef_resource_bundle_handler_t",
        "path": "include/capi/cef_resource_bundle_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_bundle_handler_t"
                    ],
                    "int",
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve a localized translation for the specified |string_id|.",
                    "// To provide the translation set |string| to the translation string and",
                    "// return true (1). To use the default translation return false (0). Include",
                    "// cef_pack_strings.h for a listing of valid string ID values.",
                    "///"
                ],
                "decl": "int (*get_localized_string) (struct _cef_resource_bundle_handler_t *, int, cef_string_t *)",
                "name": "get_localized_string",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_bundle_handler_t"
                    ],
                    "int",
                    [
                        [
                            "void"
                        ]
                    ],
                    [
                        "size_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve data for the specified scale independent |resource_id|.",
                    "// To provide the resource data set |data| and |data_size| to the data pointer",
                    "// and size respectively and return true (1). To use the default resource data",
                    "// return false (0). The resource data will not be copied and must remain",
                    "// resident in memory. Include cef_pack_resources.h for a listing of valid",
                    "// resource ID values.",
                    "///"
                ],
                "decl": "int (*get_data_resource) (struct _cef_resource_bundle_handler_t *, int, void **, size_t *)",
                "name": "get_data_resource",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_bundle_handler_t"
                    ],
                    "int",
                    "cef_scale_factor_t",
                    [
                        [
                            "void"
                        ]
                    ],
                    [
                        "size_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to retrieve data for the specified |resource_id| nearest the scale",
                    "// factor |scale_factor|. To provide the resource data set |data| and",
                    "// |data_size| to the data pointer and size respectively and return true (1).",
                    "// To use the default resource data return false (0). The resource data will",
                    "// not be copied and must remain resident in memory. Include",
                    "// cef_pack_resources.h for a listing of valid resource ID values.",
                    "///"
                ],
                "decl": "int (*get_data_resource_for_scale) (struct _cef_resource_bundle_handler_t *, int, cef_scale_factor_t, void **, size_t *)",
                "name": "get_data_resource_for_scale",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_resource_handler_t": {
        "comment": [
            "///",
            "// Structure used to implement a custom request handler structure. The functions",
            "// of this structure will be called on the IO thread unless otherwise indicated.",
            "///"
        ],
        "name": "cef_resource_handler_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "int"
                    ],
                    [
                        "struct _cef_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Open the response stream. To handle the request immediately set",
                    "// |handle_request| to true (1) and return true (1). To decide at a later time",
                    "// set |handle_request| to false (0), return true (1), and execute |callback|",
                    "// to continue or cancel the request. To cancel the request immediately set",
                    "// |handle_request| to true (1) and return false (0). This function will be",
                    "// called in sequence but not from a dedicated thread. For backwards",
                    "// compatibility set |handle_request| to false (0) and return false (0) and",
                    "// the ProcessRequest function will be called.",
                    "///"
                ],
                "decl": "int (*open) (struct _cef_resource_handler_t *, struct _cef_request_t *, int *, struct _cef_callback_t *)",
                "name": "open",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Begin processing the request. To handle the request return true (1) and",
                    "// call cef_callback_t::cont() once the response header information is",
                    "// available (cef_callback_t::cont() can also be called from inside this",
                    "// function if header information is available immediately). To cancel the",
                    "// request return false (0).",
                    "//",
                    "// WARNING: This function is deprecated. Use Open instead.",
                    "///"
                ],
                "decl": "int (*process_request) (struct _cef_resource_handler_t *, struct _cef_request_t *, struct _cef_callback_t *)",
                "name": "process_request",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "int64"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Retrieve response header information. If the response length is not known",
                    "// set |response_length| to -1 and read_response() will be called until it",
                    "// returns false (0). If the response length is known set |response_length| to",
                    "// a positive value and read_response() will be called until it returns false",
                    "// (0) or the specified number of bytes have been read. Use the |response|",
                    "// object to set the mime type, http status code and other optional header",
                    "// values. To redirect the request to a new URL set |redirectUrl| to the new",
                    "// URL. |redirectUrl| can be either a relative or fully qualified URL. It is",
                    "// also possible to set |response| to a redirect http status code and pass the",
                    "// new URL via a Location header. Likewise with |redirectUrl| it is valid to",
                    "// set a relative or fully qualified URL as the Location header value. If an",
                    "// error occured while setting up the request you can call set_error() on",
                    "// |response| to indicate the error condition.",
                    "///"
                ],
                "decl": "void (*get_response_headers) (struct _cef_resource_handler_t *, struct _cef_response_t *, int64 *, cef_string_t *)",
                "name": "get_response_headers",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    "int64",
                    [
                        "int64"
                    ],
                    [
                        "struct _cef_resource_skip_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Skip response data when requested by a Range header. Skip over and discard",
                    "// |bytes_to_skip| bytes of response data. If data is available immediately",
                    "// set |bytes_skipped| to the number of bytes skipped and return true (1). To",
                    "// read the data at a later time set |bytes_skipped| to 0, return true (1) and",
                    "// execute |callback| when the data is available. To indicate failure set",
                    "// |bytes_skipped| to < 0 (e.g. -2 for ERR_FAILED) and return false (0). This",
                    "// function will be called in sequence but not from a dedicated thread.",
                    "///"
                ],
                "decl": "int (*skip) (struct _cef_resource_handler_t *, int64, int64 *, struct _cef_resource_skip_callback_t *)",
                "name": "skip",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "struct _cef_resource_read_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Read response data. If data is available immediately copy up to",
                    "// |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of",
                    "// bytes copied, and return true (1). To read the data at a later time keep a",
                    "// pointer to |data_out|, set |bytes_read| to 0, return true (1) and execute",
                    "// |callback| when the data is available (|data_out| will remain valid until",
                    "// the callback is executed). To indicate response completion set |bytes_read|",
                    "// to 0 and return false (0). To indicate failure set |bytes_read| to < 0",
                    "// (e.g. -2 for ERR_FAILED) and return false (0). This function will be called",
                    "// in sequence but not from a dedicated thread. For backwards compatibility",
                    "// set |bytes_read| to -1 and return false (0) and the ReadResponse function",
                    "// will be called.",
                    "///"
                ],
                "decl": "int (*read) (struct _cef_resource_handler_t *, void *, int, int *, struct _cef_resource_read_callback_t *)",
                "name": "read",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ],
                    [
                        "void"
                    ],
                    "int",
                    [
                        "int"
                    ],
                    [
                        "struct _cef_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Read response data. If data is available immediately copy up to",
                    "// |bytes_to_read| bytes into |data_out|, set |bytes_read| to the number of",
                    "// bytes copied, and return true (1). To read the data at a later time set",
                    "// |bytes_read| to 0, return true (1) and call cef_callback_t::cont() when the",
                    "// data is available. To indicate response completion return false (0).",
                    "//",
                    "// WARNING: This function is deprecated. Use Skip and Read instead.",
                    "///"
                ],
                "decl": "int (*read_response) (struct _cef_resource_handler_t *, void *, int, int *, struct _cef_callback_t *)",
                "name": "read_response",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Request processing has been canceled.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_resource_handler_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_resource_read_callback_t": {
        "comment": [
            "///",
            "// Callback for asynchronous continuation of cef_resource_handler_t::read().",
            "///"
        ],
        "name": "cef_resource_read_callback_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_read_callback_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Callback for asynchronous continuation of read(). If |bytes_read| == 0 the",
                    "// response will be considered complete. If |bytes_read| > 0 then read() will",
                    "// be called again until the request is complete (based on either the result",
                    "// or the expected content length). If |bytes_read| < 0 then the request will",
                    "// fail and the |bytes_read| value will be treated as the error code.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_resource_read_callback_t *, int)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_resource_request_handler_t": {
        "comment": [
            "///",
            "// Implement this structure to handle events related to browser requests. The",
            "// functions of this structure will be called on the IO thread unless otherwise",
            "// indicated.",
            "///"
        ],
        "name": "cef_resource_request_handler_t",
        "path": "include/capi/cef_resource_request_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread before a resource request is loaded. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. To",
                    "// optionally filter cookies for the request return a",
                    "// cef_cookie_access_filter_t object. The |request| object cannot not be",
                    "// modified in this callback.",
                    "///"
                ],
                "decl": "struct _cef_cookie_access_filter_t * (*get_cookie_access_filter) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "get_cookie_access_filter",
                "ret": [
                    "struct _cef_cookie_access_filter_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_request_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread before a resource request is loaded. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. To redirect",
                    "// or change the resource load optionally modify |request|. Modification of",
                    "// the request URL will be treated as a redirect. Return RV_CONTINUE to",
                    "// continue the request immediately. Return RV_CONTINUE_ASYNC and call",
                    "// cef_request_callback_t:: cont() at a later time to continue or cancel the",
                    "// request asynchronously. Return RV_CANCEL to cancel the request immediately.",
                    "//",
                    "///"
                ],
                "decl": "cef_return_value_t (*on_before_resource_load) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_request_callback_t *)",
                "name": "on_before_resource_load",
                "ret": "cef_return_value_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread before a resource is loaded. The |browser| and",
                    "// |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. To allow the",
                    "// resource to load using the default network loader return NULL. To specify a",
                    "// handler for the resource return a cef_resource_handler_t object. The",
                    "// |request| object cannot not be modified in this callback.",
                    "///"
                ],
                "decl": "struct _cef_resource_handler_t * (*get_resource_handler) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *)",
                "name": "get_resource_handler",
                "ret": [
                    "struct _cef_resource_handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when a resource load is redirected. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. The",
                    "// |request| parameter will contain the old URL and other request-related",
                    "// information. The |response| parameter will contain the response that",
                    "// resulted in the redirect. The |new_url| parameter will contain the new URL",
                    "// and can be changed if desired. The |request| and |response| objects cannot",
                    "// be modified in this callback.",
                    "///"
                ],
                "decl": "void (*on_resource_redirect) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, cef_string_t *)",
                "name": "on_resource_redirect",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when a resource response is received. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. To allow the",
                    "// resource load to proceed without modification return false (0). To redirect",
                    "// or retry the resource load optionally modify |request| and return true (1).",
                    "// Modification of the request URL will be treated as a redirect. Requests",
                    "// handled using the default network loader cannot be redirected in this",
                    "// callback. The |response| object cannot be modified in this callback.",
                    "//",
                    "// WARNING: Redirecting using this function is deprecated. Use",
                    "// OnBeforeResourceLoad or GetResourceHandler to perform redirects.",
                    "///"
                ],
                "decl": "int (*on_resource_response) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *)",
                "name": "on_resource_response",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread to optionally filter resource response content. The",
                    "// |browser| and |frame| values represent the source of the request, and may",
                    "// be NULL for requests originating from service workers or cef_urlrequest_t.",
                    "// |request| and |response| represent the request and response respectively",
                    "// and cannot be modified in this callback.",
                    "///"
                ],
                "decl": "struct _cef_response_filter_t * (*get_resource_response_filter) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *)",
                "name": "get_resource_response_filter",
                "ret": [
                    "struct _cef_response_filter_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "struct _cef_response_t"
                    ],
                    "cef_urlrequest_status_t",
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when a resource load has completed. The |browser|",
                    "// and |frame| values represent the source of the request, and may be NULL for",
                    "// requests originating from service workers or cef_urlrequest_t. |request|",
                    "// and |response| represent the request and response respectively and cannot",
                    "// be modified in this callback. |status| indicates the load completion",
                    "// status. |received_content_length| is the number of response bytes actually",
                    "// read. This function will be called for all requests, including requests",
                    "// that are aborted due to CEF shutdown or destruction of the associated",
                    "// browser. In cases where the associated browser is destroyed this callback",
                    "// may arrive after the cef_life_span_handler_t::OnBeforeClose callback for",
                    "// that browser. The cef_frame_t::IsValid function can be used to test for",
                    "// this situation, and care should be taken not to call |browser| or |frame|",
                    "// functions that modify state (like LoadURL, SendProcessMessage, etc.) if the",
                    "// frame is invalid.",
                    "///"
                ],
                "decl": "void (*on_resource_load_complete) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, struct _cef_response_t *, cef_urlrequest_status_t, int64)",
                "name": "on_resource_load_complete",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_request_handler_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ],
                    [
                        "int"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread to handle requests for URLs with an unknown",
                    "// protocol component. The |browser| and |frame| values represent the source",
                    "// of the request, and may be NULL for requests originating from service",
                    "// workers or cef_urlrequest_t. |request| cannot be modified in this callback.",
                    "// Set |allow_os_execution| to true (1) to attempt execution via the",
                    "// registered OS protocol handler, if any. SECURITY WARNING: YOU SHOULD USE",
                    "// THIS METHOD TO ENFORCE RESTRICTIONS BASED ON SCHEME, HOST OR OTHER URL",
                    "// ANALYSIS BEFORE ALLOWING OS EXECUTION.",
                    "///"
                ],
                "decl": "void (*on_protocol_execution) (struct _cef_resource_request_handler_t *, struct _cef_browser_t *, struct _cef_frame_t *, struct _cef_request_t *, int *)",
                "name": "on_protocol_execution",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_resource_skip_callback_t": {
        "comment": [
            "///",
            "// Callback for asynchronous continuation of cef_resource_handler_t::skip().",
            "///"
        ],
        "name": "cef_resource_skip_callback_t",
        "path": "include/capi/cef_resource_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_resource_skip_callback_t"
                    ],
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Callback for asynchronous continuation of skip(). If |bytes_skipped| > 0",
                    "// then either skip() will be called again until the requested number of bytes",
                    "// have been skipped or the request will proceed. If |bytes_skipped| <= 0 the",
                    "// request will fail with ERR_REQUEST_RANGE_NOT_SATISFIABLE.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_resource_skip_callback_t *, int64)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_response_filter_t": {
        "comment": [
            "///",
            "// Implement this structure to filter resource response content. The functions",
            "// of this structure will be called on the browser process IO thread.",
            "///"
        ],
        "name": "cef_response_filter_t",
        "path": "include/capi/cef_response_filter_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_response_filter_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Initialize the response filter. Will only be called a single time. The",
                    "// filter will not be installed if this function returns false (0).",
                    "///"
                ],
                "decl": "int (*init_filter) (struct _cef_response_filter_t *)",
                "name": "init_filter",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_filter_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    [
                        "size_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    [
                        "size_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to filter a chunk of data. Expected usage is as follows:",
                    "//",
                    "//  A. Read input data from |data_in| and set |data_in_read| to the number of",
                    "//     bytes that were read up to a maximum of |data_in_size|. |data_in| will",
                    "//     be NULL if |data_in_size| is zero.",
                    "//  B. Write filtered output data to |data_out| and set |data_out_written| to",
                    "//     the number of bytes that were written up to a maximum of",
                    "//     |data_out_size|. If no output data was written then all data must be",
                    "//     read from |data_in| (user must set |data_in_read| = |data_in_size|).",
                    "//  C. Return RESPONSE_FILTER_DONE if all output data was written or",
                    "//     RESPONSE_FILTER_NEED_MORE_DATA if output data is still pending.",
                    "//",
                    "// This function will be called repeatedly until the input buffer has been",
                    "// fully read (user sets |data_in_read| = |data_in_size|) and there is no more",
                    "// input data to filter (the resource response is complete). This function may",
                    "// then be called an additional time with an NULL input buffer if the user",
                    "// filled the output buffer (set |data_out_written| = |data_out_size|) and",
                    "// returned RESPONSE_FILTER_NEED_MORE_DATA to indicate that output data is",
                    "// still pending.",
                    "//",
                    "// Calls to this function will stop when one of the following conditions is",
                    "// met:",
                    "//",
                    "//  A. There is no more input data to filter (the resource response is",
                    "//     complete) and the user sets |data_out_written| = 0 or returns",
                    "//     RESPONSE_FILTER_DONE to indicate that all data has been written, or;",
                    "//  B. The user returns RESPONSE_FILTER_ERROR to indicate an error.",
                    "//",
                    "// Do not keep a reference to the buffers passed to this function.",
                    "///"
                ],
                "decl": "cef_response_filter_status_t (*filter) (struct _cef_response_filter_t *, void *, size_t, size_t *, void *, size_t, size_t *)",
                "name": "filter",
                "ret": "cef_response_filter_status_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_response_t": {
        "comment": [
            "///",
            "// Structure used to represent a web response. The functions of this structure",
            "// may be called on any thread.",
            "///"
        ],
        "name": "cef_response_t",
        "path": "include/capi/cef_response_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is read-only.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_response_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the response error code. Returns ERR_NONE if there was no error.",
                    "///"
                ],
                "decl": "cef_errorcode_t (*get_error) (struct _cef_response_t *)",
                "name": "get_error",
                "ret": "cef_errorcode_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    "cef_errorcode_t"
                ],
                "comment": [
                    "///",
                    "// Set the response error code. This can be used by custom scheme handlers to",
                    "// return errors during initial request processing.",
                    "///"
                ],
                "decl": "void (*set_error) (struct _cef_response_t *, cef_errorcode_t)",
                "name": "set_error",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the response status code.",
                    "///"
                ],
                "decl": "int (*get_status) (struct _cef_response_t *)",
                "name": "get_status",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the response status code.",
                    "///"
                ],
                "decl": "void (*set_status) (struct _cef_response_t *, int)",
                "name": "set_status",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the response status text.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_status_text) (struct _cef_response_t *)",
                "name": "get_status_text",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the response status text.",
                    "///"
                ],
                "decl": "void (*set_status_text) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_status_text",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the response mime type.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_mime_type) (struct _cef_response_t *)",
                "name": "get_mime_type",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the response mime type.",
                    "///"
                ],
                "decl": "void (*set_mime_type) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_mime_type",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the response charset.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_charset) (struct _cef_response_t *)",
                "name": "get_charset",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the response charset.",
                    "///"
                ],
                "decl": "void (*set_charset) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_charset",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the value for the specified response header field.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_header_by_name) (struct _cef_response_t *, const cef_string_t *)",
                "name": "get_header_by_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set the header |name| to |value|. If |overwrite| is true (1) any existing",
                    "// values will be replaced with the new value. If |overwrite| is false (0) any",
                    "// existing values will not be overwritten.",
                    "///"
                ],
                "decl": "void (*set_header_by_name) (struct _cef_response_t *, const cef_string_t *, const cef_string_t *, int)",
                "name": "set_header_by_name",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "comment": [
                    "///",
                    "// Get all response header fields.",
                    "///"
                ],
                "decl": "void (*get_header_map) (struct _cef_response_t *, cef_string_multimap_t)",
                "name": "get_header_map",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    "cef_string_multimap_t"
                ],
                "comment": [
                    "///",
                    "// Set all response header fields.",
                    "///"
                ],
                "decl": "void (*set_header_map) (struct _cef_response_t *, cef_string_multimap_t)",
                "name": "set_header_map",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Get the resolved URL after redirects or changed as a result of HSTS.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_url) (struct _cef_response_t *)",
                "name": "get_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_response_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Set the resolved URL after redirects or changed as a result of HSTS.",
                    "///"
                ],
                "decl": "void (*set_url) (struct _cef_response_t *, const cef_string_t *)",
                "name": "set_url",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_run_context_menu_callback_t": {
        "comment": [
            "///",
            "// Callback structure used for continuation of custom context menu display.",
            "///"
        ],
        "name": "cef_run_context_menu_callback_t",
        "path": "include/capi/cef_context_menu_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_run_context_menu_callback_t"
                    ],
                    "int",
                    "cef_event_flags_t"
                ],
                "comment": [
                    "///",
                    "// Complete context menu display by selecting the specified |command_id| and",
                    "// |event_flags|.",
                    "///"
                ],
                "decl": "void (*cont) (struct _cef_run_context_menu_callback_t *, int, cef_event_flags_t)",
                "name": "cont",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_run_context_menu_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel context menu display.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_run_context_menu_callback_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_run_file_dialog_callback_t": {
        "comment": [
            "///",
            "// Callback structure for cef_browser_host_t::RunFileDialog. The functions of",
            "// this structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_run_file_dialog_callback_t",
        "path": "include/capi/cef_browser_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_run_file_dialog_callback_t"
                    ],
                    "int",
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Called asynchronously after the file dialog is dismissed.",
                    "// |selected_accept_filter| is the 0-based index of the value selected from",
                    "// the accept filters array passed to cef_browser_host_t::RunFileDialog.",
                    "// |file_paths| will be a single value or a list of values depending on the",
                    "// dialog mode. If the selection was cancelled |file_paths| will be NULL.",
                    "///"
                ],
                "decl": "void (*on_file_dialog_dismissed) (struct _cef_run_file_dialog_callback_t *, int, cef_string_list_t)",
                "name": "on_file_dialog_dismissed",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_scheme_handler_factory_t": {
        "comment": [
            "///",
            "// Structure that creates cef_resource_handler_t instances for handling scheme",
            "// requests. The functions of this structure will always be called on the IO",
            "// thread.",
            "///"
        ],
        "name": "cef_scheme_handler_factory_t",
        "path": "include/capi/cef_scheme_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_scheme_handler_factory_t"
                    ],
                    [
                        "struct _cef_browser_t"
                    ],
                    [
                        "struct _cef_frame_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_request_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return a new resource handler instance to handle the request or an NULL",
                    "// reference to allow default handling of the request. |browser| and |frame|",
                    "// will be the browser window and frame respectively that originated the",
                    "// request or NULL if the request did not originate from a browser window (for",
                    "// example, if the request came from cef_urlrequest_t). The |request| object",
                    "// passed to this function cannot be modified.",
                    "///"
                ],
                "decl": "struct _cef_resource_handler_t * (*create) (struct _cef_scheme_handler_factory_t *, struct _cef_browser_t *, struct _cef_frame_t *, const cef_string_t *, struct _cef_request_t *)",
                "name": "create",
                "ret": [
                    "struct _cef_resource_handler_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_scheme_registrar_t": {
        "comment": [
            "///",
            "// Structure that manages custom scheme registrations.",
            "///"
        ],
        "name": "cef_scheme_registrar_t",
        "path": "include/capi/cef_scheme_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_scoped_t"
            },
            {
                "args": [
                    [
                        "struct _cef_scheme_registrar_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Register a custom scheme. This function should not be called for the built-",
                    "// in HTTP, HTTPS, FILE, FTP, ABOUT and DATA schemes.",
                    "//",
                    "// See cef_scheme_options_t for possible values for |options|.",
                    "//",
                    "// This function may be called on any thread. It should only be called once",
                    "// per unique |scheme_name| value. If |scheme_name| is already registered or",
                    "// if an error occurs this function will return false (0).",
                    "///"
                ],
                "decl": "int (*add_custom_scheme) (struct _cef_scheme_registrar_t *, const cef_string_t *, int)",
                "name": "add_custom_scheme",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_screen_info_t": {
        "comment": [
            "///",
            "// Screen information used when window rendering is disabled. This structure is",
            "// passed as a parameter to CefRenderHandler::GetScreenInfo and should be filled",
            "// in by the client.",
            "///"
        ],
        "name": "cef_screen_info_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Device scale factor. Specifies the ratio between physical and logical",
                    "// pixels.",
                    "///"
                ],
                "name": "device_scale_factor",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// The screen depth in bits per pixel.",
                    "///"
                ],
                "name": "depth",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The bits per color component. This assumes that the colors are balanced",
                    "// equally.",
                    "///"
                ],
                "name": "depth_per_component",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// This can be true for black and white printers.",
                    "///"
                ],
                "name": "is_monochrome",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// This is set from the rcMonitor member of MONITORINFOEX, to whit:",
                    "//   \"A RECT structure that specifies the display monitor rectangle,",
                    "//   expressed in virtual-screen coordinates. Note that if the monitor",
                    "//   is not the primary display monitor, some of the rectangle's",
                    "//   coordinates may be negative values.\"",
                    "//",
                    "// The |rect| and |available_rect| properties are used to determine the",
                    "// available surface for rendering popup views.",
                    "///"
                ],
                "name": "rect",
                "type": "cef_rect_t"
            },
            {
                "comment": [
                    "///",
                    "// This is set from the rcWork member of MONITORINFOEX, to whit:",
                    "//   \"A RECT structure that specifies the work area rectangle of the",
                    "//   display monitor that can be used by applications, expressed in",
                    "//   virtual-screen coordinates. Windows uses this rectangle to",
                    "//   maximize an application on the monitor. The rest of the area in",
                    "//   rcMonitor contains system windows such as the task bar and side",
                    "//   bars. Note that if the monitor is not the primary display monitor,",
                    "//   some of the rectangle's coordinates may be negative values\".",
                    "//",
                    "// The |rect| and |available_rect| properties are used to determine the",
                    "// available surface for rendering popup views.",
                    "///"
                ],
                "name": "available_rect",
                "type": "cef_rect_t"
            }
        ]
    },
    "_cef_select_client_certificate_callback_t": {
        "comment": [
            "///",
            "// Callback structure used to select a client certificate for authentication.",
            "///"
        ],
        "name": "cef_select_client_certificate_callback_t",
        "path": "include/capi/cef_request_handler_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_select_client_certificate_callback_t"
                    ],
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Chooses the specified certificate for client certificate authentication.",
                    "// NULL value means that no client certificate should be used.",
                    "///"
                ],
                "decl": "void (*select) (struct _cef_select_client_certificate_callback_t *, struct _cef_x509certificate_t *)",
                "name": "select",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_set_cookie_callback_t": {
        "comment": [
            "///",
            "// Structure to implement to be notified of asynchronous completion via",
            "// cef_cookie_manager_t::set_cookie().",
            "///"
        ],
        "name": "cef_set_cookie_callback_t",
        "path": "include/capi/cef_cookie_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_set_cookie_callback_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be called upon completion. |success| will be true (1) if",
                    "// the cookie was set successfully.",
                    "///"
                ],
                "decl": "void (*on_complete) (struct _cef_set_cookie_callback_t *, int)",
                "name": "on_complete",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_settings_t": {
        "comment": [
            "///",
            "// Initialization settings. Specify NULL or 0 to get the recommended default",
            "// values. Many of these and other settings can also configured using command-",
            "// line switches.",
            "///"
        ],
        "name": "cef_settings_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Size of this structure.",
                    "///"
                ],
                "name": "size",
                "type": "size_t"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to disable the sandbox for sub-processes. See",
                    "// cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also",
                    "// configurable using the \"no-sandbox\" command-line switch.",
                    "///"
                ],
                "name": "no_sandbox",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The path to a separate executable that will be launched for sub-processes.",
                    "// If this value is empty on Windows or Linux then the main process executable",
                    "// will be used. If this value is empty on macOS then a helper executable must",
                    "// exist at \"Contents/Frameworks/<app> Helper.app/Contents/MacOS/<app> Helper\"",
                    "// in the top-level app bundle. See the comments on CefExecuteProcess() for",
                    "// details. If this value is non-empty then it must be an absolute path. Also",
                    "// configurable using the \"browser-subprocess-path\" command-line switch.",
                    "///"
                ],
                "name": "browser_subprocess_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The path to the CEF framework directory on macOS. If this value is empty",
                    "// then the framework must exist at \"Contents/Frameworks/Chromium Embedded",
                    "// Framework.framework\" in the top-level app bundle. If this value is",
                    "// non-empty then it must be an absolute path. Also configurable using the",
                    "// \"framework-dir-path\" command-line switch.",
                    "///"
                ],
                "name": "framework_dir_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The path to the main bundle on macOS. If this value is empty then it",
                    "// defaults to the top-level app bundle. If this value is non-empty then it",
                    "// must be an absolute path. Also configurable using the \"main-bundle-path\"",
                    "// command-line switch.",
                    "///"
                ],
                "name": "main_bundle_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to enable use of the Chrome runtime in CEF. This feature is",
                    "// considered experimental and is not recommended for most users at this time.",
                    "// See issue #2969 for details.",
                    "///"
                ],
                "name": "chrome_runtime",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to have the browser process message loop run in a separate",
                    "// thread. If false (0) than the CefDoMessageLoopWork() function must be",
                    "// called from your application message loop. This option is only supported on",
                    "// Windows and Linux.",
                    "///"
                ],
                "name": "multi_threaded_message_loop",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to control browser process main (UI) thread message pump",
                    "// scheduling via the CefBrowserProcessHandler::OnScheduleMessagePumpWork()",
                    "// callback. This option is recommended for use in combination with the",
                    "// CefDoMessageLoopWork() function in cases where the CEF message loop must be",
                    "// integrated into an existing application message loop (see additional",
                    "// comments and warnings on CefDoMessageLoopWork). Enabling this option is not",
                    "// recommended for most users; leave this option disabled and use either the",
                    "// CefRunMessageLoop() function or multi_threaded_message_loop if possible.",
                    "///"
                ],
                "name": "external_message_pump",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to enable windowless (off-screen) rendering support. Do not",
                    "// enable this value if the application does not use windowless rendering as",
                    "// it may reduce rendering performance on some systems.",
                    "///"
                ],
                "name": "windowless_rendering_enabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to disable configuration of browser process features using",
                    "// standard CEF and Chromium command-line arguments. Configuration can still",
                    "// be specified using CEF data structures or via the",
                    "// CefApp::OnBeforeCommandLineProcessing() method.",
                    "///"
                ],
                "name": "command_line_args_disabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The location where data for the global browser cache will be stored on",
                    "// disk. If this value is non-empty then it must be an absolute path that is",
                    "// either equal to or a child directory of CefSettings.root_cache_path. If",
                    "// this value is empty then browsers will be created in \"incognito mode\" where",
                    "// in-memory caches are used for storage and no data is persisted to disk.",
                    "// HTML5 databases such as localStorage will only persist across sessions if a",
                    "// cache path is specified. Can be overridden for individual CefRequestContext",
                    "// instances via the CefRequestContextSettings.cache_path value.",
                    "///"
                ],
                "name": "cache_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The root directory that all CefSettings.cache_path and",
                    "// CefRequestContextSettings.cache_path values must have in common. If this",
                    "// value is empty and CefSettings.cache_path is non-empty then it will",
                    "// default to the CefSettings.cache_path value. If this value is non-empty",
                    "// then it must be an absolute path. Failure to set this value correctly may",
                    "// result in the sandbox blocking read/write access to the cache_path",
                    "// directory.",
                    "///"
                ],
                "name": "root_cache_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The location where user data such as spell checking dictionary files will",
                    "// be stored on disk. If this value is empty then the default",
                    "// platform-specific user data directory will be used (\"~/.cef_user_data\"",
                    "// directory on Linux, \"~/Library/Application Support/CEF/User Data\" directory",
                    "// on Mac OS X, \"Local Settings\\Application Data\\CEF\\User Data\" directory",
                    "// under the user profile directory on Windows). If this value is non-empty",
                    "// then it must be an absolute path.",
                    "///"
                ],
                "name": "user_data_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// To persist session cookies (cookies without an expiry date or validity",
                    "// interval) by default when using the global cookie manager set this value to",
                    "// true (1). Session cookies are generally intended to be transient and most",
                    "// Web browsers do not persist them. A |cache_path| value must also be",
                    "// specified to enable this feature. Also configurable using the",
                    "// \"persist-session-cookies\" command-line switch. Can be overridden for",
                    "// individual CefRequestContext instances via the",
                    "// CefRequestContextSettings.persist_session_cookies value.",
                    "///"
                ],
                "name": "persist_session_cookies",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// To persist user preferences as a JSON file in the cache path directory set",
                    "// this value to true (1). A |cache_path| value must also be specified",
                    "// to enable this feature. Also configurable using the",
                    "// \"persist-user-preferences\" command-line switch. Can be overridden for",
                    "// individual CefRequestContext instances via the",
                    "// CefRequestContextSettings.persist_user_preferences value.",
                    "///"
                ],
                "name": "persist_user_preferences",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Value that will be returned as the User-Agent HTTP header. If empty the",
                    "// default User-Agent string will be used. Also configurable using the",
                    "// \"user-agent\" command-line switch.",
                    "///"
                ],
                "name": "user_agent",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Value that will be inserted as the product portion of the default",
                    "// User-Agent string. If empty the Chromium product version will be used. If",
                    "// |userAgent| is specified this value will be ignored. Also configurable",
                    "// using the \"product-version\" command-line switch.",
                    "///"
                ],
                "name": "product_version",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The locale string that will be passed to WebKit. If empty the default",
                    "// locale of \"en-US\" will be used. This value is ignored on Linux where locale",
                    "// is determined using environment variable parsing with the precedence order:",
                    "// LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also configurable using the \"lang\"",
                    "// command-line switch.",
                    "///"
                ],
                "name": "locale",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The directory and file name to use for the debug log. If empty a default",
                    "// log file name and location will be used. On Windows and Linux a \"debug.log\"",
                    "// file will be written in the main executable directory. On Mac OS X a",
                    "// \"~/Library/Logs/<app name>_debug.log\" file will be written where <app name>",
                    "// is the name of the main app executable. Also configurable using the",
                    "// \"log-file\" command-line switch.",
                    "///"
                ],
                "name": "log_file",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The log severity. Only messages of this severity level or higher will be",
                    "// logged. When set to DISABLE no messages will be written to the log file,",
                    "// but FATAL messages will still be output to stderr. Also configurable using",
                    "// the \"log-severity\" command-line switch with a value of \"verbose\", \"info\",",
                    "// \"warning\", \"error\", \"fatal\" or \"disable\".",
                    "///"
                ],
                "name": "log_severity",
                "type": "cef_log_severity_t"
            },
            {
                "comment": [
                    "///",
                    "// Custom flags that will be used when initializing the V8 JavaScript engine.",
                    "// The consequences of using custom flags may not be well tested. Also",
                    "// configurable using the \"js-flags\" command-line switch.",
                    "///"
                ],
                "name": "javascript_flags",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The fully qualified path for the resources directory. If this value is",
                    "// empty the cef.pak and/or devtools_resources.pak files must be located in",
                    "// the module directory on Windows/Linux or the app bundle Resources directory",
                    "// on Mac OS X. If this value is non-empty then it must be an absolute path.",
                    "// Also configurable using the \"resources-dir-path\" command-line switch.",
                    "///"
                ],
                "name": "resources_dir_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// The fully qualified path for the locales directory. If this value is empty",
                    "// the locales directory must be located in the module directory. If this",
                    "// value is non-empty then it must be an absolute path. This value is ignored",
                    "// on Mac OS X where pack files are always loaded from the app bundle",
                    "// Resources directory. Also configurable using the \"locales-dir-path\"",
                    "// command-line switch.",
                    "///"
                ],
                "name": "locales_dir_path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to disable loading of pack files for resources and locales.",
                    "// A resource bundle handler must be provided for the browser and render",
                    "// processes via CefApp::GetResourceBundleHandler() if loading of pack files",
                    "// is disabled. Also configurable using the \"disable-pack-loading\" command-",
                    "// line switch.",
                    "///"
                ],
                "name": "pack_loading_disabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to a value between 1024 and 65535 to enable remote debugging on the",
                    "// specified port. For example, if 8080 is specified the remote debugging URL",
                    "// will be http://localhost:8080. CEF can be remotely debugged from any CEF or",
                    "// Chrome browser window. Also configurable using the \"remote-debugging-port\"",
                    "// command-line switch.",
                    "///"
                ],
                "name": "remote_debugging_port",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// The number of stack trace frames to capture for uncaught exceptions.",
                    "// Specify a positive value to enable the CefRenderProcessHandler::",
                    "// OnUncaughtException() callback. Specify 0 (default value) and",
                    "// OnUncaughtException() will not be called. Also configurable using the",
                    "// \"uncaught-exception-stack-size\" command-line switch.",
                    "///"
                ],
                "name": "uncaught_exception_stack_size",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to ignore errors related to invalid SSL certificates.",
                    "// Enabling this setting can lead to potential security vulnerabilities like",
                    "// \"man in the middle\" attacks. Applications that load content from the",
                    "// internet should not enable this setting. Also configurable using the",
                    "// \"ignore-certificate-errors\" command-line switch. Can be overridden for",
                    "// individual CefRequestContext instances via the",
                    "// CefRequestContextSettings.ignore_certificate_errors value.",
                    "///"
                ],
                "name": "ignore_certificate_errors",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Background color used for the browser before a document is loaded and when",
                    "// no document color is specified. The alpha component must be either fully",
                    "// opaque (0xFF) or fully transparent (0x00). If the alpha component is fully",
                    "// opaque then the RGB components will be used as the background color. If the",
                    "// alpha component is fully transparent for a windowed browser then the",
                    "// default value of opaque white be used. If the alpha component is fully",
                    "// transparent for a windowless (off-screen) browser then transparent painting",
                    "// will be enabled.",
                    "///"
                ],
                "name": "background_color",
                "type": "cef_color_t"
            },
            {
                "comment": [
                    "///",
                    "// Comma delimited ordered list of language codes without any whitespace that",
                    "// will be used in the \"Accept-Language\" HTTP header. May be overridden on a",
                    "// per-browser basis using the CefBrowserSettings.accept_language_list value.",
                    "// If both values are empty then \"en-US,en\" will be used. Can be overridden",
                    "// for individual CefRequestContext instances via the",
                    "// CefRequestContextSettings.accept_language_list value.",
                    "///"
                ],
                "name": "accept_language_list",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// GUID string used for identifying the application. This is passed to the",
                    "// system AV function for scanning downloaded files. By default, the GUID",
                    "// will be an empty string and the file will be treated as an untrusted",
                    "// file when the GUID is empty.",
                    "///"
                ],
                "name": "application_client_id_for_file_scanning",
                "type": "cef_string_t"
            }
        ]
    },
    "_cef_size_t": {
        "comment": [
            "///",
            "// Structure representing a size.",
            "///"
        ],
        "name": "cef_size_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "name": "width",
                "type": "int"
            },
            {
                "name": "height",
                "type": "int"
            }
        ]
    },
    "_cef_sslinfo_t": {
        "comment": [
            "///",
            "// Structure representing SSL information.",
            "///"
        ],
        "name": "cef_sslinfo_t",
        "path": "include/capi/cef_ssl_info_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_sslinfo_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a bitmask containing any and all problems verifying the server",
                    "// certificate.",
                    "///"
                ],
                "decl": "cef_cert_status_t (*get_cert_status) (struct _cef_sslinfo_t *)",
                "name": "get_cert_status",
                "ret": "cef_cert_status_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_sslinfo_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the X.509 certificate.",
                    "///"
                ],
                "decl": "struct _cef_x509certificate_t * (*get_x509certificate) (struct _cef_sslinfo_t *)",
                "name": "get_x509certificate",
                "ret": [
                    "struct _cef_x509certificate_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_sslstatus_t": {
        "comment": [
            "///",
            "// Structure representing the SSL information for a navigation entry.",
            "///"
        ],
        "name": "cef_sslstatus_t",
        "path": "include/capi/cef_ssl_status_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_sslstatus_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the status is related to a secure SSL/TLS connection.",
                    "///"
                ],
                "decl": "int (*is_secure_connection) (struct _cef_sslstatus_t *)",
                "name": "is_secure_connection",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_sslstatus_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a bitmask containing any and all problems verifying the server",
                    "// certificate.",
                    "///"
                ],
                "decl": "cef_cert_status_t (*get_cert_status) (struct _cef_sslstatus_t *)",
                "name": "get_cert_status",
                "ret": "cef_cert_status_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_sslstatus_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the SSL version used for the SSL connection.",
                    "///"
                ],
                "decl": "cef_ssl_version_t (*get_sslversion) (struct _cef_sslstatus_t *)",
                "name": "get_sslversion",
                "ret": "cef_ssl_version_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_sslstatus_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a bitmask containing the page security content status.",
                    "///"
                ],
                "decl": "cef_ssl_content_status_t (*get_content_status) (struct _cef_sslstatus_t *)",
                "name": "get_content_status",
                "ret": "cef_ssl_content_status_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_sslstatus_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the X.509 certificate.",
                    "///"
                ],
                "decl": "struct _cef_x509certificate_t * (*get_x509certificate) (struct _cef_sslstatus_t *)",
                "name": "get_x509certificate",
                "ret": [
                    "struct _cef_x509certificate_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_stream_reader_t": {
        "comment": [
            "///",
            "// Structure used to read data from a stream. The functions of this structure",
            "// may be called on any thread.",
            "///"
        ],
        "name": "cef_stream_reader_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_reader_t"
                    ],
                    [
                        "void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Read raw binary data.",
                    "///"
                ],
                "decl": "size_t (*read) (struct _cef_stream_reader_t *, void *, size_t, size_t)",
                "name": "read",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_reader_t"
                    ],
                    "int64",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Seek to the specified offset position. |whence| may be any one of SEEK_CUR,",
                    "// SEEK_END or SEEK_SET. Returns zero on success and non-zero on failure.",
                    "///"
                ],
                "decl": "int (*seek) (struct _cef_stream_reader_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_reader_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the current offset position.",
                    "///"
                ],
                "decl": "int64 (*tell) (struct _cef_stream_reader_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_reader_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return non-zero if at end of file.",
                    "///"
                ],
                "decl": "int (*eof) (struct _cef_stream_reader_t *)",
                "name": "eof",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_reader_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this reader performs work like accessing the file",
                    "// system which may block. Used as a hint for determining the thread to access",
                    "// the reader from.",
                    "///"
                ],
                "decl": "int (*may_block) (struct _cef_stream_reader_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_stream_writer_t": {
        "comment": [
            "///",
            "// Structure used to write data to a stream. The functions of this structure may",
            "// be called on any thread.",
            "///"
        ],
        "name": "cef_stream_writer_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_writer_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Write raw binary data.",
                    "///"
                ],
                "decl": "size_t (*write) (struct _cef_stream_writer_t *, const void *, size_t, size_t)",
                "name": "write",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_writer_t"
                    ],
                    "int64",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Seek to the specified offset position. |whence| may be any one of SEEK_CUR,",
                    "// SEEK_END or SEEK_SET. Returns zero on success and non-zero on failure.",
                    "///"
                ],
                "decl": "int (*seek) (struct _cef_stream_writer_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_writer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the current offset position.",
                    "///"
                ],
                "decl": "int64 (*tell) (struct _cef_stream_writer_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_writer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Flush the stream.",
                    "///"
                ],
                "decl": "int (*flush) (struct _cef_stream_writer_t *)",
                "name": "flush",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_stream_writer_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this writer performs work like accessing the file",
                    "// system which may block. Used as a hint for determining the thread to access",
                    "// the writer from.",
                    "///"
                ],
                "decl": "int (*may_block) (struct _cef_stream_writer_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_string_utf16_t": {
        "name": "cef_string_utf16_t",
        "path": "include/internal/cef_string_types.h",
        "props": [
            {
                "name": "str",
                "type": [
                    "char16"
                ]
            },
            {
                "name": "length",
                "type": "size_t"
            },
            {
                "args": [
                    [
                        "char16"
                    ]
                ],
                "decl": "void (*dtor) (char16 *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_string_utf8_t": {
        "name": "cef_string_utf8_t",
        "path": "include/internal/cef_string_types.h",
        "props": [
            {
                "name": "str",
                "type": [
                    "char"
                ]
            },
            {
                "name": "length",
                "type": "size_t"
            },
            {
                "args": [
                    [
                        "char"
                    ]
                ],
                "decl": "void (*dtor) (char *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_string_visitor_t": {
        "comment": [
            "///",
            "// Implement this structure to receive string values asynchronously.",
            "///"
        ],
        "name": "cef_string_visitor_t",
        "path": "include/capi/cef_string_visitor_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_string_visitor_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be executed.",
                    "///"
                ],
                "decl": "void (*visit) (struct _cef_string_visitor_t *, const cef_string_t *)",
                "name": "visit",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_string_wide_t": {
        "comment": [
            "// CEF string type definitions. Whomever allocates |str| is responsible for",
            "// providing an appropriate |dtor| implementation that will free the string in",
            "// the same memory space. When reusing an existing string structure make sure",
            "// to call |dtor| for the old value before assigning new |str| and |dtor|",
            "// values. Static strings will have a NULL |dtor| value. Using the below",
            "// functions if you want this managed for you."
        ],
        "name": "cef_string_wide_t",
        "path": "include/internal/cef_string_types.h",
        "props": [
            {
                "name": "str",
                "type": [
                    "wchar_t"
                ]
            },
            {
                "name": "length",
                "type": "size_t"
            },
            {
                "args": [
                    [
                        "wchar_t"
                    ]
                ],
                "decl": "void (*dtor) (wchar_t *)",
                "name": "dtor",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_task_runner_t": {
        "comment": [
            "///",
            "// Structure that asynchronously executes tasks on the associated thread. It is",
            "// safe to call the functions of this structure on any thread.",
            "//",
            "// CEF maintains multiple internal threads that are used for handling different",
            "// types of tasks in different processes. The cef_thread_id_t definitions in",
            "// cef_types.h list the common CEF threads. Task runners are also available for",
            "// other CEF threads as appropriate (for example, V8 WebWorker threads).",
            "///"
        ],
        "name": "cef_task_runner_t",
        "path": "include/capi/cef_task_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_task_runner_t"
                    ],
                    [
                        "struct _cef_task_runner_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same task runner as",
                    "// |that| object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_task_runner_t *, struct _cef_task_runner_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_task_runner_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this task runner belongs to the current thread.",
                    "///"
                ],
                "decl": "int (*belongs_to_current_thread) (struct _cef_task_runner_t *)",
                "name": "belongs_to_current_thread",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_task_runner_t"
                    ],
                    "cef_thread_id_t"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this task runner is for the specified CEF thread.",
                    "///"
                ],
                "decl": "int (*belongs_to_thread) (struct _cef_task_runner_t *, cef_thread_id_t)",
                "name": "belongs_to_thread",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_task_runner_t"
                    ],
                    [
                        "struct _cef_task_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Post a task for execution on the thread associated with this task runner.",
                    "// Execution will occur asynchronously.",
                    "///"
                ],
                "decl": "int (*post_task) (struct _cef_task_runner_t *, struct _cef_task_t *)",
                "name": "post_task",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_task_runner_t"
                    ],
                    [
                        "struct _cef_task_t"
                    ],
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Post a task for delayed execution on the thread associated with this task",
                    "// runner. Execution will occur asynchronously. Delayed tasks are not",
                    "// supported on V8 WebWorker threads and will be executed without the",
                    "// specified delay.",
                    "///"
                ],
                "decl": "int (*post_delayed_task) (struct _cef_task_runner_t *, struct _cef_task_t *, int64)",
                "name": "post_delayed_task",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_task_t": {
        "comment": [
            "///",
            "// Implement this structure for asynchronous task execution. If the task is",
            "// posted successfully and if the associated message loop is still running then",
            "// the execute() function will be called on the target thread. If the task fails",
            "// to post then the task object may be destroyed on the source thread instead of",
            "// the target thread. For this reason be cautious when performing work in the",
            "// task object destructor.",
            "///"
        ],
        "name": "cef_task_t",
        "path": "include/capi/cef_task_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_task_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Method that will be executed on the target thread.",
                    "///"
                ],
                "decl": "void (*execute) (struct _cef_task_t *)",
                "name": "execute",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_time_t": {
        "comment": [
            "///",
            "// Time information. Values should always be in UTC.",
            "///"
        ],
        "name": "cef_time_t",
        "path": "include/internal/cef_time.h",
        "props": [
            {
                "name": "year",
                "type": "int"
            },
            {
                "comment": [
                    "// Four or five digit year \"2007\" (1601 to 30827 on",
                    "//   Windows, 1970 to 2038 on 32-bit POSIX)"
                ],
                "name": "month",
                "type": "int"
            },
            {
                "comment": [
                    "// 1-based month (values 1 = January, etc.)"
                ],
                "name": "day_of_week",
                "type": "int"
            },
            {
                "comment": [
                    "// 0-based day of week (0 = Sunday, etc.)"
                ],
                "name": "day_of_month",
                "type": "int"
            },
            {
                "comment": [
                    "// 1-based day of month (1-31)"
                ],
                "name": "hour",
                "type": "int"
            },
            {
                "comment": [
                    "// Hour within the current day (0-23)"
                ],
                "name": "minute",
                "type": "int"
            },
            {
                "comment": [
                    "// Minute within the current hour (0-59)"
                ],
                "name": "second",
                "type": "int"
            },
            {
                "comment": [
                    "// Second within the current minute (0-59 plus leap",
                    "//   seconds which may take it up to 60)."
                ],
                "name": "millisecond",
                "type": "int"
            }
        ]
    },
    "_cef_touch_event_t": {
        "comment": [
            "///",
            "// Structure representing touch event information.",
            "///"
        ],
        "name": "cef_touch_event_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Id of a touch point. Must be unique per touch, can be any number except -1.",
                    "// Note that a maximum of 16 concurrent touches will be tracked; touches",
                    "// beyond that will be ignored.",
                    "///"
                ],
                "name": "id",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// X coordinate relative to the left side of the view.",
                    "///"
                ],
                "name": "x",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// Y coordinate relative to the top side of the view.",
                    "///"
                ],
                "name": "y",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// X radius in pixels. Set to 0 if not applicable.",
                    "///"
                ],
                "name": "radius_x",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// Y radius in pixels. Set to 0 if not applicable.",
                    "///"
                ],
                "name": "radius_y",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// Rotation angle in radians. Set to 0 if not applicable.",
                    "///"
                ],
                "name": "rotation_angle",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// The normalized pressure of the pointer input in the range of [0,1].",
                    "// Set to 0 if not applicable.",
                    "///"
                ],
                "name": "pressure",
                "type": "float"
            },
            {
                "comment": [
                    "///",
                    "// The state of the touch point. Touches begin with one CEF_TET_PRESSED event",
                    "// followed by zero or more CEF_TET_MOVED events and finally one",
                    "// CEF_TET_RELEASED or CEF_TET_CANCELLED event. Events not respecting this",
                    "// order will be ignored.",
                    "///"
                ],
                "name": "type",
                "type": "cef_touch_event_type_t"
            },
            {
                "comment": [
                    "///",
                    "// Bit flags describing any pressed modifier keys. See",
                    "// cef_event_flags_t for values.",
                    "///"
                ],
                "name": "modifiers",
                "type": "uint32"
            },
            {
                "comment": [
                    "///",
                    "// The device type that caused the event.",
                    "///"
                ],
                "name": "pointer_type",
                "type": "cef_pointer_type_t"
            }
        ]
    },
    "_cef_urlparts_t": {
        "comment": [
            "///",
            "// URL component parts.",
            "///"
        ],
        "name": "cef_urlparts_t",
        "path": "include/internal/cef_types.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// The complete URL specification.",
                    "///"
                ],
                "name": "spec",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Scheme component not including the colon (e.g., \"http\").",
                    "///"
                ],
                "name": "scheme",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// User name component.",
                    "///"
                ],
                "name": "username",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Password component.",
                    "///"
                ],
                "name": "password",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Host component. This may be a hostname, an IPv4 address or an IPv6 literal",
                    "// surrounded by square brackets (e.g., \"[2001:db8::1]\").",
                    "///"
                ],
                "name": "host",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Port number component.",
                    "///"
                ],
                "name": "port",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Origin contains just the scheme, host, and port from a URL. Equivalent to",
                    "// clearing any username and password, replacing the path with a slash, and",
                    "// clearing everything after that. This value will be empty for non-standard",
                    "// URLs.",
                    "///"
                ],
                "name": "origin",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Path component including the first slash following the host.",
                    "///"
                ],
                "name": "path",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Query string component (i.e., everything following the '?').",
                    "///"
                ],
                "name": "query",
                "type": "cef_string_t"
            },
            {
                "comment": [
                    "///",
                    "// Fragment (hash) identifier component (i.e., the string following the '#').",
                    "///"
                ],
                "name": "fragment",
                "type": "cef_string_t"
            }
        ]
    },
    "_cef_urlrequest_client_t": {
        "comment": [
            "///",
            "// Structure that should be implemented by the cef_urlrequest_t client. The",
            "// functions of this structure will be called on the same thread that created",
            "// the request unless otherwise documented.",
            "///"
        ],
        "name": "cef_urlrequest_client_t",
        "path": "include/capi/cef_urlrequest_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_client_t"
                    ],
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Notifies the client that the request has completed. Use the",
                    "// cef_urlrequest_t::GetRequestStatus function to determine if the request was",
                    "// successful or not.",
                    "///"
                ],
                "decl": "void (*on_request_complete) (struct _cef_urlrequest_client_t *, struct _cef_urlrequest_t *)",
                "name": "on_request_complete",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_client_t"
                    ],
                    [
                        "struct _cef_urlrequest_t"
                    ],
                    "int64",
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Notifies the client of upload progress. |current| denotes the number of",
                    "// bytes sent so far and |total| is the total size of uploading data (or -1 if",
                    "// chunked upload is enabled). This function will only be called if the",
                    "// UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.",
                    "///"
                ],
                "decl": "void (*on_upload_progress) (struct _cef_urlrequest_client_t *, struct _cef_urlrequest_t *, int64, int64)",
                "name": "on_upload_progress",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_client_t"
                    ],
                    [
                        "struct _cef_urlrequest_t"
                    ],
                    "int64",
                    "int64"
                ],
                "comment": [
                    "///",
                    "// Notifies the client of download progress. |current| denotes the number of",
                    "// bytes received up to the call and |total| is the expected total size of the",
                    "// response (or -1 if not determined).",
                    "///"
                ],
                "decl": "void (*on_download_progress) (struct _cef_urlrequest_client_t *, struct _cef_urlrequest_t *, int64, int64)",
                "name": "on_download_progress",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_client_t"
                    ],
                    [
                        "struct _cef_urlrequest_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Called when some part of the response is read. |data| contains the current",
                    "// bytes received since the last call. This function will not be called if the",
                    "// UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.",
                    "///"
                ],
                "decl": "void (*on_download_data) (struct _cef_urlrequest_client_t *, struct _cef_urlrequest_t *, const void *, size_t)",
                "name": "on_download_data",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_client_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_auth_callback_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called on the IO thread when the browser needs credentials from the user.",
                    "// |isProxy| indicates whether the host is a proxy server. |host| contains the",
                    "// hostname and |port| contains the port number. Return true (1) to continue",
                    "// the request and call cef_auth_callback_t::cont() when the authentication",
                    "// information is available. If the request has an associated browser/frame",
                    "// then returning false (0) will result in a call to GetAuthCredentials on the",
                    "// cef_request_handler_t associated with that browser, if any. Otherwise,",
                    "// returning false (0) will cancel the request immediately. This function will",
                    "// only be called for requests initiated from the browser process.",
                    "///"
                ],
                "decl": "int (*get_auth_credentials) (struct _cef_urlrequest_client_t *, int, const cef_string_t *, int, const cef_string_t *, const cef_string_t *, struct _cef_auth_callback_t *)",
                "name": "get_auth_credentials",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_urlrequest_t": {
        "comment": [
            "///",
            "// Structure used to make a URL request. URL requests are not associated with a",
            "// browser instance so no cef_client_t callbacks will be executed. URL requests",
            "// can be created on any valid CEF thread in either the browser or render",
            "// process. Once created the functions of the URL request object must be",
            "// accessed on the same thread that created it.",
            "///"
        ],
        "name": "cef_urlrequest_t",
        "path": "include/capi/cef_urlrequest_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the request object used to create this URL request. The returned",
                    "// object is read-only and should not be modified.",
                    "///"
                ],
                "decl": "struct _cef_request_t * (*get_request) (struct _cef_urlrequest_t *)",
                "name": "get_request",
                "ret": [
                    "struct _cef_request_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the client.",
                    "///"
                ],
                "decl": "struct _cef_urlrequest_client_t * (*get_client) (struct _cef_urlrequest_t *)",
                "name": "get_client",
                "ret": [
                    "struct _cef_urlrequest_client_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the request status.",
                    "///"
                ],
                "decl": "cef_urlrequest_status_t (*get_request_status) (struct _cef_urlrequest_t *)",
                "name": "get_request_status",
                "ret": "cef_urlrequest_status_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the request error if status is UR_CANCELED or UR_FAILED, or 0",
                    "// otherwise.",
                    "///"
                ],
                "decl": "cef_errorcode_t (*get_request_error) (struct _cef_urlrequest_t *)",
                "name": "get_request_error",
                "ret": "cef_errorcode_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the response, or NULL if no response information is available.",
                    "// Response information will only be available after the upload has completed.",
                    "// The returned object is read-only and should not be modified.",
                    "///"
                ],
                "decl": "struct _cef_response_t * (*get_response) (struct _cef_urlrequest_t *)",
                "name": "get_response",
                "ret": [
                    "struct _cef_response_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the response body was served from the cache. This",
                    "// includes responses for which revalidation was required.",
                    "///"
                ],
                "decl": "int (*response_was_cached) (struct _cef_urlrequest_t *)",
                "name": "response_was_cached",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_urlrequest_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Cancel the request.",
                    "///"
                ],
                "decl": "void (*cancel) (struct _cef_urlrequest_t *)",
                "name": "cancel",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8accessor_t": {
        "comment": [
            "///",
            "// Structure that should be implemented to handle V8 accessor calls. Accessor",
            "// identifiers are registered by calling cef_v8value_t::set_value(). The",
            "// functions of this structure will be called on the thread associated with the",
            "// V8 accessor.",
            "///"
        ],
        "name": "cef_v8accessor_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8accessor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle retrieval the accessor value identified by |name|. |object| is the",
                    "// receiver ('this' object) of the accessor. If retrieval succeeds set",
                    "// |retval| to the return value. If retrieval fails set |exception| to the",
                    "// exception that will be thrown. Return true (1) if accessor retrieval was",
                    "// handled.",
                    "///"
                ],
                "decl": "int (*get) (struct _cef_v8accessor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8accessor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle assignment of the accessor value identified by |name|. |object| is",
                    "// the receiver ('this' object) of the accessor. |value| is the new value",
                    "// being assigned to the accessor. If assignment fails set |exception| to the",
                    "// exception that will be thrown. Return true (1) if accessor assignment was",
                    "// handled.",
                    "///"
                ],
                "decl": "int (*set) (struct _cef_v8accessor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8array_buffer_release_callback_t": {
        "comment": [
            "///",
            "// Callback structure that is passed to cef_v8value_t::CreateArrayBuffer.",
            "///"
        ],
        "name": "cef_v8array_buffer_release_callback_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8array_buffer_release_callback_t"
                    ],
                    [
                        "void"
                    ]
                ],
                "comment": [
                    "///",
                    "// Called to release |buffer| when the ArrayBuffer JS object is garbage",
                    "// collected. |buffer| is the value that was passed to CreateArrayBuffer along",
                    "// with this object.",
                    "///"
                ],
                "decl": "void (*release_buffer) (struct _cef_v8array_buffer_release_callback_t *, void *)",
                "name": "release_buffer",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8context_t": {
        "comment": [
            "///",
            "// Structure representing a V8 context handle. V8 handles can only be accessed",
            "// from the thread on which they are created. Valid threads for creating a V8",
            "// handle include the render process main thread (TID_RENDERER) and WebWorker",
            "// threads. A task runner for posting tasks on the associated thread can be",
            "// retrieved via the cef_v8context_t::get_task_runner() function.",
            "///"
        ],
        "name": "cef_v8context_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the task runner associated with this context. V8 handles can only",
                    "// be accessed from the thread on which they are created. This function can be",
                    "// called on any render process thread.",
                    "///"
                ],
                "decl": "struct _cef_task_runner_t * (*get_task_runner) (struct _cef_v8context_t *)",
                "name": "get_task_runner",
                "ret": [
                    "struct _cef_task_runner_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying handle is valid and it can be accessed",
                    "// on the current thread. Do not call any other functions if this function",
                    "// returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_v8context_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the browser for this context. This function will return an NULL",
                    "// reference for WebWorker contexts.",
                    "///"
                ],
                "decl": "struct _cef_browser_t * (*get_browser) (struct _cef_v8context_t *)",
                "name": "get_browser",
                "ret": [
                    "struct _cef_browser_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the frame for this context. This function will return an NULL",
                    "// reference for WebWorker contexts.",
                    "///"
                ],
                "decl": "struct _cef_frame_t * (*get_frame) (struct _cef_v8context_t *)",
                "name": "get_frame",
                "ret": [
                    "struct _cef_frame_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the global object for this context. The context must be entered",
                    "// before calling this function.",
                    "///"
                ],
                "decl": "struct _cef_v8value_t * (*get_global) (struct _cef_v8context_t *)",
                "name": "get_global",
                "ret": [
                    "struct _cef_v8value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Enter this context. A context must be explicitly entered before creating a",
                    "// V8 Object, Array, Function or Date asynchronously. exit() must be called",
                    "// the same number of times as enter() before releasing this context. V8",
                    "// objects belong to the context in which they are created. Returns true (1)",
                    "// if the scope was entered successfully.",
                    "///"
                ],
                "decl": "int (*enter) (struct _cef_v8context_t *)",
                "name": "enter",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Exit this context. Call this function only after calling enter(). Returns",
                    "// true (1) if the scope was exited successfully.",
                    "///"
                ],
                "decl": "int (*exit) (struct _cef_v8context_t *)",
                "name": "exit",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ],
                    [
                        "struct _cef_v8context_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same handle as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_v8context_t *, struct _cef_v8context_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8context_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int",
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        [
                            "struct _cef_v8exception_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute a string of JavaScript code in this V8 context. The |script_url|",
                    "// parameter is the URL where the script in question can be found, if any. The",
                    "// |start_line| parameter is the base line number to use for error reporting.",
                    "// On success |retval| will be set to the return value, if any, and the",
                    "// function will return true (1). On failure |exception| will be set to the",
                    "// exception, if any, and the function will return false (0).",
                    "///"
                ],
                "decl": "int (*eval) (struct _cef_v8context_t *, const cef_string_t *, const cef_string_t *, int, struct _cef_v8value_t **, struct _cef_v8exception_t **)",
                "name": "eval",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8exception_t": {
        "comment": [
            "///",
            "// Structure representing a V8 exception. The functions of this structure may be",
            "// called on any render process thread.",
            "///"
        ],
        "name": "cef_v8exception_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the exception message.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_message) (struct _cef_v8exception_t *)",
                "name": "get_message",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the line of source code that the exception occurred within.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_source_line) (struct _cef_v8exception_t *)",
                "name": "get_source_line",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the resource name for the script from where the function causing",
                    "// the error originates.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_script_resource_name) (struct _cef_v8exception_t *)",
                "name": "get_script_resource_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the 1-based number of the line where the error occurred or 0 if the",
                    "// line number is unknown.",
                    "///"
                ],
                "decl": "int (*get_line_number) (struct _cef_v8exception_t *)",
                "name": "get_line_number",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the index within the script of the first character where the error",
                    "// occurred.",
                    "///"
                ],
                "decl": "int (*get_start_position) (struct _cef_v8exception_t *)",
                "name": "get_start_position",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the index within the script of the last character where the error",
                    "// occurred.",
                    "///"
                ],
                "decl": "int (*get_end_position) (struct _cef_v8exception_t *)",
                "name": "get_end_position",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the index within the line of the first character where the error",
                    "// occurred.",
                    "///"
                ],
                "decl": "int (*get_start_column) (struct _cef_v8exception_t *)",
                "name": "get_start_column",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8exception_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the index within the line of the last character where the error",
                    "// occurred.",
                    "///"
                ],
                "decl": "int (*get_end_column) (struct _cef_v8exception_t *)",
                "name": "get_end_column",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8handler_t": {
        "comment": [
            "///",
            "// Structure that should be implemented to handle V8 function calls. The",
            "// functions of this structure will be called on the thread associated with the",
            "// V8 function.",
            "///"
        ],
        "name": "cef_v8handler_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8handler_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle execution of the function identified by |name|. |object| is the",
                    "// receiver ('this' object) of the function. |arguments| is the list of",
                    "// arguments passed to the function. If execution succeeds set |retval| to the",
                    "// function return value. If execution fails set |exception| to the exception",
                    "// that will be thrown. Return true (1) if execution was handled.",
                    "///"
                ],
                "decl": "int (*execute) (struct _cef_v8handler_t *, const cef_string_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "execute",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8interceptor_t": {
        "comment": [
            "///",
            "// Structure that should be implemented to handle V8 interceptor calls. The",
            "// functions of this structure will be called on the thread associated with the",
            "// V8 interceptor. Interceptor's named property handlers (with first argument of",
            "// type CefString) are called when object is indexed by string. Indexed property",
            "// handlers (with first argument of type int) are called when object is indexed",
            "// by integer.",
            "///"
        ],
        "name": "cef_v8interceptor_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8interceptor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle retrieval of the interceptor value identified by |name|. |object| is",
                    "// the receiver ('this' object) of the interceptor. If retrieval succeeds, set",
                    "// |retval| to the return value. If the requested value does not exist, don't",
                    "// set either |retval| or |exception|. If retrieval fails, set |exception| to",
                    "// the exception that will be thrown. If the property has an associated",
                    "// accessor, it will be called only if you don't set |retval|. Return true (1)",
                    "// if interceptor retrieval was handled, false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*get_byname) (struct _cef_v8interceptor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get_byname",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8interceptor_t"
                    ],
                    "int",
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle retrieval of the interceptor value identified by |index|. |object|",
                    "// is the receiver ('this' object) of the interceptor. If retrieval succeeds,",
                    "// set |retval| to the return value. If the requested value does not exist,",
                    "// don't set either |retval| or |exception|. If retrieval fails, set",
                    "// |exception| to the exception that will be thrown. Return true (1) if",
                    "// interceptor retrieval was handled, false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*get_byindex) (struct _cef_v8interceptor_t *, int, struct _cef_v8value_t *, struct _cef_v8value_t **, cef_string_t *)",
                "name": "get_byindex",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8interceptor_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle assignment of the interceptor value identified by |name|. |object|",
                    "// is the receiver ('this' object) of the interceptor. |value| is the new",
                    "// value being assigned to the interceptor. If assignment fails, set",
                    "// |exception| to the exception that will be thrown. This setter will always",
                    "// be called, even when the property has an associated accessor. Return true",
                    "// (1) if interceptor assignment was handled, false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*set_byname) (struct _cef_v8interceptor_t *, const cef_string_t *, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set_byname",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8interceptor_t"
                    ],
                    "int",
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Handle assignment of the interceptor value identified by |index|. |object|",
                    "// is the receiver ('this' object) of the interceptor. |value| is the new",
                    "// value being assigned to the interceptor. If assignment fails, set",
                    "// |exception| to the exception that will be thrown. Return true (1) if",
                    "// interceptor assignment was handled, false (0) otherwise.",
                    "///"
                ],
                "decl": "int (*set_byindex) (struct _cef_v8interceptor_t *, int, struct _cef_v8value_t *, struct _cef_v8value_t *, cef_string_t *)",
                "name": "set_byindex",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8stack_frame_t": {
        "comment": [
            "///",
            "// Structure representing a V8 stack frame handle. V8 handles can only be",
            "// accessed from the thread on which they are created. Valid threads for",
            "// creating a V8 handle include the render process main thread (TID_RENDERER)",
            "// and WebWorker threads. A task runner for posting tasks on the associated",
            "// thread can be retrieved via the cef_v8context_t::get_task_runner() function.",
            "///"
        ],
        "name": "cef_v8stack_frame_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying handle is valid and it can be accessed",
                    "// on the current thread. Do not call any other functions if this function",
                    "// returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_v8stack_frame_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name of the resource script that contains the function.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_script_name) (struct _cef_v8stack_frame_t *)",
                "name": "get_script_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name of the resource script that contains the function or the",
                    "// sourceURL value if the script name is undefined and its source ends with a",
                    "// \"//@ sourceURL=...\" string.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_script_name_or_source_url) (struct _cef_v8stack_frame_t *)",
                "name": "get_script_name_or_source_url",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the name of the function.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_function_name) (struct _cef_v8stack_frame_t *)",
                "name": "get_function_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the 1-based line number for the function call or 0 if unknown.",
                    "///"
                ],
                "decl": "int (*get_line_number) (struct _cef_v8stack_frame_t *)",
                "name": "get_line_number",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the 1-based column offset on the line for the function call or 0 if",
                    "// unknown.",
                    "///"
                ],
                "decl": "int (*get_column) (struct _cef_v8stack_frame_t *)",
                "name": "get_column",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the function was compiled using eval().",
                    "///"
                ],
                "decl": "int (*is_eval) (struct _cef_v8stack_frame_t *)",
                "name": "is_eval",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_frame_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the function was called as a constructor via \"new\".",
                    "///"
                ],
                "decl": "int (*is_constructor) (struct _cef_v8stack_frame_t *)",
                "name": "is_constructor",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_v8stack_trace_t": {
        "comment": [
            "///",
            "// Structure representing a V8 stack trace handle. V8 handles can only be",
            "// accessed from the thread on which they are created. Valid threads for",
            "// creating a V8 handle include the render process main thread (TID_RENDERER)",
            "// and WebWorker threads. A task runner for posting tasks on the associated",
            "// thread can be retrieved via the cef_v8context_t::get_task_runner() function.",
            "///"
        ],
        "name": "cef_v8stack_trace_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_trace_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying handle is valid and it can be accessed",
                    "// on the current thread. Do not call any other functions if this function",
                    "// returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_v8stack_trace_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_trace_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of stack frames.",
                    "///"
                ],
                "decl": "int (*get_frame_count) (struct _cef_v8stack_trace_t *)",
                "name": "get_frame_count",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8stack_trace_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the stack frame at the specified 0-based index.",
                    "///"
                ],
                "decl": "struct _cef_v8stack_frame_t * (*get_frame) (struct _cef_v8stack_trace_t *, int)",
                "name": "get_frame",
                "ret": [
                    "struct _cef_v8stack_frame_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_v8value_t": {
        "comment": [
            "///",
            "// Structure representing a V8 value handle. V8 handles can only be accessed",
            "// from the thread on which they are created. Valid threads for creating a V8",
            "// handle include the render process main thread (TID_RENDERER) and WebWorker",
            "// threads. A task runner for posting tasks on the associated thread can be",
            "// retrieved via the cef_v8context_t::get_task_runner() function.",
            "///"
        ],
        "name": "cef_v8value_t",
        "path": "include/capi/cef_v8_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying handle is valid and it can be accessed",
                    "// on the current thread. Do not call any other functions if this function",
                    "// returns false (0).",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_v8value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is undefined.",
                    "///"
                ],
                "decl": "int (*is_undefined) (struct _cef_v8value_t *)",
                "name": "is_undefined",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is null.",
                    "///"
                ],
                "decl": "int (*is_null) (struct _cef_v8value_t *)",
                "name": "is_null",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is bool.",
                    "///"
                ],
                "decl": "int (*is_bool) (struct _cef_v8value_t *)",
                "name": "is_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is int.",
                    "///"
                ],
                "decl": "int (*is_int) (struct _cef_v8value_t *)",
                "name": "is_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is unsigned int.",
                    "///"
                ],
                "decl": "int (*is_uint) (struct _cef_v8value_t *)",
                "name": "is_uint",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is double.",
                    "///"
                ],
                "decl": "int (*is_double) (struct _cef_v8value_t *)",
                "name": "is_double",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is Date.",
                    "///"
                ],
                "decl": "int (*is_date) (struct _cef_v8value_t *)",
                "name": "is_date",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is string.",
                    "///"
                ],
                "decl": "int (*is_string) (struct _cef_v8value_t *)",
                "name": "is_string",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is object.",
                    "///"
                ],
                "decl": "int (*is_object) (struct _cef_v8value_t *)",
                "name": "is_object",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is array.",
                    "///"
                ],
                "decl": "int (*is_array) (struct _cef_v8value_t *)",
                "name": "is_array",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is an ArrayBuffer.",
                    "///"
                ],
                "decl": "int (*is_array_buffer) (struct _cef_v8value_t *)",
                "name": "is_array_buffer",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// True if the value type is function.",
                    "///"
                ],
                "decl": "int (*is_function) (struct _cef_v8value_t *)",
                "name": "is_function",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object is pointing to the same handle as |that|",
                    "// object.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_v8value_t *, struct _cef_v8value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return a bool value.",
                    "///"
                ],
                "decl": "int (*get_bool_value) (struct _cef_v8value_t *)",
                "name": "get_bool_value",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return an int value.",
                    "///"
                ],
                "decl": "int32 (*get_int_value) (struct _cef_v8value_t *)",
                "name": "get_int_value",
                "ret": "int32",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return an unsigned int value.",
                    "///"
                ],
                "decl": "uint32 (*get_uint_value) (struct _cef_v8value_t *)",
                "name": "get_uint_value",
                "ret": "uint32",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return a double value.",
                    "///"
                ],
                "decl": "double (*get_double_value) (struct _cef_v8value_t *)",
                "name": "get_double_value",
                "ret": "double",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return a Date value.",
                    "///"
                ],
                "decl": "cef_time_t (*get_date_value) (struct _cef_v8value_t *)",
                "name": "get_date_value",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return a string value.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_string_value) (struct _cef_v8value_t *)",
                "name": "get_string_value",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "// OBJECT METHODS - These functions are only available on objects. Arrays and",
                    "// functions are also objects. String- and integer-based keys can be used",
                    "// interchangably with the framework converting between them as necessary.",
                    "///",
                    "// Returns true (1) if this is a user created object.",
                    "///"
                ],
                "decl": "int (*is_user_created) (struct _cef_v8value_t *)",
                "name": "is_user_created",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the last function call resulted in an exception. This",
                    "// attribute exists only in the scope of the current CEF value object.",
                    "///"
                ],
                "decl": "int (*has_exception) (struct _cef_v8value_t *)",
                "name": "has_exception",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the exception resulting from the last function call. This attribute",
                    "// exists only in the scope of the current CEF value object.",
                    "///"
                ],
                "decl": "struct _cef_v8exception_t * (*get_exception) (struct _cef_v8value_t *)",
                "name": "get_exception",
                "ret": [
                    "struct _cef_v8exception_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Clears the last exception and returns true (1) on success.",
                    "///"
                ],
                "decl": "int (*clear_exception) (struct _cef_v8value_t *)",
                "name": "clear_exception",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object will re-throw future exceptions. This",
                    "// attribute exists only in the scope of the current CEF value object.",
                    "///"
                ],
                "decl": "int (*will_rethrow_exceptions) (struct _cef_v8value_t *)",
                "name": "will_rethrow_exceptions",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Set whether this object will re-throw future exceptions. By default",
                    "// exceptions are not re-thrown. If a exception is re-thrown the current",
                    "// context should not be accessed again until after the exception has been",
                    "// caught and not re-thrown. Returns true (1) on success. This attribute",
                    "// exists only in the scope of the current CEF value object.",
                    "///"
                ],
                "decl": "int (*set_rethrow_exceptions) (struct _cef_v8value_t *, int)",
                "name": "set_rethrow_exceptions",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the object has a value with the specified identifier.",
                    "///"
                ],
                "decl": "int (*has_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "has_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the object has a value with the specified identifier.",
                    "///"
                ],
                "decl": "int (*has_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "has_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Deletes the value with the specified identifier and returns true (1) on",
                    "// success. Returns false (0) if this function is called incorrectly or an",
                    "// exception is thrown. For read-only and don't-delete values this function",
                    "// will return true (1) even though deletion failed.",
                    "///"
                ],
                "decl": "int (*delete_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "delete_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Deletes the value with the specified identifier and returns true (1) on",
                    "// success. Returns false (0) if this function is called incorrectly, deletion",
                    "// fails or an exception is thrown. For read-only and don't-delete values this",
                    "// function will return true (1) even though deletion failed.",
                    "///"
                ],
                "decl": "int (*delete_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "delete_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the value with the specified identifier on success. Returns NULL if",
                    "// this function is called incorrectly or an exception is thrown.",
                    "///"
                ],
                "decl": "struct _cef_v8value_t * (*get_value_bykey) (struct _cef_v8value_t *, const cef_string_t *)",
                "name": "get_value_bykey",
                "ret": [
                    "struct _cef_v8value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Returns the value with the specified identifier on success. Returns NULL if",
                    "// this function is called incorrectly or an exception is thrown.",
                    "///"
                ],
                "decl": "struct _cef_v8value_t * (*get_value_byindex) (struct _cef_v8value_t *, int)",
                "name": "get_value_byindex",
                "ret": [
                    "struct _cef_v8value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    "cef_v8_propertyattribute_t"
                ],
                "comment": [
                    "///",
                    "// Associates a value with the specified identifier and returns true (1) on",
                    "// success. Returns false (0) if this function is called incorrectly or an",
                    "// exception is thrown. For read-only values this function will return true",
                    "// (1) even though assignment failed.",
                    "///"
                ],
                "decl": "int (*set_value_bykey) (struct _cef_v8value_t *, const cef_string_t *, struct _cef_v8value_t *, cef_v8_propertyattribute_t)",
                "name": "set_value_bykey",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int",
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Associates a value with the specified identifier and returns true (1) on",
                    "// success. Returns false (0) if this function is called incorrectly or an",
                    "// exception is thrown. For read-only values this function will return true",
                    "// (1) even though assignment failed.",
                    "///"
                ],
                "decl": "int (*set_value_byindex) (struct _cef_v8value_t *, int, struct _cef_v8value_t *)",
                "name": "set_value_byindex",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "cef_v8_accesscontrol_t",
                    "cef_v8_propertyattribute_t"
                ],
                "comment": [
                    "///",
                    "// Registers an identifier and returns true (1) on success. Access to the",
                    "// identifier will be forwarded to the cef_v8accessor_t instance passed to",
                    "// cef_v8value_t::cef_v8value_create_object(). Returns false (0) if this",
                    "// function is called incorrectly or an exception is thrown. For read-only",
                    "// values this function will return true (1) even though assignment failed.",
                    "///"
                ],
                "decl": "int (*set_value_byaccessor) (struct _cef_v8value_t *, const cef_string_t *, cef_v8_accesscontrol_t, cef_v8_propertyattribute_t)",
                "name": "set_value_byaccessor",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Read the keys for the object's values into the specified vector. Integer-",
                    "// based keys will also be returned as strings.",
                    "///"
                ],
                "decl": "int (*get_keys) (struct _cef_v8value_t *, cef_string_list_t)",
                "name": "get_keys",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_base_ref_counted_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the user data for this object and returns true (1) on success. Returns",
                    "// false (0) if this function is called incorrectly. This function can only be",
                    "// called on user created objects.",
                    "///"
                ],
                "decl": "int (*set_user_data) (struct _cef_v8value_t *, struct _cef_base_ref_counted_t *)",
                "name": "set_user_data",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the user data, if any, assigned to this object.",
                    "///"
                ],
                "decl": "struct _cef_base_ref_counted_t * (*get_user_data) (struct _cef_v8value_t *)",
                "name": "get_user_data",
                "ret": [
                    "struct _cef_base_ref_counted_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the amount of externally allocated memory registered for the",
                    "// object.",
                    "///"
                ],
                "decl": "int (*get_externally_allocated_memory) (struct _cef_v8value_t *)",
                "name": "get_externally_allocated_memory",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Adjusts the amount of registered external memory for the object. Used to",
                    "// give V8 an indication of the amount of externally allocated memory that is",
                    "// kept alive by JavaScript objects. V8 uses this information to decide when",
                    "// to perform global garbage collection. Each cef_v8value_t tracks the amount",
                    "// of external memory associated with it and automatically decreases the",
                    "// global total by the appropriate amount on its destruction.",
                    "// |change_in_bytes| specifies the number of bytes to adjust by. This function",
                    "// returns the number of bytes associated with the object after the",
                    "// adjustment. This function can only be called on user created objects.",
                    "///"
                ],
                "decl": "int (*adjust_externally_allocated_memory) (struct _cef_v8value_t *, int)",
                "name": "adjust_externally_allocated_memory",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "// ARRAY METHODS - These functions are only available on arrays.",
                    "///",
                    "// Returns the number of elements in the array.",
                    "///"
                ],
                "decl": "int (*get_array_length) (struct _cef_v8value_t *)",
                "name": "get_array_length",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "// ARRAY BUFFER METHODS - These functions are only available on ArrayBuffers.",
                    "///",
                    "// Returns the ReleaseCallback object associated with the ArrayBuffer or NULL",
                    "// if the ArrayBuffer was not created with CreateArrayBuffer.",
                    "///"
                ],
                "decl": "struct _cef_v8array_buffer_release_callback_t * (*get_array_buffer_release_callback) (struct _cef_v8value_t *)",
                "name": "get_array_buffer_release_callback",
                "ret": [
                    "struct _cef_v8array_buffer_release_callback_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Prevent the ArrayBuffer from using it's memory block by setting the length",
                    "// to zero. This operation cannot be undone. If the ArrayBuffer was created",
                    "// with CreateArrayBuffer then",
                    "// cef_v8array_buffer_release_callback_t::ReleaseBuffer will be called to",
                    "// release the underlying buffer.",
                    "///"
                ],
                "decl": "int (*neuter_array_buffer) (struct _cef_v8value_t *)",
                "name": "neuter_array_buffer",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "// FUNCTION METHODS - These functions are only available on functions.",
                    "///",
                    "// Returns the function name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_function_name) (struct _cef_v8value_t *)",
                "name": "get_function_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the function handler or NULL if not a CEF-created function.",
                    "///"
                ],
                "decl": "struct _cef_v8handler_t * (*get_function_handler) (struct _cef_v8value_t *)",
                "name": "get_function_handler",
                "ret": [
                    "struct _cef_v8handler_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute the function using the current V8 context. This function should",
                    "// only be called from within the scope of a cef_v8handler_t or",
                    "// cef_v8accessor_t callback, or in combination with calling enter() and",
                    "// exit() on a stored cef_v8context_t reference. |object| is the receiver",
                    "// ('this' object) of the function. If |object| is NULL the current context's",
                    "// global object will be used. |arguments| is the list of arguments that will",
                    "// be passed to the function. Returns the function return value on success.",
                    "// Returns NULL if this function is called incorrectly or an exception is",
                    "// thrown.",
                    "///"
                ],
                "decl": "struct _cef_v8value_t * (*execute_function) (struct _cef_v8value_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *)",
                "name": "execute_function",
                "ret": [
                    "struct _cef_v8value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_v8value_t"
                    ],
                    [
                        "struct _cef_v8context_t"
                    ],
                    [
                        "struct _cef_v8value_t"
                    ],
                    "size_t",
                    [
                        [
                            "struct _cef_v8value_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Execute the function using the specified V8 context. |object| is the",
                    "// receiver ('this' object) of the function. If |object| is NULL the specified",
                    "// context's global object will be used. |arguments| is the list of arguments",
                    "// that will be passed to the function. Returns the function return value on",
                    "// success. Returns NULL if this function is called incorrectly or an",
                    "// exception is thrown.",
                    "///"
                ],
                "decl": "struct _cef_v8value_t * (*execute_function_with_context) (struct _cef_v8value_t *, struct _cef_v8context_t *, struct _cef_v8value_t *, size_t, struct _cef_v8value_t *const *)",
                "name": "execute_function_with_context",
                "ret": [
                    "struct _cef_v8value_t"
                ],
                "type": "fptr"
            }
        ]
    },
    "_cef_value_t": {
        "comment": [
            "///",
            "// Structure that wraps other data value types. Complex types (binary,",
            "// dictionary and list) will be referenced but not owned by this object. Can be",
            "// used on any process and thread.",
            "///"
        ],
        "name": "cef_value_t",
        "path": "include/capi/cef_values_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying data is valid. This will always be true",
                    "// (1) for simple types. For complex types (binary, dictionary and list) the",
                    "// underlying data may become invalid if owned by another object (e.g. list or",
                    "// dictionary) and that other object is then modified or destroyed. This value",
                    "// object can be re-used by calling Set*() even if the underlying data is",
                    "// invalid.",
                    "///"
                ],
                "decl": "int (*is_valid) (struct _cef_value_t *)",
                "name": "is_valid",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying data is owned by another object.",
                    "///"
                ],
                "decl": "int (*is_owned) (struct _cef_value_t *)",
                "name": "is_owned",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if the underlying data is read-only. Some APIs may expose",
                    "// read-only objects.",
                    "///"
                ],
                "decl": "int (*is_read_only) (struct _cef_value_t *)",
                "name": "is_read_only",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have the same underlying",
                    "// data. If true (1) modifications to this object will also affect |that|",
                    "// object and vice-versa.",
                    "///"
                ],
                "decl": "int (*is_same) (struct _cef_value_t *, struct _cef_value_t *)",
                "name": "is_same",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns true (1) if this object and |that| object have an equivalent",
                    "// underlying value but are not necessarily the same object.",
                    "///"
                ],
                "decl": "int (*is_equal) (struct _cef_value_t *, struct _cef_value_t *)",
                "name": "is_equal",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a copy of this object. The underlying data will also be copied.",
                    "///"
                ],
                "decl": "struct _cef_value_t * (*copy) (struct _cef_value_t *)",
                "name": "copy",
                "ret": [
                    "struct _cef_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value type.",
                    "///"
                ],
                "decl": "cef_value_type_t (*get_type) (struct _cef_value_t *)",
                "name": "get_type",
                "ret": "cef_value_type_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type bool.",
                    "///"
                ],
                "decl": "int (*get_bool) (struct _cef_value_t *)",
                "name": "get_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type int.",
                    "///"
                ],
                "decl": "int (*get_int) (struct _cef_value_t *)",
                "name": "get_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type double.",
                    "///"
                ],
                "decl": "double (*get_double) (struct _cef_value_t *)",
                "name": "get_double",
                "ret": "double",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type string.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_string) (struct _cef_value_t *)",
                "name": "get_string",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type binary. The returned reference may",
                    "// become invalid if the value is owned by another object or if ownership is",
                    "// transferred to another object in the future. To maintain a reference to the",
                    "// value after assigning ownership to a dictionary or list pass this object to",
                    "// the set_value() function instead of passing the returned reference to",
                    "// set_binary().",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_binary) (struct _cef_value_t *)",
                "name": "get_binary",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type dictionary. The returned reference may",
                    "// become invalid if the value is owned by another object or if ownership is",
                    "// transferred to another object in the future. To maintain a reference to the",
                    "// value after assigning ownership to a dictionary or list pass this object to",
                    "// the set_value() function instead of passing the returned reference to",
                    "// set_dictionary().",
                    "///"
                ],
                "decl": "struct _cef_dictionary_value_t * (*get_dictionary) (struct _cef_value_t *)",
                "name": "get_dictionary",
                "ret": [
                    "struct _cef_dictionary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the underlying value as type list. The returned reference may",
                    "// become invalid if the value is owned by another object or if ownership is",
                    "// transferred to another object in the future. To maintain a reference to the",
                    "// value after assigning ownership to a dictionary or list pass this object to",
                    "// the set_value() function instead of passing the returned reference to",
                    "// set_list().",
                    "///"
                ],
                "decl": "struct _cef_list_value_t * (*get_list) (struct _cef_value_t *)",
                "name": "get_list",
                "ret": [
                    "struct _cef_list_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type null. Returns true (1) if the value was",
                    "// set successfully.",
                    "///"
                ],
                "decl": "int (*set_null) (struct _cef_value_t *)",
                "name": "set_null",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type bool. Returns true (1) if the value was",
                    "// set successfully.",
                    "///"
                ],
                "decl": "int (*set_bool) (struct _cef_value_t *, int)",
                "name": "set_bool",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type int. Returns true (1) if the value was",
                    "// set successfully.",
                    "///"
                ],
                "decl": "int (*set_int) (struct _cef_value_t *, int)",
                "name": "set_int",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    "double"
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type double. Returns true (1) if the value was",
                    "// set successfully.",
                    "///"
                ],
                "decl": "int (*set_double) (struct _cef_value_t *, double)",
                "name": "set_double",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "const cef_string_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type string. Returns true (1) if the value was",
                    "// set successfully.",
                    "///"
                ],
                "decl": "int (*set_string) (struct _cef_value_t *, const cef_string_t *)",
                "name": "set_string",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "struct _cef_binary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type binary. Returns true (1) if the value was",
                    "// set successfully. This object keeps a reference to |value| and ownership of",
                    "// the underlying data remains unchanged.",
                    "///"
                ],
                "decl": "int (*set_binary) (struct _cef_value_t *, struct _cef_binary_value_t *)",
                "name": "set_binary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "struct _cef_dictionary_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type dict. Returns true (1) if the value was",
                    "// set successfully. This object keeps a reference to |value| and ownership of",
                    "// the underlying data remains unchanged.",
                    "///"
                ],
                "decl": "int (*set_dictionary) (struct _cef_value_t *, struct _cef_dictionary_value_t *)",
                "name": "set_dictionary",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_value_t"
                    ],
                    [
                        "struct _cef_list_value_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Sets the underlying value as type list. Returns true (1) if the value was",
                    "// set successfully. This object keeps a reference to |value| and ownership of",
                    "// the underlying data remains unchanged.",
                    "///"
                ],
                "decl": "int (*set_list) (struct _cef_value_t *, struct _cef_list_value_t *)",
                "name": "set_list",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_web_plugin_info_t": {
        "comment": [
            "///",
            "// Information about a specific web plugin.",
            "///"
        ],
        "name": "cef_web_plugin_info_t",
        "path": "include/capi/cef_web_plugin_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the plugin name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_name) (struct _cef_web_plugin_info_t *)",
                "name": "get_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the plugin file path (DLL/bundle/library).",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_path) (struct _cef_web_plugin_info_t *)",
                "name": "get_path",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the version of the plugin (may be OS-specific).",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_version) (struct _cef_web_plugin_info_t *)",
                "name": "get_version",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_info_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a description of the plugin from the version information.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_description) (struct _cef_web_plugin_info_t *)",
                "name": "get_description",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            }
        ]
    },
    "_cef_web_plugin_info_visitor_t": {
        "comment": [
            "///",
            "// Structure to implement for visiting web plugin information. The functions of",
            "// this structure will be called on the browser process UI thread.",
            "///"
        ],
        "name": "cef_web_plugin_info_visitor_t",
        "path": "include/capi/cef_web_plugin_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_info_visitor_t"
                    ],
                    [
                        "struct _cef_web_plugin_info_t"
                    ],
                    "int",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be called once for each plugin. |count| is the 0-based",
                    "// index for the current plugin. |total| is the total number of plugins.",
                    "// Return false (0) to stop visiting plugins. This function may never be",
                    "// called if no plugins are found.",
                    "///"
                ],
                "decl": "int (*visit) (struct _cef_web_plugin_info_visitor_t *, struct _cef_web_plugin_info_t *, int, int)",
                "name": "visit",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_web_plugin_unstable_callback_t": {
        "comment": [
            "///",
            "// Structure to implement for receiving unstable plugin information. The",
            "// functions of this structure will be called on the browser process IO thread.",
            "///"
        ],
        "name": "cef_web_plugin_unstable_callback_t",
        "path": "include/capi/cef_web_plugin_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_web_plugin_unstable_callback_t"
                    ],
                    [
                        "const cef_string_t"
                    ],
                    "int"
                ],
                "comment": [
                    "///",
                    "// Method that will be called for the requested plugin. |unstable| will be",
                    "// true (1) if the plugin has reached the crash count threshold of 3 times in",
                    "// 120 seconds.",
                    "///"
                ],
                "decl": "void (*is_unstable) (struct _cef_web_plugin_unstable_callback_t *, const cef_string_t *, int)",
                "name": "is_unstable",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_window_info_t": {
        "comment": [
            "///",
            "// Class representing window information.",
            "///"
        ],
        "name": "cef_window_info_t",
        "path": "include/internal/cef_types_mac.h",
        "props": [
            {
                "name": "window_name",
                "type": "cef_string_t"
            },
            {
                "name": "x",
                "type": "int"
            },
            {
                "name": "y",
                "type": "int"
            },
            {
                "name": "width",
                "type": "int"
            },
            {
                "name": "height",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to create the view initially hidden.",
                    "///"
                ],
                "name": "hidden",
                "type": "int"
            },
            {
                "name": "parent_view",
                "type": [
                    "void"
                ]
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to create the browser using windowless (off-screen)",
                    "// rendering. No view will be created for the browser and all rendering will",
                    "// occur via the CefRenderHandler interface. The |parent_view| value will be",
                    "// used to identify monitor info and to act as the parent view for dialogs,",
                    "// context menus, etc. If |parent_view| is not provided then the main screen",
                    "// monitor will be used and some functionality that requires a parent view",
                    "// may not function correctly. In order to create windowless browsers the",
                    "// CefSettings.windowless_rendering_enabled value must be set to true.",
                    "// Transparent painting is enabled by default but can be disabled by setting",
                    "// CefBrowserSettings.background_color to an opaque value.",
                    "///"
                ],
                "name": "windowless_rendering_enabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to enable shared textures for windowless rendering. Only",
                    "// valid if windowless_rendering_enabled above is also set to true. Currently",
                    "// only supported on Windows (D3D11).",
                    "///"
                ],
                "name": "shared_texture_enabled",
                "type": "int"
            },
            {
                "comment": [
                    "///",
                    "// Set to true (1) to enable the ability to issue BeginFrame from the client",
                    "// application.",
                    "///"
                ],
                "name": "external_begin_frame_enabled",
                "type": "int"
            },
            {
                "name": "view",
                "type": [
                    "void"
                ]
            }
        ]
    },
    "_cef_write_handler_t": {
        "comment": [
            "///",
            "// Structure the client can implement to provide a custom stream writer. The",
            "// functions of this structure may be called on any thread.",
            "///"
        ],
        "name": "cef_write_handler_t",
        "path": "include/capi/cef_stream_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_write_handler_t"
                    ],
                    [
                        "const void"
                    ],
                    "size_t",
                    "size_t"
                ],
                "comment": [
                    "///",
                    "// Write raw binary data.",
                    "///"
                ],
                "decl": "size_t (*write) (struct _cef_write_handler_t *, const void *, size_t, size_t)",
                "name": "write",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_write_handler_t"
                    ],
                    "int64",
                    "int"
                ],
                "comment": [
                    "///",
                    "// Seek to the specified offset position. |whence| may be any one of SEEK_CUR,",
                    "// SEEK_END or SEEK_SET. Return zero on success and non-zero on failure.",
                    "///"
                ],
                "decl": "int (*seek) (struct _cef_write_handler_t *, int64, int)",
                "name": "seek",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_write_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return the current offset position.",
                    "///"
                ],
                "decl": "int64 (*tell) (struct _cef_write_handler_t *)",
                "name": "tell",
                "ret": "int64",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_write_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Flush the stream.",
                    "///"
                ],
                "decl": "int (*flush) (struct _cef_write_handler_t *)",
                "name": "flush",
                "ret": "int",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_write_handler_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Return true (1) if this handler performs work like accessing the file",
                    "// system which may block. Used as a hint for determining the thread to access",
                    "// the handler from.",
                    "///"
                ],
                "decl": "int (*may_block) (struct _cef_write_handler_t *)",
                "name": "may_block",
                "ret": "int",
                "type": "fptr"
            }
        ]
    },
    "_cef_x509cert_principal_t": {
        "comment": [
            "///",
            "// Structure representing the issuer or subject field of an X.509 certificate.",
            "///"
        ],
        "name": "cef_x509cert_principal_t",
        "path": "include/capi/cef_x509_certificate_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns a name that can be used to represent the issuer. It tries in this",
                    "// order: Common Name (CN), Organization Name (O) and Organizational Unit Name",
                    "// (OU) and returns the first non-NULL one found.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_display_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_display_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the common name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_common_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_common_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the locality name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_locality_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_locality_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the state or province name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_state_or_province_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_state_or_province_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the country name.",
                    "///",
                    "// The resulting string must be freed by calling cef_string_userfree_free()."
                ],
                "decl": "cef_string_userfree_t (*get_country_name) (struct _cef_x509cert_principal_t *)",
                "name": "get_country_name",
                "ret": "cef_string_userfree_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of street addresses.",
                    "///"
                ],
                "decl": "void (*get_street_addresses) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_street_addresses",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of organization names.",
                    "///"
                ],
                "decl": "void (*get_organization_names) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_organization_names",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of organization unit names.",
                    "///"
                ],
                "decl": "void (*get_organization_unit_names) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_organization_unit_names",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509cert_principal_t"
                    ],
                    "cef_string_list_t"
                ],
                "comment": [
                    "///",
                    "// Retrieve the list of domain components.",
                    "///"
                ],
                "decl": "void (*get_domain_components) (struct _cef_x509cert_principal_t *, cef_string_list_t)",
                "name": "get_domain_components",
                "ret": "void",
                "type": "fptr"
            }
        ]
    },
    "_cef_x509certificate_t": {
        "comment": [
            "///",
            "// Structure representing a X.509 certificate.",
            "///"
        ],
        "name": "cef_x509certificate_t",
        "path": "include/capi/cef_x509_certificate_capi.h",
        "props": [
            {
                "comment": [
                    "///",
                    "// Base structure.",
                    "///"
                ],
                "name": "base",
                "type": "cef_base_ref_counted_t"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the subject of the X.509 certificate. For HTTPS server certificates",
                    "// this represents the web server.  The common name of the subject should",
                    "// match the host name of the web server.",
                    "///"
                ],
                "decl": "struct _cef_x509cert_principal_t * (*get_subject) (struct _cef_x509certificate_t *)",
                "name": "get_subject",
                "ret": [
                    "struct _cef_x509cert_principal_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the issuer of the X.509 certificate.",
                    "///"
                ],
                "decl": "struct _cef_x509cert_principal_t * (*get_issuer) (struct _cef_x509certificate_t *)",
                "name": "get_issuer",
                "ret": [
                    "struct _cef_x509cert_principal_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the DER encoded serial number for the X.509 certificate. The value",
                    "// possibly includes a leading 00 byte.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_serial_number) (struct _cef_x509certificate_t *)",
                "name": "get_serial_number",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the date before which the X.509 certificate is invalid.",
                    "// CefTime.GetTimeT() will return 0 if no date was specified.",
                    "///"
                ],
                "decl": "cef_time_t (*get_valid_start) (struct _cef_x509certificate_t *)",
                "name": "get_valid_start",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the date after which the X.509 certificate is invalid.",
                    "// CefTime.GetTimeT() will return 0 if no date was specified.",
                    "///"
                ],
                "decl": "cef_time_t (*get_valid_expiry) (struct _cef_x509certificate_t *)",
                "name": "get_valid_expiry",
                "ret": "cef_time_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the DER encoded data for the X.509 certificate.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_derencoded) (struct _cef_x509certificate_t *)",
                "name": "get_derencoded",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the PEM encoded data for the X.509 certificate.",
                    "///"
                ],
                "decl": "struct _cef_binary_value_t * (*get_pemencoded) (struct _cef_x509certificate_t *)",
                "name": "get_pemencoded",
                "ret": [
                    "struct _cef_binary_value_t"
                ],
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the number of certificates in the issuer chain. If 0, the",
                    "// certificate is self-signed.",
                    "///"
                ],
                "decl": "size_t (*get_issuer_chain_size) (struct _cef_x509certificate_t *)",
                "name": "get_issuer_chain_size",
                "ret": "size_t",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "struct _cef_binary_value_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the DER encoded data for the certificate issuer chain. If we failed",
                    "// to encode a certificate in the chain it is still present in the array but",
                    "// is an NULL string.",
                    "///"
                ],
                "decl": "void (*get_derencoded_issuer_chain) (struct _cef_x509certificate_t *, size_t *, struct _cef_binary_value_t **)",
                "name": "get_derencoded_issuer_chain",
                "ret": "void",
                "type": "fptr"
            },
            {
                "args": [
                    [
                        "struct _cef_x509certificate_t"
                    ],
                    [
                        "size_t"
                    ],
                    [
                        [
                            "struct _cef_binary_value_t"
                        ]
                    ]
                ],
                "comment": [
                    "///",
                    "// Returns the PEM encoded data for the certificate issuer chain. If we failed",
                    "// to encode a certificate in the chain it is still present in the array but",
                    "// is an NULL string.",
                    "///"
                ],
                "decl": "void (*get_pemencoded_issuer_chain) (struct _cef_x509certificate_t *, size_t *, struct _cef_binary_value_t **)",
                "name": "get_pemencoded_issuer_chain",
                "ret": "void",
                "type": "fptr"
            }
        ]
    }
}